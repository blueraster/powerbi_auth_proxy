/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib/axios */ \"./node_modules/axios/lib/axios.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanM/YmMzYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQyxzREFBYSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/index.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\nvar settle = __webpack_require__(/*! ./../core/settle */ \"./node_modules/axios/lib/core/settle.js\");\nvar buildURL = __webpack_require__(/*! ./../helpers/buildURL */ \"./node_modules/axios/lib/helpers/buildURL.js\");\nvar buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ \"./node_modules/axios/lib/core/buildFullPath.js\");\nvar parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ \"./node_modules/axios/lib/helpers/parseHeaders.js\");\nvar isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ \"./node_modules/axios/lib/helpers/isURLSameOrigin.js\");\nvar createError = __webpack_require__(/*! ../core/createError */ \"./node_modules/axios/lib/core/createError.js\");\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request.onreadystatechange = function handleLoad() {\n      if (!request || request.readyState !== 4) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      var cookies = __webpack_require__(/*! ./../helpers/cookies */ \"./node_modules/axios/lib/helpers/cookies.js\");\n\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (requestData === undefined) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/adapters/xhr.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./utils */ \"./node_modules/axios/lib/utils.js\");\nvar bind = __webpack_require__(/*! ./helpers/bind */ \"./node_modules/axios/lib/helpers/bind.js\");\nvar Axios = __webpack_require__(/*! ./core/Axios */ \"./node_modules/axios/lib/core/Axios.js\");\nvar mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ \"./node_modules/axios/lib/core/mergeConfig.js\");\nvar defaults = __webpack_require__(/*! ./defaults */ \"./node_modules/axios/lib/defaults.js\");\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Factory for creating new instances\naxios.create = function create(instanceConfig) {\n  return createInstance(mergeConfig(axios.defaults, instanceConfig));\n};\n\n// Expose Cancel & CancelToken\naxios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ \"./node_modules/axios/lib/cancel/Cancel.js\");\naxios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ \"./node_modules/axios/lib/cancel/CancelToken.js\");\naxios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ \"./node_modules/axios/lib/cancel/isCancel.js\");\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = __webpack_require__(/*! ./helpers/spread */ \"./node_modules/axios/lib/helpers/spread.js\");\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzP2NlZTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLGtEQUFTO0FBQzdCLFdBQVcsbUJBQU8sQ0FBQyxnRUFBZ0I7QUFDbkMsWUFBWSxtQkFBTyxDQUFDLDREQUFjO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLHdFQUFvQjtBQUM5QyxlQUFlLG1CQUFPLENBQUMsd0RBQVk7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZLE1BQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLGtFQUFpQjtBQUN4QyxvQkFBb0IsbUJBQU8sQ0FBQyw0RUFBc0I7QUFDbEQsaUJBQWlCLG1CQUFPLENBQUMsc0VBQW1COztBQUU1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQyxvRUFBa0I7O0FBRXpDOztBQUVBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhheGlvcy5kZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/axios.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanM/N2E3NyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/cancel/Cancel.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Cancel = __webpack_require__(/*! ./Cancel */ \"./node_modules/axios/lib/cancel/Cancel.js\");\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcz84ZGY0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGFBQWEsbUJBQU8sQ0FBQywyREFBVTs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/cancel/CancelToken.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcz8yZTY3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/cancel/isCancel.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\nvar buildURL = __webpack_require__(/*! ../helpers/buildURL */ \"./node_modules/axios/lib/helpers/buildURL.js\");\nvar InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ \"./node_modules/axios/lib/core/InterceptorManager.js\");\nvar dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ \"./node_modules/axios/lib/core/dispatchRequest.js\");\nvar mergeConfig = __webpack_require__(/*! ./mergeConfig */ \"./node_modules/axios/lib/core/mergeConfig.js\");\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = arguments[1] || {};\n    config.url = arguments[0];\n  } else {\n    config = config || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  // Hook up interceptors middleware\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanM/MGEwNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixZQUFZLG1CQUFPLENBQUMscURBQVk7QUFDaEMsZUFBZSxtQkFBTyxDQUFDLHlFQUFxQjtBQUM1Qyx5QkFBeUIsbUJBQU8sQ0FBQyxpRkFBc0I7QUFDdkQsc0JBQXNCLG1CQUFPLENBQUMsMkVBQW1CO0FBQ2pELGtCQUFrQixtQkFBTyxDQUFDLG1FQUFlOztBQUV6QztBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBhcmd1bWVudHNbMV0gfHwge307XG4gICAgY29uZmlnLnVybCA9IGFyZ3VtZW50c1swXTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/Axios.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzP2Y2YjQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLHFEQUFZOztBQUVoQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQjtBQUNBLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/InterceptorManager.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ \"./node_modules/axios/lib/helpers/isAbsoluteURL.js\");\nvar combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ \"./node_modules/axios/lib/helpers/combineURLs.js\");\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcz84M2I5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLG9CQUFvQixtQkFBTyxDQUFDLG1GQUEwQjtBQUN0RCxrQkFBa0IsbUJBQU8sQ0FBQywrRUFBd0I7O0FBRWxEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/buildFullPath.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar enhanceError = __webpack_require__(/*! ./enhanceError */ \"./node_modules/axios/lib/core/enhanceError.js\");\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanM/MmQ4MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixtQkFBbUIsbUJBQU8sQ0FBQyxxRUFBZ0I7O0FBRTNDO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/createError.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\nvar transformData = __webpack_require__(/*! ./transformData */ \"./node_modules/axios/lib/core/transformData.js\");\nvar isCancel = __webpack_require__(/*! ../cancel/isCancel */ \"./node_modules/axios/lib/cancel/isCancel.js\");\nvar defaults = __webpack_require__(/*! ../defaults */ \"./node_modules/axios/lib/defaults.js\");\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzPzUyNzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLHFEQUFZO0FBQ2hDLG9CQUFvQixtQkFBTyxDQUFDLHVFQUFpQjtBQUM3QyxlQUFlLG1CQUFPLENBQUMsdUVBQW9CO0FBQzNDLGVBQWUsbUJBQU8sQ0FBQyx5REFBYTs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLHVDQUF1QztBQUN2QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/dispatchRequest.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code\n    };\n  };\n  return error;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzPzM4N2YiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZVxuICAgIH07XG4gIH07XG4gIHJldHVybiBlcnJvcjtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/enhanceError.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"./node_modules/axios/lib/utils.js\");\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  var valueFromConfig2Keys = ['url', 'method', 'params', 'data'];\n  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy'];\n  var defaultToConfig2Keys = [\n    'baseURL', 'url', 'transformRequest', 'transformResponse', 'paramsSerializer',\n    'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',\n    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress',\n    'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent',\n    'httpsAgent', 'cancelToken', 'socketPath'\n  ];\n\n  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {\n    if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    }\n  });\n\n  utils.forEach(mergeDeepPropertiesKeys, function mergeDeepProperties(prop) {\n    if (utils.isObject(config2[prop])) {\n      config[prop] = utils.deepMerge(config1[prop], config2[prop]);\n    } else if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    } else if (utils.isObject(config1[prop])) {\n      config[prop] = utils.deepMerge(config1[prop]);\n    } else if (typeof config1[prop] !== 'undefined') {\n      config[prop] = config1[prop];\n    }\n  });\n\n  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {\n    if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    } else if (typeof config1[prop] !== 'undefined') {\n      config[prop] = config1[prop];\n    }\n  });\n\n  var axiosKeys = valueFromConfig2Keys\n    .concat(mergeDeepPropertiesKeys)\n    .concat(defaultToConfig2Keys);\n\n  var otherKeys = Object\n    .keys(config2)\n    .filter(function filterAxiosKeys(key) {\n      return axiosKeys.indexOf(key) === -1;\n    });\n\n  utils.forEach(otherKeys, function otherKeysDefaultToConfig2(prop) {\n    if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    } else if (typeof config1[prop] !== 'undefined') {\n      config[prop] = config1[prop];\n    }\n  });\n\n  return config;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanM/NGE3YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixZQUFZLG1CQUFPLENBQUMsbURBQVU7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICB2YXIgdmFsdWVGcm9tQ29uZmlnMktleXMgPSBbJ3VybCcsICdtZXRob2QnLCAncGFyYW1zJywgJ2RhdGEnXTtcbiAgdmFyIG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzID0gWydoZWFkZXJzJywgJ2F1dGgnLCAncHJveHknXTtcbiAgdmFyIGRlZmF1bHRUb0NvbmZpZzJLZXlzID0gW1xuICAgICdiYXNlVVJMJywgJ3VybCcsICd0cmFuc2Zvcm1SZXF1ZXN0JywgJ3RyYW5zZm9ybVJlc3BvbnNlJywgJ3BhcmFtc1NlcmlhbGl6ZXInLFxuICAgICd0aW1lb3V0JywgJ3dpdGhDcmVkZW50aWFscycsICdhZGFwdGVyJywgJ3Jlc3BvbnNlVHlwZScsICd4c3JmQ29va2llTmFtZScsXG4gICAgJ3hzcmZIZWFkZXJOYW1lJywgJ29uVXBsb2FkUHJvZ3Jlc3MnLCAnb25Eb3dubG9hZFByb2dyZXNzJyxcbiAgICAnbWF4Q29udGVudExlbmd0aCcsICd2YWxpZGF0ZVN0YXR1cycsICdtYXhSZWRpcmVjdHMnLCAnaHR0cEFnZW50JyxcbiAgICAnaHR0cHNBZ2VudCcsICdjYW5jZWxUb2tlbicsICdzb2NrZXRQYXRoJ1xuICBdO1xuXG4gIHV0aWxzLmZvckVhY2godmFsdWVGcm9tQ29uZmlnMktleXMsIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzLCBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAodXRpbHMuaXNPYmplY3QoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IHV0aWxzLmRlZXBNZXJnZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSB1dGlscy5kZWVwTWVyZ2UoY29uZmlnMVtwcm9wXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzFbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKGRlZmF1bHRUb0NvbmZpZzJLZXlzLCBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGF4aW9zS2V5cyA9IHZhbHVlRnJvbUNvbmZpZzJLZXlzXG4gICAgLmNvbmNhdChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cylcbiAgICAuY29uY2F0KGRlZmF1bHRUb0NvbmZpZzJLZXlzKTtcblxuICB2YXIgb3RoZXJLZXlzID0gT2JqZWN0XG4gICAgLmtleXMoY29uZmlnMilcbiAgICAuZmlsdGVyKGZ1bmN0aW9uIGZpbHRlckF4aW9zS2V5cyhrZXkpIHtcbiAgICAgIHJldHVybiBheGlvc0tleXMuaW5kZXhPZihrZXkpID09PSAtMTtcbiAgICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG90aGVyS2V5cywgZnVuY3Rpb24gb3RoZXJLZXlzRGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/mergeConfig.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar createError = __webpack_require__(/*! ./createError */ \"./node_modules/axios/lib/core/createError.js\");\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzPzQ2N2YiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCLG1CQUFPLENBQUMsbUVBQWU7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/settle.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn(data, headers);\n  });\n\n  return data;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcz9jNDAxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxxREFBWTs7QUFFaEM7QUFDQTtBQUNBO0FBQ0EsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsTUFBTTtBQUNqQixXQUFXLGVBQWU7QUFDMUIsYUFBYSxFQUFFO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/transformData.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\n\nvar utils = __webpack_require__(/*! ./utils */ \"./node_modules/axios/lib/utils.js\");\nvar normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ \"./node_modules/axios/lib/helpers/normalizeHeaderName.js\");\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = __webpack_require__(/*! ./adapters/xhr */ \"./node_modules/axios/lib/adapters/xhr.js\");\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = __webpack_require__(/*! ./adapters/http */ \"./node_modules/axios/lib/adapters/xhr.js\");\n  }\n  return adapter;\n}\n\nvar defaults = {\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (e) { /* Ignore */ }\n    }\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\n\ndefaults.headers = {\n  common: {\n    'Accept': 'application/json, text/plain, */*'\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzPzI0NDQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsK0NBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLGtEQUFTO0FBQzdCLDBCQUEwQixtQkFBTyxDQUFDLDhGQUErQjs7QUFFakU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG1CQUFPLENBQUMsZ0VBQWdCO0FBQ3RDLEdBQUc7QUFDSDtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxpRUFBaUI7QUFDdkM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0U7QUFDeEU7QUFDQTtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sWUFBWTtBQUNuQjtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/defaults.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcz8xZDJiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixpQkFBaUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/bind.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%40/gi, '@').\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanM/MzBiNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixZQUFZLG1CQUFPLENBQUMscURBQVk7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyU0MC9naSwgJ0AnKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/buildURL.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanM/ZTY4MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/combineURLs.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcz83YWFjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxxREFBWTs7QUFFaEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDBDQUEwQztBQUMxQyxTQUFTOztBQUVUO0FBQ0EsNERBQTRELHdCQUF3QjtBQUNwRjtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQywrQkFBK0IsYUFBYSxFQUFFO0FBQzlDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/cookies.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcz9kOTI1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/isAbsoluteURL.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\nvar isValidXss = __webpack_require__(/*! ./isValidXss */ \"./node_modules/axios/lib/helpers/isValidXss.js\");\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (isValidXss(url)) {\n          throw new Error('URL contains XSS injection attempt');\n        }\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzPzM5MzQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLHFEQUFZO0FBQ2hDLGlCQUFpQixtQkFBTyxDQUFDLG9FQUFjOztBQUV2QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgaXNWYWxpZFhzcyA9IHJlcXVpcmUoJy4vaXNWYWxpZFhzcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChpc1ZhbGlkWHNzKHVybCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VSTCBjb250YWlucyBYU1MgaW5qZWN0aW9uIGF0dGVtcHQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/isURLSameOrigin.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isValidXss.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isValidXss.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function isValidXss(requestURL) {\n  var xssRegex = /(\\b)(on\\w+)=|javascript|(<\\s*)(\\/*)script/gi;\n  return xssRegex.test(requestURL);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNWYWxpZFhzcy5qcz82ZGMwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVmFsaWRYc3MuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNWYWxpZFhzcyhyZXF1ZXN0VVJMKSB7XG4gIHZhciB4c3NSZWdleCA9IC8oXFxiKShvblxcdyspPXxqYXZhc2NyaXB0fCg8XFxzKikoXFwvKilzY3JpcHQvZ2k7XG4gIHJldHVybiB4c3NSZWdleC50ZXN0KHJlcXVlc3RVUkwpO1xufTtcblxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/isValidXss.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"./node_modules/axios/lib/utils.js\");\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcz9jOGFmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxtREFBVTs7QUFFOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/normalizeHeaderName.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzP2MzNDUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLHFEQUFZOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLGVBQWU7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/parseHeaders.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzPzBkZjYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/spread.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar bind = __webpack_require__(/*! ./helpers/bind */ \"./node_modules/axios/lib/helpers/bind.js\");\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = merge(result[key], val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Function equal to merge with the difference being that no reference\n * to original objects is kept.\n *\n * @see merge\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction deepMerge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = deepMerge(result[key], val);\n    } else if (typeof val === 'object') {\n      result[key] = deepMerge({}, val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  deepMerge: deepMerge,\n  extend: extend,\n  trim: trim\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/utils.js\n");

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v3.4.1\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2019-05-01T21:04Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif (  true && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar document = window.document;\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\nvar isFunction = function isFunction( obj ) {\n\n      // Support: Chrome <=57, Firefox <=52\n      // In some browsers, typeof returns \"function\" for HTML <object> elements\n      // (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n      // We don't want to classify *any* DOM node as a function.\n      return typeof obj === \"function\" && typeof obj.nodeType !== \"number\";\n  };\n\n\nvar isWindow = function isWindow( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t};\n\n\n\n\n\tvar preservedScriptAttributes = {\n\t\ttype: true,\n\t\tsrc: true,\n\t\tnonce: true,\n\t\tnoModule: true\n\t};\n\n\tfunction DOMEval( code, node, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar i, val,\n\t\t\tscript = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tif ( node ) {\n\t\t\tfor ( i in preservedScriptAttributes ) {\n\n\t\t\t\t// Support: Firefox 64+, Edge 18+\n\t\t\t\t// Some browsers don't support the \"nonce\" property on scripts.\n\t\t\t\t// On the other hand, just using `getAttribute` is not enough as\n\t\t\t\t// the `nonce` attribute is reset to an empty string whenever it\n\t\t\t\t// becomes browsing-context connected.\n\t\t\t\t// See https://github.com/whatwg/html/issues/2369\n\t\t\t\t// See https://html.spec.whatwg.org/#nonce-attributes\n\t\t\t\t// The `node.getAttribute` check was added for the sake of\n\t\t\t\t// `jQuery.globalEval` so that it can fake a nonce-containing node\n\t\t\t\t// via an object.\n\t\t\t\tval = node[ i ] || node.getAttribute && node.getAttribute( i );\n\t\t\t\tif ( val ) {\n\t\t\t\t\tscript.setAttribute( i, val );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\t// Support: Android <=2.3 only (functionish RegExp)\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.4.1\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android <=4.0 only\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent Object.prototype pollution\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( name === \"__proto__\" || target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\t\t\t\t\tsrc = target[ name ];\n\n\t\t\t\t\t// Ensure proper type for the source value\n\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n\t\t\t\t\t\tclone = {};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src;\n\t\t\t\t\t}\n\t\t\t\t\tcopyIsArray = false;\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a global context\n\tglobalEval: function( code, options ) {\n\t\tDOMEval( code, { nonce: options && options.nonce } );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android <=4.0 only\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.4\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://js.foundation/\n *\n * Date: 2019-04-08\n */\n(function( window ) {\n\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tnonnativeSelectorCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ({}).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpush_native = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[i] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n\t\t\"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n\trdescend = new RegExp( whitespace + \"|>\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trhtml = /HTML$/i,\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n\tfunescape = function( _, escaped, escapedWhitespace ) {\n\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t// NaN means non-codepoint\n\t\t// Support: Firefox<24\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\treturn high !== high || escapedWhitespace ?\n\t\t\tescaped :\n\t\t\thigh < 0 ?\n\t\t\t\t// BMP codepoint\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tinDisabledFieldset = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && elem.nodeName.toLowerCase() === \"fieldset\";\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t(arr = slice.call( preferredDoc.childNodes )),\n\t\tpreferredDoc.childNodes\n\t);\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpush_native.apply( target, slice.call(els) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\n\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n\t\t\tsetDocument( context );\n\t\t}\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( (m = match[1]) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[2] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!nonnativeSelectorCache[ selector + \" \" ] &&\n\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) &&\n\n\t\t\t\t// Support: IE 8 only\n\t\t\t\t// Exclude object elements\n\t\t\t\t(nodeType !== 1 || context.nodeName.toLowerCase() !== \"object\") ) {\n\n\t\t\t\tnewSelector = selector;\n\t\t\t\tnewContext = context;\n\n\t\t\t\t// qSA considers elements outside a scoping root when evaluating child or\n\t\t\t\t// descendant combinators, which is not what we want.\n\t\t\t\t// In such cases, we work around the behavior by prefixing every selector in the\n\t\t\t\t// list with an ID selector referencing the scope context.\n\t\t\t\t// Thanks to Andrew Dupont for this technique.\n\t\t\t\tif ( nodeType === 1 && rdescend.test( selector ) ) {\n\n\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\tif ( (nid = context.getAttribute( \"id\" )) ) {\n\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.setAttribute( \"id\", (nid = expando) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[i] = \"#\" + nid + \" \" + toSelector( groups[i] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t);\n\t\t\t\t\treturn results;\n\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\tnonnativeSelectorCache( selector, true );\n\t\t\t\t} finally {\n\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn (cache[ key + \" \" ] = value);\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement(\"fieldset\");\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split(\"|\"),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[i] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( (cur = cur.nextSibling) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\t\tinDisabledFieldset( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction(function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction(function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\tvar namespace = elem.namespaceURI,\n\t\tdocElem = (elem.ownerDocument || elem).documentElement;\n\n\t// Support: IE <=8\n\t// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes\n\t// https://bugs.jquery.com/ticket/4833\n\treturn !rhtml.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9-11, Edge\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\tif ( preferredDoc !== document &&\n\t\t(subWindow = document.defaultView) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert(function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute(\"className\");\n\t});\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert(function( el ) {\n\t\tel.appendChild( document.createComment(\"\") );\n\t\treturn !el.getElementsByTagName(\"*\").length;\n\t});\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert(function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t});\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[\"ID\"] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[\"ID\"] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode(\"id\");\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( (elem = elems[i++]) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( (elem = results[i++]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert(function( el ) {\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll(\"[msallowcapture^='']\").length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll(\"[selected]\").length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll(\":checked\").length ) {\n\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t}\n\t\t});\n\n\t\tassert(function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement(\"input\");\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll(\"[name=d]\").length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll(\":enabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll(\":disabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll(\"*,:x\");\n\t\t\trbuggyQSA.push(\",.*:\");\n\t\t});\n\t}\n\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector) )) ) {\n\n\t\tassert(function( el ) {\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t});\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t));\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( (b = b.parentNode) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\t\t\treturn a === document ? -1 :\n\t\t\t\tb === document ? 1 :\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[i] === bp[i] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\tap[i] === preferredDoc ? -1 :\n\t\t\tbp[i] === preferredDoc ? 1 :\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!nonnativeSelectorCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tnonnativeSelectorCache( expr, true );\n\t\t}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\t// Set document vars if needed\n\tif ( ( context.ownerDocument || context ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn (sel + \"\").replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( (elem = results[i++]) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[2] === \"~=\" ) {\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[3] ) {\n\t\t\t\t\tSizzle.error( match[0] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[3] ) {\n\t\t\t\tSizzle.error( match[0] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[6] && match[2];\n\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[3] ) {\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() { return true; } :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n\t\t\t\t});\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction(function( selector ) {\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}) :\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[0] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t}),\n\n\t\t\"has\": markFunction(function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t}),\n\n\t\t\"contains\": markFunction(function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t}),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo(function() {\n\t\t\treturn [ 0 ];\n\t\t}),\n\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t}),\n\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t}),\n\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ?\n\t\t\t\targument + length :\n\t\t\t\targument > length ?\n\t\t\t\t\tlength :\n\t\t\t\t\targument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t})\n\t}\n};\n\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n\t\t\tif ( match ) {\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( (tokens = []) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push({\n\t\t\t\tvalue: matched,\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\n\t\t\t});\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t});\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[i].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( (oldCache = uniqueCache[ key ]) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[i], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (elem = unmatched[i]) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction(function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( (elem = temp[i]) ) {\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t(checkContext = context).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\t\t\t\toutermostContext = context === document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[i] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[0] = match[0].slice( 0 );\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {\n\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[i];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( (find = Expr.find[ type ]) ) {\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( (seed = find(\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n\t\t\t\t)) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( el ) {\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement(\"fieldset\") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute(\"href\") === \"#\" ;\n}) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert(function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n}) ) {\n\taddHandle( \"value\", function( elem, name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( el ) {\n\treturn el.getAttribute(\"disabled\") == null;\n}) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\tnull;\n\t\t}\n\t});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\n\n\nfunction nodeName( elem, name ) {\n\n  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n};\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\tif ( typeof elem.contentDocument !== \"undefined\" ) {\n\t\t\treturn elem.contentDocument;\n\t\t}\n\n\t\t// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n\t\t// Treat the template element as a regular one in browsers that\n\t\t// don't support it.\n\t\tif ( nodeName( elem, \"template\" ) ) {\n\t\t\telem = elem.content || elem;\n\t\t}\n\n\t\treturn jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// rejected_handlers.disable\n\t\t\t\t\t// fulfilled_handlers.disable\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n\n\t\t\t\t\t// progress_handlers.lock\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the master Deferred\n\t\t\tmaster = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tmaster.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( master.state() === \"pending\" ||\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn master.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), master.reject );\n\t\t}\n\n\t\treturn master.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( toType( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\tvalue :\n\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\n\n\n// Matches dashed string for camelizing\nvar rmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g;\n\n// Used by camelCase as callback to replace()\nfunction fcamelCase( all, letter ) {\n\treturn letter.toUpperCase();\n}\n\n// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (#9572)\nfunction camelCase( string ) {\n\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n}\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar documentElement = document.documentElement;\n\n\n\n\tvar isAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem );\n\t\t},\n\t\tcomposed = { composed: true };\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n\t// Check attachment across shadow DOM boundaries when possible (gh-3504)\n\t// Support: iOS 10.0-10.2 only\n\t// Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n\t// leading to errors. We need to check for `getRootNode`.\n\tif ( documentElement.getRootNode ) {\n\t\tisAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem ) ||\n\t\t\t\telem.getRootNode( composed ) === elem.ownerDocument;\n\t\t};\n\t}\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tisAttached( elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\nvar swap = function( elem, options, callback, args ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.apply( elem, args || [] );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted, scale,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = elem.nodeType &&\n\t\t\t( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Support: Firefox <=54\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n\t\tinitial = initial / 2;\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\twhile ( maxIterations-- ) {\n\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n\t\t\t\tmaxIterations = 0;\n\t\t\t}\n\t\t\tinitialInUnit = initialInUnit / scale;\n\n\t\t}\n\n\t\tinitialInUnit = initialInUnit * 2;\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i );\n\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// Support: IE <=9 only\n\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\n// Support: IE <=9 only\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, attached, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( toType( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tattached = isAttached( elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( attached ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n} )();\n\n\nvar\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 - 11+\n// focus() and blur() are asynchronous, except when they are no-op.\n// So expect focus to be synchronous when the element is already active,\n// and blur to be synchronous when the element is not already active.\n// (focus and blur are always synchronous in other supported browsers,\n// this just defines when we can count on it).\nfunction expectSync( elem, type ) {\n\treturn ( elem === safeActiveElement() ) === ( type === \"focus\" );\n}\n\n// Support: IE <=9 only\n// Accessing document.activeElement can throw unexpectedly\n// https://bugs.jquery.com/ticket/13393\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\tif ( !elemData ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = {};\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\t// Make a writable jQuery.Event from the native event object\n\t\tvar event = jQuery.event.fix( nativeEvent );\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\t\t\thandlers = ( dataPriv.get( this, \"events\" ) || {} )[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// If the event is namespaced, then each handler is only invoked if it is\n\t\t\t\t// specially universal or its namespaces are a superset of the event's.\n\t\t\t\tif ( !event.rnamespace || handleObj.namespace === false ||\n\t\t\t\t\tevent.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tclick: {\n\n\t\t\t// Utilize native event to ensure correct state for checkable inputs\n\t\t\tsetup: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Claim the first handler\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\t// dataPriv.set( el, \"click\", ... )\n\t\t\t\t\tleverageNative( el, \"click\", returnTrue );\n\t\t\t\t}\n\n\t\t\t\t// Return false to allow normal processing in the caller\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\ttrigger: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Force setup before triggering a click\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\tleverageNative( el, \"click\" );\n\t\t\t\t}\n\n\t\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, suppress native .click() on links\n\t\t\t// Also prevent it if we're currently inside a leveraged native-event stack\n\t\t\t_default: function( event ) {\n\t\t\t\tvar target = event.target;\n\t\t\t\treturn rcheckableType.test( target.type ) &&\n\t\t\t\t\ttarget.click && nodeName( target, \"input\" ) &&\n\t\t\t\t\tdataPriv.get( target, \"click\" ) ||\n\t\t\t\t\tnodeName( target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Ensure the presence of an event listener that handles manually-triggered\n// synthetic events by interrupting progress until reinvoked in response to\n// *native* events that it fires directly, ensuring that state changes have\n// already occurred before other listeners are invoked.\nfunction leverageNative( el, type, expectSync ) {\n\n\t// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\n\tif ( !expectSync ) {\n\t\tif ( dataPriv.get( el, type ) === undefined ) {\n\t\t\tjQuery.event.add( el, type, returnTrue );\n\t\t}\n\t\treturn;\n\t}\n\n\t// Register the controller as a special universal handler for all event namespaces\n\tdataPriv.set( el, type, false );\n\tjQuery.event.add( el, type, {\n\t\tnamespace: false,\n\t\thandler: function( event ) {\n\t\t\tvar notAsync, result,\n\t\t\t\tsaved = dataPriv.get( this, type );\n\n\t\t\tif ( ( event.isTrigger & 1 ) && this[ type ] ) {\n\n\t\t\t\t// Interrupt processing of the outer synthetic .trigger()ed event\n\t\t\t\t// Saved data should be false in such cases, but might be a leftover capture object\n\t\t\t\t// from an async native handler (gh-4350)\n\t\t\t\tif ( !saved.length ) {\n\n\t\t\t\t\t// Store arguments for use when handling the inner native event\n\t\t\t\t\t// There will always be at least one argument (an event object), so this array\n\t\t\t\t\t// will not be confused with a leftover capture object.\n\t\t\t\t\tsaved = slice.call( arguments );\n\t\t\t\t\tdataPriv.set( this, type, saved );\n\n\t\t\t\t\t// Trigger the native event and capture its result\n\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t// focus() and blur() are asynchronous\n\t\t\t\t\tnotAsync = expectSync( this, type );\n\t\t\t\t\tthis[ type ]();\n\t\t\t\t\tresult = dataPriv.get( this, type );\n\t\t\t\t\tif ( saved !== result || notAsync ) {\n\t\t\t\t\t\tdataPriv.set( this, type, false );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = {};\n\t\t\t\t\t}\n\t\t\t\t\tif ( saved !== result ) {\n\n\t\t\t\t\t\t// Cancel the outer synthetic event\n\t\t\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\treturn result.value;\n\t\t\t\t\t}\n\n\t\t\t\t// If this is an inner synthetic event for an event with a bubbling surrogate\n\t\t\t\t// (focus or blur), assume that the surrogate already propagated from triggering the\n\t\t\t\t// native event and prevent that from happening again here.\n\t\t\t\t// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n\t\t\t\t// bubbling surrogate propagates *after* the non-bubbling base), but that seems\n\t\t\t\t// less bad than duplication.\n\t\t\t\t} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\n\t\t\t// If this is a native event triggered above, everything is now in order\n\t\t\t// Fire an inner synthetic event with the original arguments\n\t\t\t} else if ( saved.length ) {\n\n\t\t\t\t// ...and capture the result\n\t\t\t\tdataPriv.set( this, type, {\n\t\t\t\t\tvalue: jQuery.event.trigger(\n\n\t\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t\t// Extend with the prototype to reset the above stopImmediatePropagation()\n\t\t\t\t\t\tjQuery.extend( saved[ 0 ], jQuery.Event.prototype ),\n\t\t\t\t\t\tsaved.slice( 1 ),\n\t\t\t\t\t\tthis\n\t\t\t\t\t)\n\t\t\t\t} );\n\n\t\t\t\t// Abort handling of the native event\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t}\n\t\t}\n\t} );\n}\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (#504, #13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || Date.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcode: true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\n\twhich: function( event ) {\n\t\tvar button = event.button;\n\n\t\t// Add which for key events\n\t\tif ( event.which == null && rkeyEvent.test( event.type ) ) {\n\t\t\treturn event.charCode != null ? event.charCode : event.keyCode;\n\t\t}\n\n\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\tif ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {\n\t\t\tif ( button & 1 ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ( button & 2 ) {\n\t\t\t\treturn 3;\n\t\t\t}\n\n\t\t\tif ( button & 4 ) {\n\t\t\t\treturn 2;\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn event.which;\n\t}\n}, jQuery.event.addProp );\n\njQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( type, delegateType ) {\n\tjQuery.event.special[ type ] = {\n\n\t\t// Utilize native event if possible so blur/focus sequence is correct\n\t\tsetup: function() {\n\n\t\t\t// Claim the first handler\n\t\t\t// dataPriv.set( this, \"focus\", ... )\n\t\t\t// dataPriv.set( this, \"blur\", ... )\n\t\t\tleverageNative( this, type, expectSync );\n\n\t\t\t// Return false to allow normal processing in the caller\n\t\t\treturn false;\n\t\t},\n\t\ttrigger: function() {\n\n\t\t\t// Force setup before trigger\n\t\t\tleverageNative( this, type );\n\n\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\treturn true;\n\t\t},\n\n\t\tdelegateType: delegateType\n\t};\n} );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t/* eslint-disable max-len */\n\n\t// See https://github.com/eslint/eslint/issues/3229\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n\n\t/* eslint-enable */\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.access( src );\n\t\tpdataCur = dataPriv.set( dest, pdataOld );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdelete pdataCur.handle;\n\t\t\tpdataCur.events = {};\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = concat.apply( [], args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl && !node.noModule ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src, {\n\t\t\t\t\t\t\t\t\tnonce: node.nonce || node.getAttribute( \"nonce\" )\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), node, doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && isAttached( node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = isAttached( elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\n\t\t\t\"margin-top:1px;padding:0;border:0\";\n\t\tdiv.style.cssText =\n\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"width:60%;top:1%\";\n\t\tdocumentElement.appendChild( container ).appendChild( div );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.right = \"60%\";\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n\n\t\t// Support: IE 9 - 11 only\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n\n\t\t// Support: IE 9 only\n\t\t// Detect overflow:scroll screwiness (gh-3699)\n\t\t// Support: Chrome <=64\n\t\t// Don't get tricked when zoom affects offsetWidth (gh-4029)\n\t\tdiv.style.position = \"absolute\";\n\t\tscrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tfunction roundPixelMeasures( measure ) {\n\t\treturn Math.round( parseFloat( measure ) );\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n\t\treliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tjQuery.extend( support, {\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelBoxStyles: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelBoxStylesVal;\n\t\t},\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\tscrollboxSize: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn scrollboxSizeVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, #12537)\n\t//   .css('--customProperty) (#3144)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( ret === \"\" && !isAttached( elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar cssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style,\n\tvendorProps = {};\n\n// Return a vendor-prefixed property or undefined\nfunction vendorPropName( name ) {\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a potentially-mapped jQuery.cssProps or vendor prefixed property\nfunction finalPropName( name ) {\n\tvar final = jQuery.cssProps[ name ] || vendorProps[ name ];\n\n\tif ( final ) {\n\t\treturn final;\n\t}\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\treturn vendorProps[ name ] = vendorPropName( name ) || name;\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\trcustomProp = /^--/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t};\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n\tvar i = dimension === \"width\" ? 1 : 0,\n\t\textra = 0,\n\t\tdelta = 0;\n\n\t// Adjustment may not be necessary\n\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\treturn 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin\n\t\tif ( box === \"margin\" ) {\n\t\t\tdelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\t\tif ( !isBorderBox ) {\n\n\t\t\t// Add padding\n\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// For \"border\" or \"margin\", add border\n\t\t\tif ( box !== \"padding\" ) {\n\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\n\t\t\t// But still keep track of it otherwise\n\t\t\t} else {\n\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\n\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n\t\t// \"padding\" or \"margin\"\n\t\t} else {\n\n\t\t\t// For \"content\", subtract padding\n\t\t\tif ( box === \"content\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// For \"content\" or \"padding\", subtract border\n\t\t\tif ( box !== \"margin\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\n\tif ( !isBorderBox && computedVal >= 0 ) {\n\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\n\t\tdelta += Math.max( 0, Math.ceil(\n\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\tcomputedVal -\n\t\t\tdelta -\n\t\t\textra -\n\t\t\t0.5\n\n\t\t// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\n\t\t// Use an explicit zero to avoid NaN (gh-3964)\n\t\t) ) || 0;\n\t}\n\n\treturn delta;\n}\n\nfunction getWidthOrHeight( elem, dimension, extra ) {\n\n\t// Start with computed style\n\tvar styles = getStyles( elem ),\n\n\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n\t\t// Fake content-box until we know it's needed to know the true value.\n\t\tboxSizingNeeded = !support.boxSizingReliable() || extra,\n\t\tisBorderBox = boxSizingNeeded &&\n\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\tvalueIsBorderBox = isBorderBox,\n\n\t\tval = curCSS( elem, dimension, styles ),\n\t\toffsetProp = \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );\n\n\t// Support: Firefox <=54\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n\tif ( rnumnonpx.test( val ) ) {\n\t\tif ( !extra ) {\n\t\t\treturn val;\n\t\t}\n\t\tval = \"auto\";\n\t}\n\n\n\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n\t// This happens for inline elements with no explicit setting (gh-3571)\n\t// Support: Android <=4.1 - 4.3 only\n\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n\t// Support: IE 9-11 only\n\t// Also use offsetWidth/offsetHeight for when box sizing is unreliable\n\t// We use getClientRects() to check for hidden/disconnected.\n\t// In those cases, the computed value can be trusted to be border-box\n\tif ( ( !support.boxSizingReliable() && isBorderBox ||\n\t\tval === \"auto\" ||\n\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) &&\n\t\telem.getClientRects().length ) {\n\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t\t// Where available, offsetWidth/offsetHeight approximate border box dimensions.\n\t\t// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n\t\t// retrieved value as a content box dimension.\n\t\tvalueIsBorderBox = offsetProp in elem;\n\t\tif ( valueIsBorderBox ) {\n\t\t\tval = elem[ offsetProp ];\n\t\t}\n\t}\n\n\t// Normalize \"\" and auto\n\tval = parseFloat( val ) || 0;\n\n\t// Adjust for the element's box model\n\treturn ( val +\n\t\tboxModelAdjustment(\n\t\t\telem,\n\t\t\tdimension,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles,\n\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n\t\t\tval\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"gridArea\": true,\n\t\t\"gridColumn\": true,\n\t\t\"gridColumnEnd\": true,\n\t\t\"gridColumnStart\": true,\n\t\t\"gridRow\": true,\n\t\t\"gridRowEnd\": true,\n\t\t\"gridRowStart\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\t// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n\t\t\t// \"px\" to a few hardcoded values.\n\t\t\tif ( type === \"number\" && !isCustomProp ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( i, dimension ) {\n\tjQuery.cssHooks[ dimension ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = getStyles( elem ),\n\n\t\t\t\t// Only read styles.position if the test has a chance to fail\n\t\t\t\t// to avoid forcing a reflow.\n\t\t\t\tscrollboxSizeBuggy = !support.scrollboxSize() &&\n\t\t\t\t\tstyles.position === \"absolute\",\n\n\t\t\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n\t\t\t\tboxSizingNeeded = scrollboxSizeBuggy || extra,\n\t\t\t\tisBorderBox = boxSizingNeeded &&\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\tsubtract = extra ?\n\t\t\t\t\tboxModelAdjustment(\n\t\t\t\t\t\telem,\n\t\t\t\t\t\tdimension,\n\t\t\t\t\t\textra,\n\t\t\t\t\t\tisBorderBox,\n\t\t\t\t\t\tstyles\n\t\t\t\t\t) :\n\t\t\t\t\t0;\n\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n\t\t\t// faking a content-box to get border and padding (gh-3699)\n\t\t\tif ( isBorderBox && scrollboxSizeBuggy ) {\n\t\t\t\tsubtract -= Math.ceil(\n\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\n\t\t\t\t\t0.5\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ dimension ] = value;\n\t\t\t\tvalue = jQuery.css( elem, dimension );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( prefix !== \"margin\" ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 && (\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ||\n\t\t\t\t\ttween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = Date.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n\t\t// the overflowX value there.\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tresult.stop.bind( result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tisFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue && type !== false ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = Date.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value,\n\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\n\n\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( isValidValue ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = classesToArray( value );\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\tstopPropagationCallback = function( e ) {\n\t\te.stopPropagation();\n\t};\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = lastElement = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tlastElement = cur;\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || {} )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\telem[ type ]();\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = Date.now();\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && toType( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\tif ( a == null ) {\n\t\treturn \"\";\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} )\n\t\t.filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} )\n\t\t.map( function( i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\toriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() + \" \" ] =\n\t\t\t\t\t\t\t\t\t( responseHeaders[ match[ 1 ].toLowerCase() + \" \" ] || [] )\n\t\t\t\t\t\t\t\t\t\t.concat( match[ 2 ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() + \" \" ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match.join( \", \" );\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available and should be processed, append data to url\n\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce++ ) + uncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\n\njQuery._evalUrl = function( url, options ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\n\t\t// Only evaluate the response if it is successful (gh-4126)\n\t\t// dataFilter is not invoked for failure responses, so using it instead\n\t\t// of the default converter is kludgy but it works.\n\t\tconverters: {\n\t\t\t\"text script\": function() {}\n\t\t},\n\t\tdataFilter: function( response ) {\n\t\t\tjQuery.globalEval( response, options );\n\t\t}\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar htmlIsFunction = isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain or forced-by-attrs requests\n\tif ( s.crossDomain || s.scriptAttrs ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" )\n\t\t\t\t\t.attr( s.scriptAttrs || {} )\n\t\t\t\t\t.prop( { charset: s.scriptCharset, src: s.url } )\n\t\t\t\t\t.on( \"load error\", callback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\n\t// offset() relates an element's border box to the document origin\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\t\trect = elem.getBoundingClientRect();\n\t\twin = elem.ownerDocument.defaultView;\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset,\n\t\t\tleft: rect.left + win.pageXOffset\n\t\t};\n\t},\n\n\t// position() relates an element's margin box to its offset parent's padding box\n\t// This corresponds to the behavior of CSS absolute positioning\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset, doc,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\toffset = this.offset();\n\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n\t\t\t// when a statically positioned element is identified\n\t\t\tdoc = elem.ownerDocument;\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n\t\t\twhile ( offsetParent &&\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\n\t\t\t\toffsetParent = offsetParent.parentNode;\n\t\t\t}\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\n\t\t\t}\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n\t\tfunction( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.each( ( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( i, name ) {\n\n\t// Handle event binding\n\tjQuery.fn[ name ] = function( data, fn ) {\n\t\treturn arguments.length > 0 ?\n\t\t\tthis.on( name, null, data, fn ) :\n\t\t\tthis.trigger( name );\n\t};\n} );\n\njQuery.fn.extend( {\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\n\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t}\n} );\n\n// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy = function( fn, context ) {\n\tvar tmp, args, proxy;\n\n\tif ( typeof context === \"string\" ) {\n\t\ttmp = fn[ context ];\n\t\tcontext = fn;\n\t\tfn = tmp;\n\t}\n\n\t// Quick check to determine if target is callable, in the spec\n\t// this throws a TypeError, but we will just return undefined.\n\tif ( !isFunction( fn ) ) {\n\t\treturn undefined;\n\t}\n\n\t// Simulated bind\n\targs = slice.call( arguments, 2 );\n\tproxy = function() {\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t};\n\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\treturn proxy;\n};\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\njQuery.isFunction = isFunction;\njQuery.isWindow = isWindow;\njQuery.camelCase = camelCase;\njQuery.type = toType;\n\njQuery.now = Date.now;\n\njQuery.isNumeric = function( obj ) {\n\n\t// As of jQuery 3.0, isNumeric is limited to\n\t// strings and numbers (primitives or objects)\n\t// that can be coerced to finite numbers (gh-2662)\n\tvar type = jQuery.type( obj );\n\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t!isNaN( obj - parseFloat( obj ) );\n};\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\treturn jQuery;\n\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery/dist/jquery.js\n");

/***/ }),

/***/ "./node_modules/powerbi-client/dist/powerbi.js":
/*!*****************************************************!*\
  !*** ./node_modules/powerbi-client/dist/powerbi.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*! powerbi-client v2.8.0 | (c) 2016 Microsoft Corporation MIT */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar service = __webpack_require__(1);\r\n\texports.service = service;\r\n\tvar factories = __webpack_require__(16);\r\n\texports.factories = factories;\r\n\tvar models = __webpack_require__(4);\r\n\texports.models = models;\r\n\tvar report_1 = __webpack_require__(5);\r\n\texports.Report = report_1.Report;\r\n\tvar dashboard_1 = __webpack_require__(12);\r\n\texports.Dashboard = dashboard_1.Dashboard;\r\n\tvar tile_1 = __webpack_require__(13);\r\n\texports.Tile = tile_1.Tile;\r\n\tvar embed_1 = __webpack_require__(2);\r\n\texports.Embed = embed_1.Embed;\r\n\tvar page_1 = __webpack_require__(7);\r\n\texports.Page = page_1.Page;\r\n\tvar qna_1 = __webpack_require__(14);\r\n\texports.Qna = qna_1.Qna;\r\n\tvar visual_1 = __webpack_require__(15);\r\n\texports.Visual = visual_1.Visual;\r\n\tvar visualDescriptor_1 = __webpack_require__(8);\r\n\texports.VisualDescriptor = visualDescriptor_1.VisualDescriptor;\r\n\t/**\r\n\t * Makes Power BI available to the global object for use in applications that don't have module loading support.\r\n\t *\r\n\t * Note: create an instance of the class with the default configuration for normal usage, or save the class so that you can create an instance of the service.\r\n\t */\r\n\tvar powerbi = new service.Service(factories.hpmFactory, factories.wpmpFactory, factories.routerFactory);\r\n\twindow.powerbi = powerbi;\r\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar embed = __webpack_require__(2);\r\n\tvar report_1 = __webpack_require__(5);\r\n\tvar create_1 = __webpack_require__(11);\r\n\tvar dashboard_1 = __webpack_require__(12);\r\n\tvar tile_1 = __webpack_require__(13);\r\n\tvar page_1 = __webpack_require__(7);\r\n\tvar qna_1 = __webpack_require__(14);\r\n\tvar visual_1 = __webpack_require__(15);\r\n\tvar utils = __webpack_require__(3);\r\n\t/**\r\n\t * The Power BI Service embed component, which is the entry point to embed all other Power BI components into your application\r\n\t *\r\n\t * @export\r\n\t * @class Service\r\n\t * @implements {IService}\r\n\t */\r\n\tvar Service = (function () {\r\n\t    /**\r\n\t     * Creates an instance of a Power BI Service.\r\n\t     *\r\n\t     * @param {IHpmFactory} hpmFactory The http post message factory used in the postMessage communication layer\r\n\t     * @param {IWpmpFactory} wpmpFactory The window post message factory used in the postMessage communication layer\r\n\t     * @param {IRouterFactory} routerFactory The router factory used in the postMessage communication layer\r\n\t     * @param {IServiceConfiguration} [config={}]\r\n\t     */\r\n\t    function Service(hpmFactory, wpmpFactory, routerFactory, config) {\r\n\t        var _this = this;\r\n\t        if (config === void 0) { config = {}; }\r\n\t        this.wpmp = wpmpFactory(config.wpmpName, config.logMessages);\r\n\t        this.hpm = hpmFactory(this.wpmp, null, config.version, config.type);\r\n\t        this.router = routerFactory(this.wpmp);\r\n\t        this.uniqueSessionId = utils.generateUUID();\r\n\t        /**\r\n\t         * Adds handler for report events.\r\n\t         */\r\n\t        this.router.post(\"/reports/:uniqueId/events/:eventName\", function (req, res) {\r\n\t            var event = {\r\n\t                type: 'report',\r\n\t                id: req.params.uniqueId,\r\n\t                name: req.params.eventName,\r\n\t                value: req.body\r\n\t            };\r\n\t            _this.handleEvent(event);\r\n\t        });\r\n\t        this.router.post(\"/reports/:uniqueId/pages/:pageName/events/:eventName\", function (req, res) {\r\n\t            var event = {\r\n\t                type: 'report',\r\n\t                id: req.params.uniqueId,\r\n\t                name: req.params.eventName,\r\n\t                value: req.body\r\n\t            };\r\n\t            _this.handleEvent(event);\r\n\t        });\r\n\t        this.router.post(\"/reports/:uniqueId/pages/:pageName/visuals/:visualName/events/:eventName\", function (req, res) {\r\n\t            var event = {\r\n\t                type: 'report',\r\n\t                id: req.params.uniqueId,\r\n\t                name: req.params.eventName,\r\n\t                value: req.body\r\n\t            };\r\n\t            _this.handleEvent(event);\r\n\t        });\r\n\t        this.router.post(\"/dashboards/:uniqueId/events/:eventName\", function (req, res) {\r\n\t            var event = {\r\n\t                type: 'dashboard',\r\n\t                id: req.params.uniqueId,\r\n\t                name: req.params.eventName,\r\n\t                value: req.body\r\n\t            };\r\n\t            _this.handleEvent(event);\r\n\t        });\r\n\t        this.router.post(\"/tile/:uniqueId/events/:eventName\", function (req, res) {\r\n\t            var event = {\r\n\t                type: 'tile',\r\n\t                id: req.params.uniqueId,\r\n\t                name: req.params.eventName,\r\n\t                value: req.body\r\n\t            };\r\n\t            _this.handleEvent(event);\r\n\t        });\r\n\t        /**\r\n\t         * Adds handler for Q&A events.\r\n\t         */\r\n\t        this.router.post(\"/qna/:uniqueId/events/:eventName\", function (req, res) {\r\n\t            var event = {\r\n\t                type: 'qna',\r\n\t                id: req.params.uniqueId,\r\n\t                name: req.params.eventName,\r\n\t                value: req.body\r\n\t            };\r\n\t            _this.handleEvent(event);\r\n\t        });\r\n\t        /**\r\n\t         * Adds handler for front load 'ready' message.\r\n\t         */\r\n\t        this.router.post(\"/ready/:uniqueId\", function (req, res) {\r\n\t            var event = {\r\n\t                type: 'report',\r\n\t                id: req.params.uniqueId,\r\n\t                name: 'ready',\r\n\t                value: req.body\r\n\t            };\r\n\t            _this.handleEvent(event);\r\n\t        });\r\n\t        this.embeds = [];\r\n\t        // TODO: Change when Object.assign is available.\r\n\t        this.config = utils.assign({}, Service.defaultConfig, config);\r\n\t        if (this.config.autoEmbedOnContentLoaded) {\r\n\t            this.enableAutoEmbed();\r\n\t        }\r\n\t    }\r\n\t    /**\r\n\t     * Creates new report\r\n\t     * @param {HTMLElement} element\r\n\t     * @param {embed.IEmbedConfiguration} [config={}]\r\n\t     * @returns {embed.Embed}\r\n\t     */\r\n\t    Service.prototype.createReport = function (element, config) {\r\n\t        config.type = 'create';\r\n\t        var powerBiElement = element;\r\n\t        var component = new create_1.Create(this, powerBiElement, config);\r\n\t        powerBiElement.powerBiEmbed = component;\r\n\t        this.addOrOverwriteEmbed(component, element);\r\n\t        return component;\r\n\t    };\r\n\t    /**\r\n\t     * TODO: Add a description here\r\n\t     *\r\n\t     * @param {HTMLElement} [container]\r\n\t     * @param {embed.IEmbedConfiguration} [config=undefined]\r\n\t     * @returns {embed.Embed[]}\r\n\t     */\r\n\t    Service.prototype.init = function (container, config) {\r\n\t        var _this = this;\r\n\t        if (config === void 0) { config = undefined; }\r\n\t        container = (container && container instanceof HTMLElement) ? container : document.body;\r\n\t        var elements = Array.prototype.slice.call(container.querySelectorAll(\"[\" + embed.Embed.embedUrlAttribute + \"]\"));\r\n\t        return elements.map(function (element) { return _this.embed(element, config); });\r\n\t    };\r\n\t    /**\r\n\t     * Given a configuration based on an HTML element,\r\n\t     * if the component has already been created and attached to the element, reuses the component instance and existing iframe,\r\n\t     * otherwise creates a new component instance.\r\n\t     *\r\n\t     * @param {HTMLElement} element\r\n\t     * @param {embed.IEmbedConfigurationBase} [config={}]\r\n\t     * @returns {embed.Embed}\r\n\t     */\r\n\t    Service.prototype.embed = function (element, config) {\r\n\t        if (config === void 0) { config = {}; }\r\n\t        return this.embedInternal(element, config);\r\n\t    };\r\n\t    /**\r\n\t     * Given a configuration based on an HTML element,\r\n\t     * if the component has already been created and attached to the element, reuses the component instance and existing iframe,\r\n\t     * otherwise creates a new component instance.\r\n\t     * This is used for the phased embedding API, once element is loaded successfully, one can call 'render' on it.\r\n\t     *\r\n\t     * @param {HTMLElement} element\r\n\t     * @param {embed.IEmbedConfigurationBase} [config={}]\r\n\t     * @returns {embed.Embed}\r\n\t     */\r\n\t    Service.prototype.load = function (element, config) {\r\n\t        if (config === void 0) { config = {}; }\r\n\t        return this.embedInternal(element, config, /* phasedRender */ true);\r\n\t    };\r\n\t    Service.prototype.embedInternal = function (element, config, phasedRender) {\r\n\t        if (config === void 0) { config = {}; }\r\n\t        var component;\r\n\t        var powerBiElement = element;\r\n\t        if (powerBiElement.powerBiEmbed) {\r\n\t            component = this.embedExisting(powerBiElement, config, phasedRender);\r\n\t        }\r\n\t        else {\r\n\t            component = this.embedNew(powerBiElement, config, phasedRender);\r\n\t        }\r\n\t        return component;\r\n\t    };\r\n\t    Service.prototype.getNumberOfComponents = function () {\r\n\t        if (!this.embeds) {\r\n\t            return 0;\r\n\t        }\r\n\t        return this.embeds.length;\r\n\t    };\r\n\t    Service.prototype.getSdkSessionId = function () {\r\n\t        return this.uniqueSessionId;\r\n\t    };\r\n\t    /**\r\n\t     * Given a configuration based on a Power BI element, saves the component instance that reference the element for later lookup.\r\n\t     *\r\n\t     * @private\r\n\t     * @param {IPowerBiElement} element\r\n\t     * @param {embed.IEmbedConfigurationBase} config\r\n\t     * @returns {embed.Embed}\r\n\t     */\r\n\t    Service.prototype.embedNew = function (element, config, phasedRender) {\r\n\t        var componentType = config.type || element.getAttribute(embed.Embed.typeAttribute);\r\n\t        if (!componentType) {\r\n\t            throw new Error(\"Attempted to embed using config \" + JSON.stringify(config) + \" on element \" + element.outerHTML + \", but could not determine what type of component to embed. You must specify a type in the configuration or as an attribute such as '\" + embed.Embed.typeAttribute + \"=\\\"\" + report_1.Report.type.toLowerCase() + \"\\\"'.\");\r\n\t        }\r\n\t        // Saves the type as part of the configuration so that it can be referenced later at a known location.\r\n\t        config.type = componentType;\r\n\t        var Component = utils.find(function (component) { return componentType === component.type.toLowerCase(); }, Service.components);\r\n\t        if (!Component) {\r\n\t            throw new Error(\"Attempted to embed component of type: \" + componentType + \" but did not find any matching component.  Please verify the type you specified is intended.\");\r\n\t        }\r\n\t        var component = new Component(this, element, config, phasedRender);\r\n\t        element.powerBiEmbed = component;\r\n\t        this.addOrOverwriteEmbed(component, element);\r\n\t        return component;\r\n\t    };\r\n\t    /**\r\n\t     * Given an element that already contains an embed component, load with a new configuration.\r\n\t     *\r\n\t     * @private\r\n\t     * @param {IPowerBiElement} element\r\n\t     * @param {embed.IEmbedConfigurationBase} config\r\n\t     * @returns {embed.Embed}\r\n\t     */\r\n\t    Service.prototype.embedExisting = function (element, config, phasedRender) {\r\n\t        var component = utils.find(function (x) { return x.element === element; }, this.embeds);\r\n\t        if (!component) {\r\n\t            throw new Error(\"Attempted to embed using config \" + JSON.stringify(config) + \" on element \" + element.outerHTML + \" which already has embedded comopnent associated, but could not find the existing comopnent in the list of active components. This could indicate the embeds list is out of sync with the DOM, or the component is referencing the incorrect HTML element.\");\r\n\t        }\r\n\t        // TODO: Multiple embedding to the same iframe is not supported in QnA\r\n\t        if (config.type && config.type.toLowerCase() === \"qna\") {\r\n\t            return this.embedNew(element, config);\r\n\t        }\r\n\t        /**\r\n\t         * TODO: Dynamic embed type switching could be supported but there is work needed to prepare the service state and DOM cleanup.\r\n\t         * remove all event handlers from the DOM, then reset the element to initial state which removes iframe, and removes from list of embeds\r\n\t         * then we can call the embedNew function which would allow setting the proper embedUrl and construction of object based on the new type.\r\n\t         */\r\n\t        if (typeof config.type === \"string\" && config.type !== component.config.type) {\r\n\t            /**\r\n\t             * When loading report after create we want to use existing Iframe to optimize load period\r\n\t             */\r\n\t            if (config.type === \"report\" && component.config.type === \"create\") {\r\n\t                var report = new report_1.Report(this, element, config, /* phasedRender */ false, element.powerBiEmbed.iframe);\r\n\t                report.load(config);\r\n\t                element.powerBiEmbed = report;\r\n\t                this.addOrOverwriteEmbed(component, element);\r\n\t                return report;\r\n\t            }\r\n\t            throw new Error(\"Embedding on an existing element with a different type than the previous embed object is not supported.  Attempted to embed using config \" + JSON.stringify(config) + \" on element \" + element.outerHTML + \", but the existing element contains an embed of type: \" + this.config.type + \" which does not match the new type: \" + config.type);\r\n\t        }\r\n\t        component.populateConfig(config);\r\n\t        component.load(config, phasedRender);\r\n\t        return component;\r\n\t    };\r\n\t    /**\r\n\t     * Adds an event handler for DOMContentLoaded, which searches the DOM for elements that have the 'powerbi-embed-url' attribute,\r\n\t     * and automatically attempts to embed a powerbi component based on information from other powerbi-* attributes.\r\n\t     *\r\n\t     * Note: Only runs if `config.autoEmbedOnContentLoaded` is true when the service is created.\r\n\t     * This handler is typically useful only for applications that are rendered on the server so that all required data is available when the handler is called.\r\n\t     */\r\n\t    Service.prototype.enableAutoEmbed = function () {\r\n\t        var _this = this;\r\n\t        window.addEventListener('DOMContentLoaded', function (event) { return _this.init(document.body); }, false);\r\n\t    };\r\n\t    /**\r\n\t     * Returns an instance of the component associated with the element.\r\n\t     *\r\n\t     * @param {HTMLElement} element\r\n\t     * @returns {(Report | Tile)}\r\n\t     */\r\n\t    Service.prototype.get = function (element) {\r\n\t        var powerBiElement = element;\r\n\t        if (!powerBiElement.powerBiEmbed) {\r\n\t            throw new Error(\"You attempted to get an instance of powerbi component associated with element: \" + element.outerHTML + \" but there was no associated instance.\");\r\n\t        }\r\n\t        return powerBiElement.powerBiEmbed;\r\n\t    };\r\n\t    /**\r\n\t     * Finds an embed instance by the name or unique ID that is provided.\r\n\t     *\r\n\t     * @param {string} uniqueId\r\n\t     * @returns {(Report | Tile)}\r\n\t     */\r\n\t    Service.prototype.find = function (uniqueId) {\r\n\t        return utils.find(function (x) { return x.config.uniqueId === uniqueId; }, this.embeds);\r\n\t    };\r\n\t    Service.prototype.addOrOverwriteEmbed = function (component, element) {\r\n\t        // remove embeds over the same div element.\r\n\t        this.embeds = this.embeds.filter(function (embed) {\r\n\t            return embed.element.id !== element.id;\r\n\t        });\r\n\t        this.embeds.push(component);\r\n\t    };\r\n\t    /**\r\n\t     * Given an HTML element that has a component embedded within it, removes the component from the list of embedded components, removes the association between the element and the component, and removes the iframe.\r\n\t     *\r\n\t     * @param {HTMLElement} element\r\n\t     * @returns {void}\r\n\t     */\r\n\t    Service.prototype.reset = function (element) {\r\n\t        var powerBiElement = element;\r\n\t        if (!powerBiElement.powerBiEmbed) {\r\n\t            return;\r\n\t        }\r\n\t        /** Removes the element frontLoad listener if exists. */\r\n\t        var embedElement = powerBiElement.powerBiEmbed;\r\n\t        if (embedElement.frontLoadHandler) {\r\n\t            embedElement.element.removeEventListener('ready', embedElement.frontLoadHandler, false);\r\n\t        }\r\n\t        /** Removes the component from an internal list of components. */\r\n\t        utils.remove(function (x) { return x === powerBiElement.powerBiEmbed; }, this.embeds);\r\n\t        /** Deletes a property from the HTML element. */\r\n\t        delete powerBiElement.powerBiEmbed;\r\n\t        /** Removes the iframe from the element. */\r\n\t        var iframe = element.querySelector('iframe');\r\n\t        if (iframe) {\r\n\t            if (iframe.remove !== undefined) {\r\n\t                iframe.remove();\r\n\t            }\r\n\t            else {\r\n\t                /** Workaround for IE: unhandled rejection TypeError: object doesn't support propert or method 'remove' */\r\n\t                iframe.parentElement.removeChild(iframe);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * handles tile events\r\n\t     *\r\n\t     * @param {IEvent<any>} event\r\n\t     */\r\n\t    Service.prototype.handleTileEvents = function (event) {\r\n\t        if (event.type === 'tile') {\r\n\t            this.handleEvent(event);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * Given an event object, finds the embed component with the matching type and ID, and invokes its handleEvent method with the event object.\r\n\t     *\r\n\t     * @private\r\n\t     * @param {IEvent<any>} event\r\n\t     */\r\n\t    Service.prototype.handleEvent = function (event) {\r\n\t        var embed = utils.find(function (embed) {\r\n\t            return (embed.config.uniqueId === event.id);\r\n\t        }, this.embeds);\r\n\t        if (embed) {\r\n\t            var value = event.value;\r\n\t            if (event.name === 'pageChanged') {\r\n\t                var pageKey = 'newPage';\r\n\t                var page = value[pageKey];\r\n\t                if (!page) {\r\n\t                    throw new Error(\"Page model not found at 'event.value.\" + pageKey + \"'.\");\r\n\t                }\r\n\t                value[pageKey] = new page_1.Page(embed, page.name, page.displayName, true /* isActive */);\r\n\t            }\r\n\t            utils.raiseCustomEvent(embed.element, event.name, value);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * API for warm starting powerbi embedded endpoints.\r\n\t     * Use this API to preload Power BI Embedded in the background.\r\n\t     *\r\n\t     * @public\r\n\t     * @param {embed.IEmbedConfigurationBase} [config={}]\r\n\t     * @param {HTMLElement} [element=undefined]\r\n\t     */\r\n\t    Service.prototype.preload = function (config, element) {\r\n\t        var iframeContent = document.createElement(\"iframe\");\r\n\t        iframeContent.setAttribute(\"style\", \"display:none;\");\r\n\t        iframeContent.setAttribute(\"src\", config.embedUrl);\r\n\t        iframeContent.setAttribute(\"scrolling\", \"no\");\r\n\t        iframeContent.setAttribute(\"allowfullscreen\", \"false\");\r\n\t        var node = element;\r\n\t        if (!node) {\r\n\t            node = document.getElementsByTagName(\"body\")[0];\r\n\t        }\r\n\t        node.appendChild(iframeContent);\r\n\t        iframeContent.onload = function () {\r\n\t            utils.raiseCustomEvent(iframeContent, \"preloaded\", {});\r\n\t        };\r\n\t        return iframeContent;\r\n\t    };\r\n\t    /**\r\n\t     * A list of components that this service can embed\r\n\t     */\r\n\t    Service.components = [\r\n\t        tile_1.Tile,\r\n\t        report_1.Report,\r\n\t        dashboard_1.Dashboard,\r\n\t        qna_1.Qna,\r\n\t        visual_1.Visual\r\n\t    ];\r\n\t    /**\r\n\t     * The default configuration for the service\r\n\t     */\r\n\t    Service.defaultConfig = {\r\n\t        autoEmbedOnContentLoaded: false,\r\n\t        onError: function () {\r\n\t            var args = [];\r\n\t            for (var _i = 0; _i < arguments.length; _i++) {\r\n\t                args[_i - 0] = arguments[_i];\r\n\t            }\r\n\t            return console.log(args[0], args.slice(1));\r\n\t        }\r\n\t    };\r\n\t    Service.DefaultInitEmbedUrl = \"http://app.powerbi.com/reportEmbed\";\r\n\t    return Service;\r\n\t}());\r\n\texports.Service = Service;\r\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar utils = __webpack_require__(3);\r\n\tvar models = __webpack_require__(4);\r\n\t/**\r\n\t * Base class for all Power BI embed components\r\n\t *\r\n\t * @export\r\n\t * @abstract\r\n\t * @class Embed\r\n\t */\r\n\tvar Embed = (function () {\r\n\t    /**\r\n\t     * Creates an instance of Embed.\r\n\t     *\r\n\t     * Note: there is circular reference between embeds and the service, because\r\n\t     * the service has a list of all embeds on the host page, and each embed has a reference to the service that created it.\r\n\t     *\r\n\t     * @param {service.Service} service\r\n\t     * @param {HTMLElement} element\r\n\t     * @param {IEmbedConfigurationBase} config\r\n\t     */\r\n\t    function Embed(service, element, config, iframe, phasedRender) {\r\n\t        this.allowedEvents = [];\r\n\t        Array.prototype.push.apply(this.allowedEvents, Embed.allowedEvents);\r\n\t        this.eventHandlers = [];\r\n\t        this.service = service;\r\n\t        this.element = element;\r\n\t        this.iframe = iframe;\r\n\t        this.embeType = config.type.toLowerCase();\r\n\t        this.populateConfig(config);\r\n\t        if (this.embeType === 'create') {\r\n\t            this.setIframe(false /*set EventListener to call create() on 'load' event*/);\r\n\t        }\r\n\t        else {\r\n\t            this.setIframe(true /*set EventListener to call load() on 'load' event*/, phasedRender);\r\n\t        }\r\n\t    }\r\n\t    /**\r\n\t     * Sends createReport configuration data.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * createReport({\r\n\t     *   datasetId: '5dac7a4a-4452-46b3-99f6-a25915e0fe55',\r\n\t     *   accessToken: 'eyJ0eXA ... TaE2rTSbmg',\r\n\t     * ```\r\n\t     *\r\n\t     * @param {models.IReportCreateConfiguration} config\r\n\t     * @returns {Promise<void>}\r\n\t     */\r\n\t    Embed.prototype.createReport = function (config) {\r\n\t        var errors = models.validateCreateReport(config);\r\n\t        if (errors) {\r\n\t            throw errors;\r\n\t        }\r\n\t        return this.service.hpm.post(\"/report/create\", config, { uid: this.config.uniqueId, sdkSessionId: this.service.getSdkSessionId() }, this.iframe.contentWindow)\r\n\t            .then(function (response) {\r\n\t            return response.body;\r\n\t        }, function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Saves Report.\r\n\t     *\r\n\t     * @returns {Promise<void>}\r\n\t     */\r\n\t    Embed.prototype.save = function () {\r\n\t        return this.service.hpm.post('/report/save', null, { uid: this.config.uniqueId }, this.iframe.contentWindow)\r\n\t            .then(function (response) {\r\n\t            return response.body;\r\n\t        })\r\n\t            .catch(function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * SaveAs Report.\r\n\t     *\r\n\t     * @returns {Promise<void>}\r\n\t     */\r\n\t    Embed.prototype.saveAs = function (saveAsParameters) {\r\n\t        return this.service.hpm.post('/report/saveAs', saveAsParameters, { uid: this.config.uniqueId }, this.iframe.contentWindow)\r\n\t            .then(function (response) {\r\n\t            return response.body;\r\n\t        })\r\n\t            .catch(function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Sends load configuration data.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * report.load({\r\n\t     *   type: 'report',\r\n\t     *   id: '5dac7a4a-4452-46b3-99f6-a25915e0fe55',\r\n\t     *   accessToken: 'eyJ0eXA ... TaE2rTSbmg',\r\n\t     *   settings: {\r\n\t     *     navContentPaneEnabled: false\r\n\t     *   },\r\n\t     *   pageName: \"DefaultPage\",\r\n\t     *   filters: [\r\n\t     *     {\r\n\t     *        ...  DefaultReportFilter ...\r\n\t     *     }\r\n\t     *   ]\r\n\t     * })\r\n\t     *   .catch(error => { ... });\r\n\t     * ```\r\n\t     *\r\n\t     * @param {models.ILoadConfiguration} config\r\n\t     * @param {boolean} phasedRender\r\n\t     * @returns {Promise<void>}\r\n\t     */\r\n\t    Embed.prototype.load = function (config, phasedRender) {\r\n\t        var _this = this;\r\n\t        var path = phasedRender && config.type === 'report' ? this.phasedLoadPath : this.loadPath;\r\n\t        return this.service.hpm.post(path, config, { uid: this.config.uniqueId, sdkSessionId: this.service.getSdkSessionId() }, this.iframe.contentWindow)\r\n\t            .then(function (response) {\r\n\t            utils.assign(_this.config, config);\r\n\t            return response.body;\r\n\t        }, function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Removes one or more event handlers from the list of handlers.\r\n\t     * If a reference to the existing handle function is specified, remove the specific handler.\r\n\t     * If the handler is not specified, remove all handlers for the event name specified.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * report.off('pageChanged')\r\n\t     *\r\n\t     * or\r\n\t     *\r\n\t     * const logHandler = function (event) {\r\n\t     *    console.log(event);\r\n\t     * };\r\n\t     *\r\n\t     * report.off('pageChanged', logHandler);\r\n\t     * ```\r\n\t     *\r\n\t     * @template T\r\n\t     * @param {string} eventName\r\n\t     * @param {service.IEventHandler<T>} [handler]\r\n\t     */\r\n\t    Embed.prototype.off = function (eventName, handler) {\r\n\t        var _this = this;\r\n\t        var fakeEvent = { name: eventName, type: null, id: null, value: null };\r\n\t        if (handler) {\r\n\t            utils.remove(function (eventHandler) { return eventHandler.test(fakeEvent) && (eventHandler.handle === handler); }, this.eventHandlers);\r\n\t            this.element.removeEventListener(eventName, handler);\r\n\t        }\r\n\t        else {\r\n\t            var eventHandlersToRemove = this.eventHandlers\r\n\t                .filter(function (eventHandler) { return eventHandler.test(fakeEvent); });\r\n\t            eventHandlersToRemove\r\n\t                .forEach(function (eventHandlerToRemove) {\r\n\t                utils.remove(function (eventHandler) { return eventHandler === eventHandlerToRemove; }, _this.eventHandlers);\r\n\t                _this.element.removeEventListener(eventName, eventHandlerToRemove.handle);\r\n\t            });\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * Adds an event handler for a specific event.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * report.on('pageChanged', (event) => {\r\n\t     *   console.log('PageChanged: ', event.page.name);\r\n\t     * });\r\n\t     * ```\r\n\t     *\r\n\t     * @template T\r\n\t     * @param {string} eventName\r\n\t     * @param {service.IEventHandler<T>} handler\r\n\t     */\r\n\t    Embed.prototype.on = function (eventName, handler) {\r\n\t        if (this.allowedEvents.indexOf(eventName) === -1) {\r\n\t            throw new Error(\"eventName is must be one of \" + this.allowedEvents + \". You passed: \" + eventName);\r\n\t        }\r\n\t        this.eventHandlers.push({\r\n\t            test: function (event) { return event.name === eventName; },\r\n\t            handle: handler\r\n\t        });\r\n\t        this.element.addEventListener(eventName, handler);\r\n\t    };\r\n\t    /**\r\n\t     * Reloads embed using existing configuration.\r\n\t     * E.g. For reports this effectively clears all filters and makes the first page active which simulates resetting a report back to loaded state.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * report.reload();\r\n\t     * ```\r\n\t     */\r\n\t    Embed.prototype.reload = function () {\r\n\t        return this.load(this.config);\r\n\t    };\r\n\t    /**\r\n\t     * Set accessToken.\r\n\t     *\r\n\t     * @returns {Promise<void>}\r\n\t     */\r\n\t    Embed.prototype.setAccessToken = function (accessToken) {\r\n\t        var _this = this;\r\n\t        var embedType = this.config.type;\r\n\t        embedType = (embedType === 'create' || embedType === 'visual' || embedType === 'qna') ? 'report' : embedType;\r\n\t        return this.service.hpm.post('/' + embedType + '/token', accessToken, { uid: this.config.uniqueId }, this.iframe.contentWindow)\r\n\t            .then(function (response) {\r\n\t            _this.config.accessToken = accessToken;\r\n\t            _this.element.setAttribute(Embed.accessTokenAttribute, accessToken);\r\n\t            _this.service.accessToken = accessToken;\r\n\t            return response.body;\r\n\t        })\r\n\t            .catch(function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Gets an access token from the first available location: config, attribute, global.\r\n\t     *\r\n\t     * @private\r\n\t     * @param {string} globalAccessToken\r\n\t     * @returns {string}\r\n\t     */\r\n\t    Embed.prototype.getAccessToken = function (globalAccessToken) {\r\n\t        var accessToken = this.config.accessToken || this.element.getAttribute(Embed.accessTokenAttribute) || globalAccessToken;\r\n\t        if (!accessToken) {\r\n\t            throw new Error(\"No access token was found for element. You must specify an access token directly on the element using attribute '\" + Embed.accessTokenAttribute + \"' or specify a global token at: powerbi.accessToken.\");\r\n\t        }\r\n\t        return accessToken;\r\n\t    };\r\n\t    /**\r\n\t     * Populate config for create and load\r\n\t     *\r\n\t     * @param {IEmbedConfiguration}\r\n\t     * @returns {void}\r\n\t     */\r\n\t    Embed.prototype.populateConfig = function (config) {\r\n\t        this.config = config;\r\n\t        // TODO: Change when Object.assign is available.\r\n\t        this.config.uniqueId = this.getUniqueId();\r\n\t        this.config.embedUrl = this.getEmbedUrl();\r\n\t        this.config.accessToken = this.getAccessToken(this.service.accessToken);\r\n\t        this.config.groupId = this.getGroupId();\r\n\t        this.addLocaleToEmbedUrl(config);\r\n\t    };\r\n\t    /**\r\n\t     * Adds locale parameters to embedUrl\r\n\t     *\r\n\t     * @private\r\n\t     * @param {IEmbedConfiguration} config\r\n\t     */\r\n\t    Embed.prototype.addLocaleToEmbedUrl = function (config) {\r\n\t        if (!config.settings) {\r\n\t            return;\r\n\t        }\r\n\t        var localeSettings = config.settings.localeSettings;\r\n\t        if (localeSettings && localeSettings.language) {\r\n\t            this.config.embedUrl = utils.addParamToUrl(this.config.embedUrl, 'language', localeSettings.language);\r\n\t        }\r\n\t        if (localeSettings && localeSettings.formatLocale) {\r\n\t            this.config.embedUrl = utils.addParamToUrl(this.config.embedUrl, 'formatLocale', localeSettings.formatLocale);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * Gets an embed url from the first available location: options, attribute.\r\n\t     *\r\n\t     * @private\r\n\t     * @returns {string}\r\n\t     */\r\n\t    Embed.prototype.getEmbedUrl = function () {\r\n\t        var embedUrl = this.config.embedUrl || this.element.getAttribute(Embed.embedUrlAttribute);\r\n\t        if (typeof embedUrl !== 'string' || embedUrl.length === 0) {\r\n\t            throw new Error(\"Embed Url is required, but it was not found. You must provide an embed url either as part of embed configuration or as attribute '\" + Embed.embedUrlAttribute + \"'.\");\r\n\t        }\r\n\t        return embedUrl;\r\n\t    };\r\n\t    /**\r\n\t     * Gets a unique ID from the first available location: options, attribute.\r\n\t     * If neither is provided generate a unique string.\r\n\t     *\r\n\t     * @private\r\n\t     * @returns {string}\r\n\t     */\r\n\t    Embed.prototype.getUniqueId = function () {\r\n\t        return this.config.uniqueId || this.element.getAttribute(Embed.nameAttribute) || utils.createRandomString();\r\n\t    };\r\n\t    /**\r\n\t     * Gets the group ID from the first available location: options, embeddedUrl.\r\n\t     *\r\n\t     * @private\r\n\t     * @returns {string}\r\n\t     */\r\n\t    Embed.prototype.getGroupId = function () {\r\n\t        return this.config.groupId || Embed.findGroupIdFromEmbedUrl(this.config.embedUrl);\r\n\t    };\r\n\t    /**\r\n\t     * Requests the browser to render the component's iframe in fullscreen mode.\r\n\t     */\r\n\t    Embed.prototype.fullscreen = function () {\r\n\t        var requestFullScreen = this.iframe.requestFullscreen || this.iframe.msRequestFullscreen || this.iframe.mozRequestFullScreen || this.iframe.webkitRequestFullscreen;\r\n\t        requestFullScreen.call(this.iframe);\r\n\t    };\r\n\t    /**\r\n\t     * Requests the browser to exit fullscreen mode.\r\n\t     */\r\n\t    Embed.prototype.exitFullscreen = function () {\r\n\t        if (!this.isFullscreen(this.iframe)) {\r\n\t            return;\r\n\t        }\r\n\t        var exitFullscreen = document.exitFullscreen || document.mozCancelFullScreen || document.webkitExitFullscreen || document.msExitFullscreen;\r\n\t        exitFullscreen.call(document);\r\n\t    };\r\n\t    /**\r\n\t     * Returns true if the iframe is rendered in fullscreen mode,\r\n\t     * otherwise returns false.\r\n\t     *\r\n\t     * @private\r\n\t     * @param {HTMLIFrameElement} iframe\r\n\t     * @returns {boolean}\r\n\t     */\r\n\t    Embed.prototype.isFullscreen = function (iframe) {\r\n\t        var options = ['fullscreenElement', 'webkitFullscreenElement', 'mozFullscreenScreenElement', 'msFullscreenElement'];\r\n\t        return options.some(function (option) { return document[option] === iframe; });\r\n\t    };\r\n\t    /**\r\n\t     * Sets Iframe for embed\r\n\t     */\r\n\t    Embed.prototype.setIframe = function (isLoad, phasedRender) {\r\n\t        var _this = this;\r\n\t        if (!this.iframe) {\r\n\t            var iframeContent = document.createElement(\"iframe\");\r\n\t            var embedUrl = this.config.uniqueId ? utils.addParamToUrl(this.config.embedUrl, 'uid', this.config.uniqueId) : this.config.embedUrl;\r\n\t            iframeContent.style.width = '100%';\r\n\t            iframeContent.style.height = '100%';\r\n\t            iframeContent.setAttribute(\"src\", embedUrl);\r\n\t            iframeContent.setAttribute(\"scrolling\", \"no\");\r\n\t            iframeContent.setAttribute(\"allowfullscreen\", \"true\");\r\n\t            var node = this.element;\r\n\t            while (node.firstChild) {\r\n\t                node.removeChild(node.firstChild);\r\n\t            }\r\n\t            node.appendChild(iframeContent);\r\n\t            this.iframe = node.firstChild;\r\n\t        }\r\n\t        if (isLoad) {\r\n\t            var errors = this.validate(this.config);\r\n\t            if (errors) {\r\n\t                throw errors;\r\n\t            }\r\n\t            this.iframe.addEventListener('load', function () { return _this.load(_this.config, phasedRender); }, false);\r\n\t            if (this.service.getNumberOfComponents() <= Embed.maxFrontLoadTimes) {\r\n\t                this.frontLoadHandler = function () { return _this.frontLoadSendConfig(_this.config); };\r\n\t                // 'ready' event is fired by the embedded element (not by the iframe)\r\n\t                this.element.addEventListener('ready', this.frontLoadHandler, false);\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            this.iframe.addEventListener('load', function () { return _this.createReport(_this.createConfig); }, false);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * Sets Iframe's title\r\n\t     */\r\n\t    Embed.prototype.setComponentTitle = function (title) {\r\n\t        if (!this.iframe) {\r\n\t            return;\r\n\t        }\r\n\t        if (title == null) {\r\n\t            this.iframe.removeAttribute(\"title\");\r\n\t        }\r\n\t        else {\r\n\t            this.iframe.setAttribute(\"title\", title);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * Sets element's tabindex attribute\r\n\t     */\r\n\t    Embed.prototype.setComponentTabIndex = function (tabIndex) {\r\n\t        if (!this.element) {\r\n\t            return;\r\n\t        }\r\n\t        this.element.setAttribute(\"tabindex\", (tabIndex == null) ? \"0\" : tabIndex.toString());\r\n\t    };\r\n\t    /**\r\n\t     * Removes element's tabindex attribute\r\n\t     */\r\n\t    Embed.prototype.removeComponentTabIndex = function (tabIndex) {\r\n\t        if (!this.element) {\r\n\t            return;\r\n\t        }\r\n\t        this.element.removeAttribute(\"tabindex\");\r\n\t    };\r\n\t    /**\r\n\t     * Adds the ability to get groupId from url.\r\n\t     * By extracting the ID we can ensure that the ID is always explicitly provided as part of the load configuration.\r\n\t     *\r\n\t     * @static\r\n\t     * @param {string} url\r\n\t     * @returns {string}\r\n\t     */\r\n\t    Embed.findGroupIdFromEmbedUrl = function (url) {\r\n\t        var groupIdRegEx = /groupId=\"?([^&]+)\"?/;\r\n\t        var groupIdMatch = url.match(groupIdRegEx);\r\n\t        var groupId;\r\n\t        if (groupIdMatch) {\r\n\t            groupId = groupIdMatch[1];\r\n\t        }\r\n\t        return groupId;\r\n\t    };\r\n\t    /**\r\n\t     * Sends the config for front load calls, after 'ready' message is received from the iframe\r\n\t     */\r\n\t    Embed.prototype.frontLoadSendConfig = function (config) {\r\n\t        var errors = this.validate(config);\r\n\t        if (errors) {\r\n\t            throw errors;\r\n\t        }\r\n\t        // contentWindow must be initialized\r\n\t        if (this.iframe.contentWindow == null)\r\n\t            return;\r\n\t        return this.service.hpm.post(\"/frontload/config\", config, { uid: this.config.uniqueId }, this.iframe.contentWindow).then(function (response) {\r\n\t            return response.body;\r\n\t        }, function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    Embed.allowedEvents = [\"loaded\", \"saved\", \"rendered\", \"saveAsTriggered\", \"error\", \"dataSelected\", \"buttonClicked\"];\r\n\t    Embed.accessTokenAttribute = 'powerbi-access-token';\r\n\t    Embed.embedUrlAttribute = 'powerbi-embed-url';\r\n\t    Embed.nameAttribute = 'powerbi-name';\r\n\t    Embed.typeAttribute = 'powerbi-type';\r\n\t    Embed.maxFrontLoadTimes = 2;\r\n\t    return Embed;\r\n\t}());\r\n\texports.Embed = Embed;\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\t/**\r\n\t * Raises a custom event with event data on the specified HTML element.\r\n\t *\r\n\t * @export\r\n\t * @param {HTMLElement} element\r\n\t * @param {string} eventName\r\n\t * @param {*} eventData\r\n\t */\r\n\tfunction raiseCustomEvent(element, eventName, eventData) {\r\n\t    var customEvent;\r\n\t    if (typeof CustomEvent === 'function') {\r\n\t        customEvent = new CustomEvent(eventName, {\r\n\t            detail: eventData,\r\n\t            bubbles: true,\r\n\t            cancelable: true\r\n\t        });\r\n\t    }\r\n\t    else {\r\n\t        customEvent = document.createEvent('CustomEvent');\r\n\t        customEvent.initCustomEvent(eventName, true, true, eventData);\r\n\t    }\r\n\t    element.dispatchEvent(customEvent);\r\n\t}\r\n\texports.raiseCustomEvent = raiseCustomEvent;\r\n\t/**\r\n\t * Finds the index of the first value in an array that matches the specified predicate.\r\n\t *\r\n\t * @export\r\n\t * @template T\r\n\t * @param {(x: T) => boolean} predicate\r\n\t * @param {T[]} xs\r\n\t * @returns {number}\r\n\t */\r\n\tfunction findIndex(predicate, xs) {\r\n\t    if (!Array.isArray(xs)) {\r\n\t        throw new Error(\"You attempted to call find with second parameter that was not an array. You passed: \" + xs);\r\n\t    }\r\n\t    var index;\r\n\t    xs.some(function (x, i) {\r\n\t        if (predicate(x)) {\r\n\t            index = i;\r\n\t            return true;\r\n\t        }\r\n\t    });\r\n\t    return index;\r\n\t}\r\n\texports.findIndex = findIndex;\r\n\t/**\r\n\t * Finds the first value in an array that matches the specified predicate.\r\n\t *\r\n\t * @export\r\n\t * @template T\r\n\t * @param {(x: T) => boolean} predicate\r\n\t * @param {T[]} xs\r\n\t * @returns {T}\r\n\t */\r\n\tfunction find(predicate, xs) {\r\n\t    var index = findIndex(predicate, xs);\r\n\t    return xs[index];\r\n\t}\r\n\texports.find = find;\r\n\tfunction remove(predicate, xs) {\r\n\t    var index = findIndex(predicate, xs);\r\n\t    xs.splice(index, 1);\r\n\t}\r\n\texports.remove = remove;\r\n\t// See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\r\n\t// TODO: replace in favor of using polyfill\r\n\t/**\r\n\t * Copies the values of all enumerable properties from one or more source objects to a target object, and returns the target object.\r\n\t *\r\n\t * @export\r\n\t * @param {any} args\r\n\t * @returns\r\n\t */\r\n\tfunction assign() {\r\n\t    var args = [];\r\n\t    for (var _i = 0; _i < arguments.length; _i++) {\r\n\t        args[_i - 0] = arguments[_i];\r\n\t    }\r\n\t    var target = args[0];\r\n\t    'use strict';\r\n\t    if (target === undefined || target === null) {\r\n\t        throw new TypeError('Cannot convert undefined or null to object');\r\n\t    }\r\n\t    var output = Object(target);\r\n\t    for (var index = 1; index < arguments.length; index++) {\r\n\t        var source = arguments[index];\r\n\t        if (source !== undefined && source !== null) {\r\n\t            for (var nextKey in source) {\r\n\t                if (source.hasOwnProperty(nextKey)) {\r\n\t                    output[nextKey] = source[nextKey];\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    return output;\r\n\t}\r\n\texports.assign = assign;\r\n\t/**\r\n\t * Generates a random 7 character string.\r\n\t *\r\n\t * @export\r\n\t * @returns {string}\r\n\t */\r\n\tfunction createRandomString() {\r\n\t    return (Math.random() + 1).toString(36).substring(7);\r\n\t}\r\n\texports.createRandomString = createRandomString;\r\n\t/**\r\n\t * Generates a 20 charachter uuid.\r\n\t *\r\n\t * @export\r\n\t * @returns {string}\r\n\t */\r\n\tfunction generateUUID() {\r\n\t    var d = new Date().getTime();\r\n\t    if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\r\n\t        d += performance.now();\r\n\t    }\r\n\t    return 'xxxxxxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n\t        // Generate a random number, scaled from 0 to 16.\r\n\t        // Bitwise-and by 15 since we only care about the last 4 bits.\r\n\t        var r = (d + Math.random() * 16) & 15 | 0;\r\n\t        // Shift 4 times to divide by 16\r\n\t        d >>= 4;\r\n\t        return r.toString(16);\r\n\t    });\r\n\t}\r\n\texports.generateUUID = generateUUID;\r\n\t/**\r\n\t * Adds a parameter to the given url\r\n\t *\r\n\t * @export\r\n\t * @param {string} url\r\n\t * @param {string} paramName\r\n\t * @param {string} value\r\n\t * @returns {string}\r\n\t */\r\n\tfunction addParamToUrl(url, paramName, value) {\r\n\t    var parameterPrefix = url.indexOf('?') > 0 ? '&' : '?';\r\n\t    url += parameterPrefix + paramName + '=' + value;\r\n\t    return url;\r\n\t}\r\n\texports.addParamToUrl = addParamToUrl;\r\n\t/**\r\n\t * Checks if the report is saved.\r\n\t *\r\n\t * @export\r\n\t * @param {HttpPostMessage} hpm\r\n\t * @param {string} uid\r\n\t * @param {Window} contentWindow\r\n\t * @returns {Promise<boolean>}\r\n\t */\r\n\tfunction isSavedInternal(hpm, uid, contentWindow) {\r\n\t    return hpm.get('/report/hasUnsavedChanges', { uid: uid }, contentWindow)\r\n\t        .then(function (response) { return !response.body; }, function (response) {\r\n\t        throw response.body;\r\n\t    });\r\n\t}\r\n\texports.isSavedInternal = isSavedInternal;\r\n\t/**\r\n\t * Checks if the embed url is for RDL report.\r\n\t *\r\n\t * @export\r\n\t  * @param {string} embedUrl\r\n\t  * @returns {boolean}\r\n\t */\r\n\tfunction isRDLEmbed(embedUrl) {\r\n\t    return embedUrl.toLowerCase().indexOf(\"/rdlembed?\") >= 0;\r\n\t}\r\n\texports.isRDLEmbed = isRDLEmbed;\r\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*! powerbi-models v1.2.1 | (c) 2016 Microsoft Corporation MIT */\n\t(function webpackUniversalModuleDefinition(root, factory) {\n\t\tif(true)\n\t\t\tmodule.exports = factory();\n\t\telse {}\n\t})(this, function() {\n\treturn /******/ (function(modules) { // webpackBootstrap\n\t/******/ \t// The module cache\n\t/******/ \tvar installedModules = {};\n\t/******/\n\t/******/ \t// The require function\n\t/******/ \tfunction __webpack_require__(moduleId) {\n\t/******/\n\t/******/ \t\t// Check if module is in cache\n\t/******/ \t\tif(installedModules[moduleId])\n\t/******/ \t\t\treturn installedModules[moduleId].exports;\n\t/******/\n\t/******/ \t\t// Create a new module (and put it into the cache)\n\t/******/ \t\tvar module = installedModules[moduleId] = {\n\t/******/ \t\t\texports: {},\n\t/******/ \t\t\tid: moduleId,\n\t/******/ \t\t\tloaded: false\n\t/******/ \t\t};\n\t/******/\n\t/******/ \t\t// Execute the module function\n\t/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t/******/\n\t/******/ \t\t// Flag the module as loaded\n\t/******/ \t\tmodule.loaded = true;\n\t/******/\n\t/******/ \t\t// Return the exports of the module\n\t/******/ \t\treturn module.exports;\n\t/******/ \t}\n\t/******/\n\t/******/\n\t/******/ \t// expose the modules object (__webpack_modules__)\n\t/******/ \t__webpack_require__.m = modules;\n\t/******/\n\t/******/ \t// expose the module cache\n\t/******/ \t__webpack_require__.c = installedModules;\n\t/******/\n\t/******/ \t// __webpack_public_path__\n\t/******/ \t__webpack_require__.p = \"\";\n\t/******/\n\t/******/ \t// Load entry module and return exports\n\t/******/ \treturn __webpack_require__(0);\n\t/******/ })\n\t/************************************************************************/\n\t/******/ ([\n\t/* 0 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\tvar __extends = (this && this.__extends) || (function () {\r\n\t\t    var extendStatics = Object.setPrototypeOf ||\r\n\t\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t\t    return function (d, b) {\r\n\t\t        extendStatics(d, b);\r\n\t\t        function __() { this.constructor = d; }\r\n\t\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t\t    };\r\n\t\t})();\r\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\texports.Validators = __webpack_require__(1).Validators;\r\n\t\tvar TraceType;\r\n\t\t(function (TraceType) {\r\n\t\t    TraceType[TraceType[\"Information\"] = 0] = \"Information\";\r\n\t\t    TraceType[TraceType[\"Verbose\"] = 1] = \"Verbose\";\r\n\t\t    TraceType[TraceType[\"Warning\"] = 2] = \"Warning\";\r\n\t\t    TraceType[TraceType[\"Error\"] = 3] = \"Error\";\r\n\t\t    TraceType[TraceType[\"ExpectedError\"] = 4] = \"ExpectedError\";\r\n\t\t    TraceType[TraceType[\"UnexpectedError\"] = 5] = \"UnexpectedError\";\r\n\t\t    TraceType[TraceType[\"Fatal\"] = 6] = \"Fatal\";\r\n\t\t})(TraceType = exports.TraceType || (exports.TraceType = {}));\r\n\t\tvar PageSizeType;\r\n\t\t(function (PageSizeType) {\r\n\t\t    PageSizeType[PageSizeType[\"Widescreen\"] = 0] = \"Widescreen\";\r\n\t\t    PageSizeType[PageSizeType[\"Standard\"] = 1] = \"Standard\";\r\n\t\t    PageSizeType[PageSizeType[\"Cortana\"] = 2] = \"Cortana\";\r\n\t\t    PageSizeType[PageSizeType[\"Letter\"] = 3] = \"Letter\";\r\n\t\t    PageSizeType[PageSizeType[\"Custom\"] = 4] = \"Custom\";\r\n\t\t})(PageSizeType = exports.PageSizeType || (exports.PageSizeType = {}));\r\n\t\tvar DisplayOption;\r\n\t\t(function (DisplayOption) {\r\n\t\t    DisplayOption[DisplayOption[\"FitToPage\"] = 0] = \"FitToPage\";\r\n\t\t    DisplayOption[DisplayOption[\"FitToWidth\"] = 1] = \"FitToWidth\";\r\n\t\t    DisplayOption[DisplayOption[\"ActualSize\"] = 2] = \"ActualSize\";\r\n\t\t})(DisplayOption = exports.DisplayOption || (exports.DisplayOption = {}));\r\n\t\tvar BackgroundType;\r\n\t\t(function (BackgroundType) {\r\n\t\t    BackgroundType[BackgroundType[\"Default\"] = 0] = \"Default\";\r\n\t\t    BackgroundType[BackgroundType[\"Transparent\"] = 1] = \"Transparent\";\r\n\t\t})(BackgroundType = exports.BackgroundType || (exports.BackgroundType = {}));\r\n\t\tvar VisualContainerDisplayMode;\r\n\t\t(function (VisualContainerDisplayMode) {\r\n\t\t    VisualContainerDisplayMode[VisualContainerDisplayMode[\"Visible\"] = 0] = \"Visible\";\r\n\t\t    VisualContainerDisplayMode[VisualContainerDisplayMode[\"Hidden\"] = 1] = \"Hidden\";\r\n\t\t})(VisualContainerDisplayMode = exports.VisualContainerDisplayMode || (exports.VisualContainerDisplayMode = {}));\r\n\t\tvar LayoutType;\r\n\t\t(function (LayoutType) {\r\n\t\t    LayoutType[LayoutType[\"Master\"] = 0] = \"Master\";\r\n\t\t    LayoutType[LayoutType[\"Custom\"] = 1] = \"Custom\";\r\n\t\t    LayoutType[LayoutType[\"MobilePortrait\"] = 2] = \"MobilePortrait\";\r\n\t\t    LayoutType[LayoutType[\"MobileLandscape\"] = 3] = \"MobileLandscape\";\r\n\t\t})(LayoutType = exports.LayoutType || (exports.LayoutType = {}));\r\n\t\tvar SectionVisibility;\r\n\t\t(function (SectionVisibility) {\r\n\t\t    SectionVisibility[SectionVisibility[\"AlwaysVisible\"] = 0] = \"AlwaysVisible\";\r\n\t\t    SectionVisibility[SectionVisibility[\"HiddenInViewMode\"] = 1] = \"HiddenInViewMode\";\r\n\t\t})(SectionVisibility = exports.SectionVisibility || (exports.SectionVisibility = {}));\r\n\t\tvar Permissions;\r\n\t\t(function (Permissions) {\r\n\t\t    Permissions[Permissions[\"Read\"] = 0] = \"Read\";\r\n\t\t    Permissions[Permissions[\"ReadWrite\"] = 1] = \"ReadWrite\";\r\n\t\t    Permissions[Permissions[\"Copy\"] = 2] = \"Copy\";\r\n\t\t    Permissions[Permissions[\"Create\"] = 4] = \"Create\";\r\n\t\t    Permissions[Permissions[\"All\"] = 7] = \"All\";\r\n\t\t})(Permissions = exports.Permissions || (exports.Permissions = {}));\r\n\t\tvar ViewMode;\r\n\t\t(function (ViewMode) {\r\n\t\t    ViewMode[ViewMode[\"View\"] = 0] = \"View\";\r\n\t\t    ViewMode[ViewMode[\"Edit\"] = 1] = \"Edit\";\r\n\t\t})(ViewMode = exports.ViewMode || (exports.ViewMode = {}));\r\n\t\tvar TokenType;\r\n\t\t(function (TokenType) {\r\n\t\t    TokenType[TokenType[\"Aad\"] = 0] = \"Aad\";\r\n\t\t    TokenType[TokenType[\"Embed\"] = 1] = \"Embed\";\r\n\t\t})(TokenType = exports.TokenType || (exports.TokenType = {}));\r\n\t\tvar MenuLocation;\r\n\t\t(function (MenuLocation) {\r\n\t\t    MenuLocation[MenuLocation[\"Bottom\"] = 0] = \"Bottom\";\r\n\t\t    MenuLocation[MenuLocation[\"Top\"] = 1] = \"Top\";\r\n\t\t})(MenuLocation = exports.MenuLocation || (exports.MenuLocation = {}));\r\n\t\tvar FiltersLevel;\r\n\t\t(function (FiltersLevel) {\r\n\t\t    FiltersLevel[FiltersLevel[\"Report\"] = 0] = \"Report\";\r\n\t\t    FiltersLevel[FiltersLevel[\"Page\"] = 1] = \"Page\";\r\n\t\t    FiltersLevel[FiltersLevel[\"Visual\"] = 2] = \"Visual\";\r\n\t\t})(FiltersLevel = exports.FiltersLevel || (exports.FiltersLevel = {}));\r\n\t\tvar FilterType;\r\n\t\t(function (FilterType) {\r\n\t\t    FilterType[FilterType[\"Advanced\"] = 0] = \"Advanced\";\r\n\t\t    FilterType[FilterType[\"Basic\"] = 1] = \"Basic\";\r\n\t\t    FilterType[FilterType[\"Unknown\"] = 2] = \"Unknown\";\r\n\t\t    FilterType[FilterType[\"IncludeExclude\"] = 3] = \"IncludeExclude\";\r\n\t\t    FilterType[FilterType[\"RelativeDate\"] = 4] = \"RelativeDate\";\r\n\t\t    FilterType[FilterType[\"TopN\"] = 5] = \"TopN\";\r\n\t\t    FilterType[FilterType[\"Tuple\"] = 6] = \"Tuple\";\r\n\t\t})(FilterType = exports.FilterType || (exports.FilterType = {}));\r\n\t\tvar RelativeDateFilterTimeUnit;\r\n\t\t(function (RelativeDateFilterTimeUnit) {\r\n\t\t    RelativeDateFilterTimeUnit[RelativeDateFilterTimeUnit[\"Days\"] = 0] = \"Days\";\r\n\t\t    RelativeDateFilterTimeUnit[RelativeDateFilterTimeUnit[\"Weeks\"] = 1] = \"Weeks\";\r\n\t\t    RelativeDateFilterTimeUnit[RelativeDateFilterTimeUnit[\"CalendarWeeks\"] = 2] = \"CalendarWeeks\";\r\n\t\t    RelativeDateFilterTimeUnit[RelativeDateFilterTimeUnit[\"Months\"] = 3] = \"Months\";\r\n\t\t    RelativeDateFilterTimeUnit[RelativeDateFilterTimeUnit[\"CalendarMonths\"] = 4] = \"CalendarMonths\";\r\n\t\t    RelativeDateFilterTimeUnit[RelativeDateFilterTimeUnit[\"Years\"] = 5] = \"Years\";\r\n\t\t    RelativeDateFilterTimeUnit[RelativeDateFilterTimeUnit[\"CalendarYears\"] = 6] = \"CalendarYears\";\r\n\t\t})(RelativeDateFilterTimeUnit = exports.RelativeDateFilterTimeUnit || (exports.RelativeDateFilterTimeUnit = {}));\r\n\t\tvar RelativeDateOperators;\r\n\t\t(function (RelativeDateOperators) {\r\n\t\t    RelativeDateOperators[RelativeDateOperators[\"InLast\"] = 0] = \"InLast\";\r\n\t\t    RelativeDateOperators[RelativeDateOperators[\"InThis\"] = 1] = \"InThis\";\r\n\t\t    RelativeDateOperators[RelativeDateOperators[\"InNext\"] = 2] = \"InNext\";\r\n\t\t})(RelativeDateOperators = exports.RelativeDateOperators || (exports.RelativeDateOperators = {}));\r\n\t\tvar Filter = /** @class */ (function () {\r\n\t\t    function Filter(target, filterType) {\r\n\t\t        this.target = target;\r\n\t\t        this.filterType = filterType;\r\n\t\t    }\r\n\t\t    Filter.prototype.toJSON = function () {\r\n\t\t        var filter = {\r\n\t\t            $schema: this.schemaUrl,\r\n\t\t            target: this.target,\r\n\t\t            filterType: this.filterType\r\n\t\t        };\r\n\t\t        // Add displaySettings only when defined\r\n\t\t        if (this.displaySettings !== undefined) {\r\n\t\t            filter.displaySettings = this.displaySettings;\r\n\t\t        }\r\n\t\t        return filter;\r\n\t\t    };\r\n\t\t    ;\r\n\t\t    return Filter;\r\n\t\t}());\r\n\t\texports.Filter = Filter;\r\n\t\tvar NotSupportedFilter = /** @class */ (function (_super) {\r\n\t\t    __extends(NotSupportedFilter, _super);\r\n\t\t    function NotSupportedFilter(target, message, notSupportedTypeName) {\r\n\t\t        var _this = _super.call(this, target, FilterType.Unknown) || this;\r\n\t\t        _this.message = message;\r\n\t\t        _this.notSupportedTypeName = notSupportedTypeName;\r\n\t\t        _this.schemaUrl = NotSupportedFilter.schemaUrl;\r\n\t\t        return _this;\r\n\t\t    }\r\n\t\t    NotSupportedFilter.prototype.toJSON = function () {\r\n\t\t        var filter = _super.prototype.toJSON.call(this);\r\n\t\t        filter.message = this.message;\r\n\t\t        filter.notSupportedTypeName = this.notSupportedTypeName;\r\n\t\t        return filter;\r\n\t\t    };\r\n\t\t    NotSupportedFilter.schemaUrl = \"http://powerbi.com/product/schema#notSupported\";\r\n\t\t    return NotSupportedFilter;\r\n\t\t}(Filter));\r\n\t\texports.NotSupportedFilter = NotSupportedFilter;\r\n\t\tvar IncludeExcludeFilter = /** @class */ (function (_super) {\r\n\t\t    __extends(IncludeExcludeFilter, _super);\r\n\t\t    function IncludeExcludeFilter(target, isExclude, values) {\r\n\t\t        var _this = _super.call(this, target, FilterType.IncludeExclude) || this;\r\n\t\t        _this.values = values;\r\n\t\t        _this.isExclude = isExclude;\r\n\t\t        _this.schemaUrl = IncludeExcludeFilter.schemaUrl;\r\n\t\t        return _this;\r\n\t\t    }\r\n\t\t    IncludeExcludeFilter.prototype.toJSON = function () {\r\n\t\t        var filter = _super.prototype.toJSON.call(this);\r\n\t\t        filter.isExclude = this.isExclude;\r\n\t\t        filter.values = this.values;\r\n\t\t        return filter;\r\n\t\t    };\r\n\t\t    IncludeExcludeFilter.schemaUrl = \"http://powerbi.com/product/schema#includeExclude\";\r\n\t\t    return IncludeExcludeFilter;\r\n\t\t}(Filter));\r\n\t\texports.IncludeExcludeFilter = IncludeExcludeFilter;\r\n\t\tvar TopNFilter = /** @class */ (function (_super) {\r\n\t\t    __extends(TopNFilter, _super);\r\n\t\t    function TopNFilter(target, operator, itemCount, orderBy) {\r\n\t\t        var _this = _super.call(this, target, FilterType.TopN) || this;\r\n\t\t        _this.operator = operator;\r\n\t\t        _this.itemCount = itemCount;\r\n\t\t        _this.schemaUrl = TopNFilter.schemaUrl;\r\n\t\t        _this.orderBy = orderBy;\r\n\t\t        return _this;\r\n\t\t    }\r\n\t\t    TopNFilter.prototype.toJSON = function () {\r\n\t\t        var filter = _super.prototype.toJSON.call(this);\r\n\t\t        filter.operator = this.operator;\r\n\t\t        filter.itemCount = this.itemCount;\r\n\t\t        filter.orderBy = this.orderBy;\r\n\t\t        return filter;\r\n\t\t    };\r\n\t\t    TopNFilter.schemaUrl = \"http://powerbi.com/product/schema#topN\";\r\n\t\t    return TopNFilter;\r\n\t\t}(Filter));\r\n\t\texports.TopNFilter = TopNFilter;\r\n\t\tvar RelativeDateFilter = /** @class */ (function (_super) {\r\n\t\t    __extends(RelativeDateFilter, _super);\r\n\t\t    function RelativeDateFilter(target, operator, timeUnitsCount, timeUnitType, includeToday) {\r\n\t\t        var _this = _super.call(this, target, FilterType.RelativeDate) || this;\r\n\t\t        _this.operator = operator;\r\n\t\t        _this.timeUnitsCount = timeUnitsCount;\r\n\t\t        _this.timeUnitType = timeUnitType;\r\n\t\t        _this.includeToday = includeToday;\r\n\t\t        _this.schemaUrl = RelativeDateFilter.schemaUrl;\r\n\t\t        return _this;\r\n\t\t    }\r\n\t\t    RelativeDateFilter.prototype.toJSON = function () {\r\n\t\t        var filter = _super.prototype.toJSON.call(this);\r\n\t\t        filter.operator = this.operator;\r\n\t\t        filter.timeUnitsCount = this.timeUnitsCount;\r\n\t\t        filter.timeUnitType = this.timeUnitType;\r\n\t\t        filter.includeToday = this.includeToday;\r\n\t\t        return filter;\r\n\t\t    };\r\n\t\t    RelativeDateFilter.schemaUrl = \"http://powerbi.com/product/schema#relativeDate\";\r\n\t\t    return RelativeDateFilter;\r\n\t\t}(Filter));\r\n\t\texports.RelativeDateFilter = RelativeDateFilter;\r\n\t\tvar BasicFilter = /** @class */ (function (_super) {\r\n\t\t    __extends(BasicFilter, _super);\r\n\t\t    function BasicFilter(target, operator) {\r\n\t\t        var values = [];\r\n\t\t        for (var _i = 2; _i < arguments.length; _i++) {\r\n\t\t            values[_i - 2] = arguments[_i];\r\n\t\t        }\r\n\t\t        var _this = _super.call(this, target, FilterType.Basic) || this;\r\n\t\t        _this.operator = operator;\r\n\t\t        _this.schemaUrl = BasicFilter.schemaUrl;\r\n\t\t        if (values.length === 0 && operator !== \"All\") {\r\n\t\t            throw new Error(\"values must be a non-empty array unless your operator is \\\"All\\\".\");\r\n\t\t        }\r\n\t\t        /**\r\n\t\t         * Accept values as array instead of as individual arguments\r\n\t\t         * new BasicFilter('a', 'b', 1, 2);\r\n\t\t         * new BasicFilter('a', 'b', [1,2]);\r\n\t\t         */\r\n\t\t        if (Array.isArray(values[0])) {\r\n\t\t            _this.values = values[0];\r\n\t\t        }\r\n\t\t        else {\r\n\t\t            _this.values = values;\r\n\t\t        }\r\n\t\t        return _this;\r\n\t\t    }\r\n\t\t    BasicFilter.prototype.toJSON = function () {\r\n\t\t        var filter = _super.prototype.toJSON.call(this);\r\n\t\t        filter.operator = this.operator;\r\n\t\t        filter.values = this.values;\r\n\t\t        return filter;\r\n\t\t    };\r\n\t\t    BasicFilter.schemaUrl = \"http://powerbi.com/product/schema#basic\";\r\n\t\t    return BasicFilter;\r\n\t\t}(Filter));\r\n\t\texports.BasicFilter = BasicFilter;\r\n\t\tvar BasicFilterWithKeys = /** @class */ (function (_super) {\r\n\t\t    __extends(BasicFilterWithKeys, _super);\r\n\t\t    function BasicFilterWithKeys(target, operator, values, keyValues) {\r\n\t\t        var _this = _super.call(this, target, operator, values) || this;\r\n\t\t        _this.keyValues = keyValues;\r\n\t\t        _this.target = target;\r\n\t\t        var numberOfKeys = target.keys ? target.keys.length : 0;\r\n\t\t        if (numberOfKeys > 0 && !keyValues) {\r\n\t\t            throw new Error(\"You should pass the values to be filtered for each key. You passed: no values and \" + numberOfKeys + \" keys\");\r\n\t\t        }\r\n\t\t        if (numberOfKeys === 0 && keyValues && keyValues.length > 0) {\r\n\t\t            throw new Error(\"You passed key values but your target object doesn't contain the keys to be filtered\");\r\n\t\t        }\r\n\t\t        for (var i = 0; i < _this.keyValues.length; i++) {\r\n\t\t            if (_this.keyValues[i]) {\r\n\t\t                var lengthOfArray = _this.keyValues[i].length;\r\n\t\t                if (lengthOfArray !== numberOfKeys) {\r\n\t\t                    throw new Error(\"Each tuple of key values should contain a value for each of the keys. You passed: \" + lengthOfArray + \" values and \" + numberOfKeys + \" keys\");\r\n\t\t                }\r\n\t\t            }\r\n\t\t        }\r\n\t\t        return _this;\r\n\t\t    }\r\n\t\t    BasicFilterWithKeys.prototype.toJSON = function () {\r\n\t\t        var filter = _super.prototype.toJSON.call(this);\r\n\t\t        filter.keyValues = this.keyValues;\r\n\t\t        return filter;\r\n\t\t    };\r\n\t\t    return BasicFilterWithKeys;\r\n\t\t}(BasicFilter));\r\n\t\texports.BasicFilterWithKeys = BasicFilterWithKeys;\r\n\t\tvar TupleFilter = /** @class */ (function (_super) {\r\n\t\t    __extends(TupleFilter, _super);\r\n\t\t    function TupleFilter(target, operator, values) {\r\n\t\t        var _this = _super.call(this, target, FilterType.Tuple) || this;\r\n\t\t        _this.operator = operator;\r\n\t\t        _this.schemaUrl = TupleFilter.schemaUrl;\r\n\t\t        _this.values = values;\r\n\t\t        return _this;\r\n\t\t    }\r\n\t\t    TupleFilter.prototype.toJSON = function () {\r\n\t\t        var filter = _super.prototype.toJSON.call(this);\r\n\t\t        filter.operator = this.operator;\r\n\t\t        filter.values = this.values;\r\n\t\t        filter.target = this.target;\r\n\t\t        return filter;\r\n\t\t    };\r\n\t\t    TupleFilter.schemaUrl = \"http://powerbi.com/product/schema#tuple\";\r\n\t\t    return TupleFilter;\r\n\t\t}(Filter));\r\n\t\texports.TupleFilter = TupleFilter;\r\n\t\tvar AdvancedFilter = /** @class */ (function (_super) {\r\n\t\t    __extends(AdvancedFilter, _super);\r\n\t\t    function AdvancedFilter(target, logicalOperator) {\r\n\t\t        var conditions = [];\r\n\t\t        for (var _i = 2; _i < arguments.length; _i++) {\r\n\t\t            conditions[_i - 2] = arguments[_i];\r\n\t\t        }\r\n\t\t        var _this = _super.call(this, target, FilterType.Advanced) || this;\r\n\t\t        _this.schemaUrl = AdvancedFilter.schemaUrl;\r\n\t\t        // Guard statements\r\n\t\t        if (typeof logicalOperator !== \"string\" || logicalOperator.length === 0) {\r\n\t\t            // TODO: It would be nicer to list out the possible logical operators.\r\n\t\t            throw new Error(\"logicalOperator must be a valid operator, You passed: \" + logicalOperator);\r\n\t\t        }\r\n\t\t        _this.logicalOperator = logicalOperator;\r\n\t\t        var extractedConditions;\r\n\t\t        /**\r\n\t\t         * Accept conditions as array instead of as individual arguments\r\n\t\t         * new AdvancedFilter('a', 'b', \"And\", { value: 1, operator: \"Equals\" }, { value: 2, operator: \"IsGreaterThan\" });\r\n\t\t         * new AdvancedFilter('a', 'b', \"And\", [{ value: 1, operator: \"Equals\" }, { value: 2, operator: \"IsGreaterThan\" }]);\r\n\t\t         */\r\n\t\t        if (Array.isArray(conditions[0])) {\r\n\t\t            extractedConditions = conditions[0];\r\n\t\t        }\r\n\t\t        else {\r\n\t\t            extractedConditions = conditions;\r\n\t\t        }\r\n\t\t        if (extractedConditions.length === 0) {\r\n\t\t            throw new Error(\"conditions must be a non-empty array. You passed: \" + conditions);\r\n\t\t        }\r\n\t\t        if (extractedConditions.length > 2) {\r\n\t\t            throw new Error(\"AdvancedFilters may not have more than two conditions. You passed: \" + conditions.length);\r\n\t\t        }\r\n\t\t        if (extractedConditions.length === 1 && logicalOperator !== \"And\") {\r\n\t\t            throw new Error(\"Logical Operator must be \\\"And\\\" when there is only one condition provided\");\r\n\t\t        }\r\n\t\t        _this.conditions = extractedConditions;\r\n\t\t        return _this;\r\n\t\t    }\r\n\t\t    AdvancedFilter.prototype.toJSON = function () {\r\n\t\t        var filter = _super.prototype.toJSON.call(this);\r\n\t\t        filter.logicalOperator = this.logicalOperator;\r\n\t\t        filter.conditions = this.conditions;\r\n\t\t        return filter;\r\n\t\t    };\r\n\t\t    AdvancedFilter.schemaUrl = \"http://powerbi.com/product/schema#advanced\";\r\n\t\t    return AdvancedFilter;\r\n\t\t}(Filter));\r\n\t\texports.AdvancedFilter = AdvancedFilter;\r\n\t\tfunction isFilterKeyColumnsTarget(target) {\r\n\t\t    return isColumn(target) && !!target.keys;\r\n\t\t}\r\n\t\texports.isFilterKeyColumnsTarget = isFilterKeyColumnsTarget;\r\n\t\tfunction isBasicFilterWithKeys(filter) {\r\n\t\t    return getFilterType(filter) === FilterType.Basic && !!filter.keyValues;\r\n\t\t}\r\n\t\texports.isBasicFilterWithKeys = isBasicFilterWithKeys;\r\n\t\tfunction getFilterType(filter) {\r\n\t\t    if (filter.filterType) {\r\n\t\t        return filter.filterType;\r\n\t\t    }\r\n\t\t    var basicFilter = filter;\r\n\t\t    var advancedFilter = filter;\r\n\t\t    if ((typeof basicFilter.operator === \"string\")\r\n\t\t        && (Array.isArray(basicFilter.values))) {\r\n\t\t        return FilterType.Basic;\r\n\t\t    }\r\n\t\t    else if ((typeof advancedFilter.logicalOperator === \"string\")\r\n\t\t        && (Array.isArray(advancedFilter.conditions))) {\r\n\t\t        return FilterType.Advanced;\r\n\t\t    }\r\n\t\t    else {\r\n\t\t        return FilterType.Unknown;\r\n\t\t    }\r\n\t\t}\r\n\t\texports.getFilterType = getFilterType;\r\n\t\tfunction isMeasure(arg) {\r\n\t\t    return arg.table !== undefined && arg.measure !== undefined;\r\n\t\t}\r\n\t\texports.isMeasure = isMeasure;\r\n\t\tfunction isColumn(arg) {\r\n\t\t    return !!(arg.table && arg.column && !arg.aggregationFunction);\r\n\t\t}\r\n\t\texports.isColumn = isColumn;\r\n\t\tfunction isHierarchyLevel(arg) {\r\n\t\t    return !!(arg.table && arg.hierarchy && arg.hierarchyLevel && !arg.aggregationFunction);\r\n\t\t}\r\n\t\texports.isHierarchyLevel = isHierarchyLevel;\r\n\t\tfunction isHierarchyLevelAggr(arg) {\r\n\t\t    return !!(arg.table && arg.hierarchy && arg.hierarchyLevel && arg.aggregationFunction);\r\n\t\t}\r\n\t\texports.isHierarchyLevelAggr = isHierarchyLevelAggr;\r\n\t\tfunction isColumnAggr(arg) {\r\n\t\t    return !!(arg.table && arg.column && arg.aggregationFunction);\r\n\t\t}\r\n\t\texports.isColumnAggr = isColumnAggr;\r\n\t\tvar QnaMode;\r\n\t\t(function (QnaMode) {\r\n\t\t    QnaMode[QnaMode[\"Interactive\"] = 0] = \"Interactive\";\r\n\t\t    QnaMode[QnaMode[\"ResultOnly\"] = 1] = \"ResultOnly\";\r\n\t\t})(QnaMode = exports.QnaMode || (exports.QnaMode = {}));\r\n\t\tvar ExportDataType;\r\n\t\t(function (ExportDataType) {\r\n\t\t    ExportDataType[ExportDataType[\"Summarized\"] = 0] = \"Summarized\";\r\n\t\t    ExportDataType[ExportDataType[\"Underlying\"] = 1] = \"Underlying\";\r\n\t\t})(ExportDataType = exports.ExportDataType || (exports.ExportDataType = {}));\r\n\t\tvar BookmarksPlayMode;\r\n\t\t(function (BookmarksPlayMode) {\r\n\t\t    BookmarksPlayMode[BookmarksPlayMode[\"Off\"] = 0] = \"Off\";\r\n\t\t    BookmarksPlayMode[BookmarksPlayMode[\"Presentation\"] = 1] = \"Presentation\";\r\n\t\t})(BookmarksPlayMode = exports.BookmarksPlayMode || (exports.BookmarksPlayMode = {}));\r\n\t\t// This is not an enum because enum strings require\r\n\t\t// us to upgrade typeScript version and change SDK build definition\r\n\t\texports.CommonErrorCodes = {\r\n\t\t    TokenExpired: 'TokenExpired',\r\n\t\t    NotFound: 'PowerBIEntityNotFound',\r\n\t\t    InvalidParameters: 'Invalid parameters',\r\n\t\t    LoadReportFailed: 'LoadReportFailed',\r\n\t\t    NotAuthorized: 'PowerBINotAuthorizedException',\r\n\t\t    FailedToLoadModel: 'ExplorationContainer_FailedToLoadModel_DefaultDetails',\r\n\t\t};\r\n\t\texports.TextAlignment = {\r\n\t\t    Left: 'left',\r\n\t\t    Center: 'center',\r\n\t\t    Right: 'right',\r\n\t\t};\r\n\t\texports.LegendPosition = {\r\n\t\t    Top: 'Top',\r\n\t\t    Bottom: 'Bottom',\r\n\t\t    Right: 'Right',\r\n\t\t    Left: 'Left',\r\n\t\t    TopCenter: 'TopCenter',\r\n\t\t    BottomCenter: 'BottomCenter',\r\n\t\t    RightCenter: 'RightCenter',\r\n\t\t    LeftCenter: 'LeftCenter',\r\n\t\t};\r\n\t\tvar SortDirection;\r\n\t\t(function (SortDirection) {\r\n\t\t    SortDirection[SortDirection[\"Ascending\"] = 1] = \"Ascending\";\r\n\t\t    SortDirection[SortDirection[\"Descending\"] = 2] = \"Descending\";\r\n\t\t})(SortDirection = exports.SortDirection || (exports.SortDirection = {}));\r\n\t\tvar Selector = /** @class */ (function () {\r\n\t\t    function Selector(schema) {\r\n\t\t        this.$schema = schema;\r\n\t\t    }\r\n\t\t    Selector.prototype.toJSON = function () {\r\n\t\t        return {\r\n\t\t            $schema: this.$schema\r\n\t\t        };\r\n\t\t    };\r\n\t\t    ;\r\n\t\t    return Selector;\r\n\t\t}());\r\n\t\texports.Selector = Selector;\r\n\t\tvar PageSelector = /** @class */ (function (_super) {\r\n\t\t    __extends(PageSelector, _super);\r\n\t\t    function PageSelector(pageName) {\r\n\t\t        var _this = _super.call(this, PageSelector.schemaUrl) || this;\r\n\t\t        _this.pageName = pageName;\r\n\t\t        return _this;\r\n\t\t    }\r\n\t\t    PageSelector.prototype.toJSON = function () {\r\n\t\t        var selector = _super.prototype.toJSON.call(this);\r\n\t\t        selector.pageName = this.pageName;\r\n\t\t        return selector;\r\n\t\t    };\r\n\t\t    PageSelector.schemaUrl = \"http://powerbi.com/product/schema#pageSelector\";\r\n\t\t    return PageSelector;\r\n\t\t}(Selector));\r\n\t\texports.PageSelector = PageSelector;\r\n\t\tvar VisualSelector = /** @class */ (function (_super) {\r\n\t\t    __extends(VisualSelector, _super);\r\n\t\t    function VisualSelector(visualName) {\r\n\t\t        var _this = _super.call(this, VisualSelector.schemaUrl) || this;\r\n\t\t        _this.visualName = visualName;\r\n\t\t        return _this;\r\n\t\t    }\r\n\t\t    VisualSelector.prototype.toJSON = function () {\r\n\t\t        var selector = _super.prototype.toJSON.call(this);\r\n\t\t        selector.visualName = this.visualName;\r\n\t\t        return selector;\r\n\t\t    };\r\n\t\t    VisualSelector.schemaUrl = \"http://powerbi.com/product/schema#visualSelector\";\r\n\t\t    return VisualSelector;\r\n\t\t}(Selector));\r\n\t\texports.VisualSelector = VisualSelector;\r\n\t\tvar VisualTypeSelector = /** @class */ (function (_super) {\r\n\t\t    __extends(VisualTypeSelector, _super);\r\n\t\t    function VisualTypeSelector(visualType) {\r\n\t\t        var _this = _super.call(this, VisualSelector.schemaUrl) || this;\r\n\t\t        _this.visualType = visualType;\r\n\t\t        return _this;\r\n\t\t    }\r\n\t\t    VisualTypeSelector.prototype.toJSON = function () {\r\n\t\t        var selector = _super.prototype.toJSON.call(this);\r\n\t\t        selector.visualType = this.visualType;\r\n\t\t        return selector;\r\n\t\t    };\r\n\t\t    VisualTypeSelector.schemaUrl = \"http://powerbi.com/product/schema#visualTypeSelector\";\r\n\t\t    return VisualTypeSelector;\r\n\t\t}(Selector));\r\n\t\texports.VisualTypeSelector = VisualTypeSelector;\r\n\t\tvar SlicerTargetSelector = /** @class */ (function (_super) {\r\n\t\t    __extends(SlicerTargetSelector, _super);\r\n\t\t    function SlicerTargetSelector(target) {\r\n\t\t        var _this = _super.call(this, VisualSelector.schemaUrl) || this;\r\n\t\t        _this.target = target;\r\n\t\t        return _this;\r\n\t\t    }\r\n\t\t    SlicerTargetSelector.prototype.toJSON = function () {\r\n\t\t        var selector = _super.prototype.toJSON.call(this);\r\n\t\t        selector.target = this.target;\r\n\t\t        return selector;\r\n\t\t    };\r\n\t\t    SlicerTargetSelector.schemaUrl = \"http://powerbi.com/product/schema#slicerTargetSelector\";\r\n\t\t    return SlicerTargetSelector;\r\n\t\t}(Selector));\r\n\t\texports.SlicerTargetSelector = SlicerTargetSelector;\r\n\t\tvar CommandDisplayOption;\r\n\t\t(function (CommandDisplayOption) {\r\n\t\t    CommandDisplayOption[CommandDisplayOption[\"Enabled\"] = 0] = \"Enabled\";\r\n\t\t    CommandDisplayOption[CommandDisplayOption[\"Disabled\"] = 1] = \"Disabled\";\r\n\t\t    CommandDisplayOption[CommandDisplayOption[\"Hidden\"] = 2] = \"Hidden\";\r\n\t\t})(CommandDisplayOption = exports.CommandDisplayOption || (exports.CommandDisplayOption = {}));\r\n\t\t/*\r\n\t\t * Visual CRUD\r\n\t\t */\r\n\t\tvar VisualDataRoleKind;\r\n\t\t(function (VisualDataRoleKind) {\r\n\t\t    // Indicates that the role should be bound to something that evaluates to a grouping of values.\r\n\t\t    VisualDataRoleKind[VisualDataRoleKind[\"Grouping\"] = 0] = \"Grouping\";\r\n\t\t    // Indicates that the role should be bound to something that evaluates to a single value in a scope.\r\n\t\t    VisualDataRoleKind[VisualDataRoleKind[\"Measure\"] = 1] = \"Measure\";\r\n\t\t    // Indicates that the role can be bound to either Grouping or Measure.\r\n\t\t    VisualDataRoleKind[VisualDataRoleKind[\"GroupingOrMeasure\"] = 2] = \"GroupingOrMeasure\";\r\n\t\t})(VisualDataRoleKind = exports.VisualDataRoleKind || (exports.VisualDataRoleKind = {}));\r\n\t\t// Indicates the visual preference on Grouping or Measure. Only applicable if kind is GroupingOrMeasure.\r\n\t\tvar VisualDataRoleKindPreference;\r\n\t\t(function (VisualDataRoleKindPreference) {\r\n\t\t    VisualDataRoleKindPreference[VisualDataRoleKindPreference[\"Measure\"] = 0] = \"Measure\";\r\n\t\t    VisualDataRoleKindPreference[VisualDataRoleKindPreference[\"Grouping\"] = 1] = \"Grouping\";\r\n\t\t})(VisualDataRoleKindPreference = exports.VisualDataRoleKindPreference || (exports.VisualDataRoleKindPreference = {}));\r\n\t\tfunction normalizeError(error) {\r\n\t\t    var message = error.message;\r\n\t\t    if (!message) {\r\n\t\t        message = error.path + \" is invalid. Not meeting \" + error.keyword + \" constraint\";\r\n\t\t    }\r\n\t\t    return {\r\n\t\t        message: message\r\n\t\t    };\r\n\t\t}\r\n\t\tfunction validateVisualSelector(input) {\r\n\t\t    var errors = exports.Validators.visualSelectorValidator.validate(input);\r\n\t\t    return errors ? errors.map(normalizeError) : undefined;\r\n\t\t}\r\n\t\texports.validateVisualSelector = validateVisualSelector;\r\n\t\tfunction validateSlicer(input) {\r\n\t\t    var errors = exports.Validators.slicerValidator.validate(input);\r\n\t\t    return errors ? errors.map(normalizeError) : undefined;\r\n\t\t}\r\n\t\texports.validateSlicer = validateSlicer;\r\n\t\tfunction validateSlicerState(input) {\r\n\t\t    var errors = exports.Validators.slicerStateValidator.validate(input);\r\n\t\t    return errors ? errors.map(normalizeError) : undefined;\r\n\t\t}\r\n\t\texports.validateSlicerState = validateSlicerState;\r\n\t\tfunction validatePlayBookmarkRequest(input) {\r\n\t\t    var errors = exports.Validators.playBookmarkRequestValidator.validate(input);\r\n\t\t    return errors ? errors.map(normalizeError) : undefined;\r\n\t\t}\r\n\t\texports.validatePlayBookmarkRequest = validatePlayBookmarkRequest;\r\n\t\tfunction validateAddBookmarkRequest(input) {\r\n\t\t    var errors = exports.Validators.addBookmarkRequestValidator.validate(input);\r\n\t\t    return errors ? errors.map(normalizeError) : undefined;\r\n\t\t}\r\n\t\texports.validateAddBookmarkRequest = validateAddBookmarkRequest;\r\n\t\tfunction validateApplyBookmarkByNameRequest(input) {\r\n\t\t    var errors = exports.Validators.applyBookmarkByNameRequestValidator.validate(input);\r\n\t\t    return errors ? errors.map(normalizeError) : undefined;\r\n\t\t}\r\n\t\texports.validateApplyBookmarkByNameRequest = validateApplyBookmarkByNameRequest;\r\n\t\tfunction validateApplyBookmarkStateRequest(input) {\r\n\t\t    var errors = exports.Validators.applyBookmarkStateRequestValidator.validate(input);\r\n\t\t    return errors ? errors.map(normalizeError) : undefined;\r\n\t\t}\r\n\t\texports.validateApplyBookmarkStateRequest = validateApplyBookmarkStateRequest;\r\n\t\tfunction validateSettings(input) {\r\n\t\t    var errors = exports.Validators.settingsValidator.validate(input);\r\n\t\t    return errors ? errors.map(normalizeError) : undefined;\r\n\t\t}\r\n\t\texports.validateSettings = validateSettings;\r\n\t\tfunction validateCustomPageSize(input) {\r\n\t\t    var errors = exports.Validators.customPageSizeValidator.validate(input);\r\n\t\t    return errors ? errors.map(normalizeError) : undefined;\r\n\t\t}\r\n\t\texports.validateCustomPageSize = validateCustomPageSize;\r\n\t\tfunction validateExtension(input) {\r\n\t\t    var errors = exports.Validators.extensionValidator.validate(input);\r\n\t\t    return errors ? errors.map(normalizeError) : undefined;\r\n\t\t}\r\n\t\texports.validateExtension = validateExtension;\r\n\t\tfunction validateReportLoad(input) {\r\n\t\t    var errors = exports.Validators.reportLoadValidator.validate(input);\r\n\t\t    return errors ? errors.map(normalizeError) : undefined;\r\n\t\t}\r\n\t\texports.validateReportLoad = validateReportLoad;\r\n\t\tfunction validateCreateReport(input) {\r\n\t\t    var errors = exports.Validators.reportCreateValidator.validate(input);\r\n\t\t    return errors ? errors.map(normalizeError) : undefined;\r\n\t\t}\r\n\t\texports.validateCreateReport = validateCreateReport;\r\n\t\tfunction validateDashboardLoad(input) {\r\n\t\t    var errors = exports.Validators.dashboardLoadValidator.validate(input);\r\n\t\t    return errors ? errors.map(normalizeError) : undefined;\r\n\t\t}\r\n\t\texports.validateDashboardLoad = validateDashboardLoad;\r\n\t\tfunction validateTileLoad(input) {\r\n\t\t    var errors = exports.Validators.tileLoadValidator.validate(input);\r\n\t\t    return errors ? errors.map(normalizeError) : undefined;\r\n\t\t}\r\n\t\texports.validateTileLoad = validateTileLoad;\r\n\t\tfunction validatePage(input) {\r\n\t\t    var errors = exports.Validators.pageValidator.validate(input);\r\n\t\t    return errors ? errors.map(normalizeError) : undefined;\r\n\t\t}\r\n\t\texports.validatePage = validatePage;\r\n\t\tfunction validateFilter(input) {\r\n\t\t    var errors = exports.Validators.filtersValidator.validate(input);\r\n\t\t    return errors ? errors.map(normalizeError) : undefined;\r\n\t\t}\r\n\t\texports.validateFilter = validateFilter;\r\n\t\tfunction validateSaveAsParameters(input) {\r\n\t\t    var errors = exports.Validators.saveAsParametersValidator.validate(input);\r\n\t\t    return errors ? errors.map(normalizeError) : undefined;\r\n\t\t}\r\n\t\texports.validateSaveAsParameters = validateSaveAsParameters;\r\n\t\tfunction validateLoadQnaConfiguration(input) {\r\n\t\t    var errors = exports.Validators.loadQnaValidator.validate(input);\r\n\t\t    return errors ? errors.map(normalizeError) : undefined;\r\n\t\t}\r\n\t\texports.validateLoadQnaConfiguration = validateLoadQnaConfiguration;\r\n\t\tfunction validateQnaInterpretInputData(input) {\r\n\t\t    var errors = exports.Validators.qnaInterpretInputDataValidator.validate(input);\r\n\t\t    return errors ? errors.map(normalizeError) : undefined;\r\n\t\t}\r\n\t\texports.validateQnaInterpretInputData = validateQnaInterpretInputData;\r\n\t\tfunction validateExportDataRequest(input) {\r\n\t\t    var errors = exports.Validators.exportDataRequestValidator.validate(input);\r\n\t\t    return errors ? errors.map(normalizeError) : undefined;\r\n\t\t}\r\n\t\texports.validateExportDataRequest = validateExportDataRequest;\r\n\t\tfunction validateVisualHeader(input) {\r\n\t\t    var errors = exports.Validators.visualHeaderValidator.validate(input);\r\n\t\t    return errors ? errors.map(normalizeError) : undefined;\r\n\t\t}\r\n\t\texports.validateVisualHeader = validateVisualHeader;\r\n\t\tfunction validateVisualSettings(input) {\r\n\t\t    var errors = exports.Validators.visualSettingsValidator.validate(input);\r\n\t\t    return errors ? errors.map(normalizeError) : undefined;\r\n\t\t}\r\n\t\texports.validateVisualSettings = validateVisualSettings;\r\n\t\tfunction validateCommandsSettings(input) {\r\n\t\t    var errors = exports.Validators.commandsSettingsValidator.validate(input);\r\n\t\t    return errors ? errors.map(normalizeError) : undefined;\r\n\t\t}\r\n\t\texports.validateCommandsSettings = validateCommandsSettings;\r\n\t\tfunction validateCustomTheme(input) {\r\n\t\t    var errors = exports.Validators.customThemeValidator.validate(input);\r\n\t\t    return errors ? errors.map(normalizeError) : undefined;\r\n\t\t}\r\n\t\texports.validateCustomTheme = validateCustomTheme;\r\n\t\n\t\n\t/***/ }),\n\t/* 1 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\tvar typeValidator_1 = __webpack_require__(2);\r\n\t\tvar extensionsValidator_1 = __webpack_require__(3);\r\n\t\tvar settingsValidator_1 = __webpack_require__(5);\r\n\t\tvar bookmarkValidator_1 = __webpack_require__(6);\r\n\t\tvar filtersValidator_1 = __webpack_require__(7);\r\n\t\tvar fieldRequiredValidator_1 = __webpack_require__(8);\r\n\t\tvar anyOfValidator_1 = __webpack_require__(9);\r\n\t\tvar reportLoadValidator_1 = __webpack_require__(10);\r\n\t\tvar reportCreateValidator_1 = __webpack_require__(11);\r\n\t\tvar dashboardLoadValidator_1 = __webpack_require__(12);\r\n\t\tvar tileLoadValidator_1 = __webpack_require__(13);\r\n\t\tvar pageValidator_1 = __webpack_require__(14);\r\n\t\tvar qnaValidator_1 = __webpack_require__(15);\r\n\t\tvar saveAsParametersValidator_1 = __webpack_require__(16);\r\n\t\tvar mapValidator_1 = __webpack_require__(17);\r\n\t\tvar layoutValidator_1 = __webpack_require__(18);\r\n\t\tvar exportDataValidator_1 = __webpack_require__(19);\r\n\t\tvar selectorsValidator_1 = __webpack_require__(20);\r\n\t\tvar slicersValidator_1 = __webpack_require__(21);\r\n\t\tvar visualSettingsValidator_1 = __webpack_require__(22);\r\n\t\tvar commandsSettingsValidator_1 = __webpack_require__(23);\r\n\t\tvar customThemeValidator_1 = __webpack_require__(24);\r\n\t\texports.Validators = {\r\n\t\t    addBookmarkRequestValidator: new bookmarkValidator_1.AddBookmarkRequestValidator(),\r\n\t\t    advancedFilterTypeValidator: new typeValidator_1.EnumValidator([0]),\r\n\t\t    advancedFilterValidator: new filtersValidator_1.AdvancedFilterValidator(),\r\n\t\t    anyArrayValidator: new typeValidator_1.ArrayValidator([new anyOfValidator_1.AnyOfValidator([new typeValidator_1.StringValidator(), new typeValidator_1.NumberValidator(), new typeValidator_1.BooleanValidator()])]),\r\n\t\t    anyFilterValidator: new anyOfValidator_1.AnyOfValidator([new filtersValidator_1.BasicFilterValidator(), new filtersValidator_1.AdvancedFilterValidator(), new filtersValidator_1.IncludeExcludeFilterValidator(), new filtersValidator_1.NotSupportedFilterValidator(), new filtersValidator_1.RelativeDateFilterValidator(), new filtersValidator_1.TopNFilterValidator()]),\r\n\t\t    anyValueValidator: new anyOfValidator_1.AnyOfValidator([new typeValidator_1.StringValidator(), new typeValidator_1.NumberValidator(), new typeValidator_1.BooleanValidator()]),\r\n\t\t    applyBookmarkByNameRequestValidator: new bookmarkValidator_1.ApplyBookmarkByNameRequestValidator(),\r\n\t\t    applyBookmarkStateRequestValidator: new bookmarkValidator_1.ApplyBookmarkStateRequestValidator(),\r\n\t\t    applyBookmarkValidator: new anyOfValidator_1.AnyOfValidator([new bookmarkValidator_1.ApplyBookmarkByNameRequestValidator(), new bookmarkValidator_1.ApplyBookmarkStateRequestValidator()]),\r\n\t\t    backgroundValidator: new typeValidator_1.EnumValidator([0, 1]),\r\n\t\t    basicFilterTypeValidator: new typeValidator_1.EnumValidator([1]),\r\n\t\t    basicFilterValidator: new filtersValidator_1.BasicFilterValidator(),\r\n\t\t    booleanArrayValidator: new typeValidator_1.BooleanArrayValidator(),\r\n\t\t    booleanValidator: new typeValidator_1.BooleanValidator(),\r\n\t\t    commandDisplayOptionValidator: new typeValidator_1.EnumValidator([0, 1, 2]),\r\n\t\t    commandExtensionSelectorValidator: new anyOfValidator_1.AnyOfValidator([new selectorsValidator_1.VisualSelectorValidator(), new selectorsValidator_1.VisualTypeSelectorValidator()]),\r\n\t\t    commandExtensionValidator: new extensionsValidator_1.CommandExtensionValidator(),\r\n\t\t    commandsSettingsArrayValidator: new typeValidator_1.ArrayValidator([new commandsSettingsValidator_1.CommandsSettingsValidator()]),\r\n\t\t    commandsSettingsValidator: new commandsSettingsValidator_1.CommandsSettingsValidator(),\r\n\t\t    conditionItemValidator: new filtersValidator_1.ConditionItemValidator(),\r\n\t\t    customLayoutDisplayOptionValidator: new typeValidator_1.EnumValidator([0, 1, 2]),\r\n\t\t    customLayoutValidator: new layoutValidator_1.CustomLayoutValidator(),\r\n\t\t    customPageSizeValidator: new pageValidator_1.CustomPageSizeValidator(),\r\n\t\t    customThemeValidator: new customThemeValidator_1.CustomThemeValidator(),\r\n\t\t    dashboardLoadValidator: new dashboardLoadValidator_1.DashboardLoadValidator(),\r\n\t\t    displayStateModeValidator: new typeValidator_1.EnumValidator([0, 1]),\r\n\t\t    displayStateValidator: new layoutValidator_1.DisplayStateValidator(),\r\n\t\t    exportDataRequestValidator: new exportDataValidator_1.ExportDataRequestValidator(),\r\n\t\t    extensionArrayValidator: new typeValidator_1.ArrayValidator([new extensionsValidator_1.ExtensionValidator()]),\r\n\t\t    extensionPointsValidator: new extensionsValidator_1.ExtensionPointsValidator(),\r\n\t\t    extensionValidator: new extensionsValidator_1.ExtensionValidator(),\r\n\t\t    fieldRequiredValidator: new fieldRequiredValidator_1.FieldRequiredValidator(),\r\n\t\t    filterColumnTargetValidator: new filtersValidator_1.FilterColumnTargetValidator(),\r\n\t\t    filterConditionsValidator: new typeValidator_1.ArrayValidator([new filtersValidator_1.ConditionItemValidator()]),\r\n\t\t    filterHierarchyTargetValidator: new filtersValidator_1.FilterHierarchyTargetValidator(),\r\n\t\t    filterMeasureTargetValidator: new filtersValidator_1.FilterMeasureTargetValidator(),\r\n\t\t    filterTargetValidator: new anyOfValidator_1.AnyOfValidator([new filtersValidator_1.FilterColumnTargetValidator(), new filtersValidator_1.FilterHierarchyTargetValidator(), new filtersValidator_1.FilterMeasureTargetValidator()]),\r\n\t\t    filtersArrayValidator: new typeValidator_1.ArrayValidator([new anyOfValidator_1.AnyOfValidator([new filtersValidator_1.BasicFilterValidator(), new filtersValidator_1.AdvancedFilterValidator(), new filtersValidator_1.RelativeDateFilterValidator()])]),\r\n\t\t    filtersValidator: new filtersValidator_1.FilterValidator(),\r\n\t\t    includeExcludeFilterValidator: new filtersValidator_1.IncludeExcludeFilterValidator(),\r\n\t\t    includeExludeFilterTypeValidator: new typeValidator_1.EnumValidator([3]),\r\n\t\t    layoutTypeValidator: new typeValidator_1.EnumValidator([0, 1, 2, 3]),\r\n\t\t    loadQnaValidator: new qnaValidator_1.LoadQnaValidator(),\r\n\t\t    menuExtensionValidator: new extensionsValidator_1.MenuExtensionValidator(),\r\n\t\t    menuLocationValidator: new typeValidator_1.EnumValidator([0, 1]),\r\n\t\t    notSupportedFilterTypeValidator: new typeValidator_1.EnumValidator([2]),\r\n\t\t    notSupportedFilterValidator: new filtersValidator_1.NotSupportedFilterValidator(),\r\n\t\t    numberArrayValidator: new typeValidator_1.NumberArrayValidator(),\r\n\t\t    numberValidator: new typeValidator_1.NumberValidator(),\r\n\t\t    pageLayoutValidator: new mapValidator_1.MapValidator([new typeValidator_1.StringValidator()], [new layoutValidator_1.VisualLayoutValidator()]),\r\n\t\t    pageSizeTypeValidator: new typeValidator_1.EnumValidator([0, 1, 2, 3, 4, 5]),\r\n\t\t    pageSizeValidator: new pageValidator_1.PageSizeValidator(),\r\n\t\t    pageValidator: new pageValidator_1.PageValidator(),\r\n\t\t    pageViewFieldValidator: new pageValidator_1.PageViewFieldValidator(),\r\n\t\t    pagesLayoutValidator: new mapValidator_1.MapValidator([new typeValidator_1.StringValidator()], [new layoutValidator_1.PageLayoutValidator()]),\r\n\t\t    permissionsValidator: new typeValidator_1.EnumValidator([0, 1, 2, 4, 7]),\r\n\t\t    playBookmarkRequestValidator: new bookmarkValidator_1.PlayBookmarkRequestValidator(),\r\n\t\t    qnaInterpretInputDataValidator: new qnaValidator_1.QnaInterpretInputDataValidator(),\r\n\t\t    qnaSettingValidator: new qnaValidator_1.QnaSettingsValidator(),\r\n\t\t    relativeDateFilterOperatorValidator: new typeValidator_1.EnumValidator([0, 1, 2]),\r\n\t\t    relativeDateFilterTimeUnitTypeValidator: new typeValidator_1.EnumValidator([0, 1, 2, 3, 4, 5, 6]),\r\n\t\t    relativeDateFilterTypeValidator: new typeValidator_1.EnumValidator([4]),\r\n\t\t    relativeDateFilterValidator: new filtersValidator_1.RelativeDateFilterValidator(),\r\n\t\t    reportCreateValidator: new reportCreateValidator_1.ReportCreateValidator(),\r\n\t\t    reportLoadValidator: new reportLoadValidator_1.ReportLoadValidator(),\r\n\t\t    saveAsParametersValidator: new saveAsParametersValidator_1.SaveAsParametersValidator(),\r\n\t\t    settingsValidator: new settingsValidator_1.SettingsValidator(),\r\n\t\t    singleCommandSettingsValidator: new commandsSettingsValidator_1.SingleCommandSettingsValidator(),\r\n\t\t    slicerSelectorValidator: new anyOfValidator_1.AnyOfValidator([new selectorsValidator_1.VisualSelectorValidator(), new selectorsValidator_1.SlicerTargetSelectorValidator()]),\r\n\t\t    slicerStateValidator: new slicersValidator_1.SlicerStateValidator(),\r\n\t\t    slicerTargetValidator: new anyOfValidator_1.AnyOfValidator([new filtersValidator_1.FilterColumnTargetValidator(), new filtersValidator_1.FilterHierarchyTargetValidator(), new filtersValidator_1.FilterMeasureTargetValidator(), new filtersValidator_1.FilterKeyColumnsTargetValidator(), new filtersValidator_1.FilterKeyHierarchyTargetValidator()]),\r\n\t\t    slicerValidator: new slicersValidator_1.SlicerValidator(),\r\n\t\t    stringArrayValidator: new typeValidator_1.StringArrayValidator(),\r\n\t\t    stringValidator: new typeValidator_1.StringValidator(),\r\n\t\t    tileLoadValidator: new tileLoadValidator_1.TileLoadValidator(),\r\n\t\t    tokenTypeValidator: new typeValidator_1.EnumValidator([0, 1]),\r\n\t\t    topNFilterTypeValidator: new typeValidator_1.EnumValidator([5]),\r\n\t\t    topNFilterValidator: new filtersValidator_1.TopNFilterValidator(),\r\n\t\t    viewModeValidator: new typeValidator_1.EnumValidator([0, 1]),\r\n\t\t    visualCommandSelectorValidator: new anyOfValidator_1.AnyOfValidator([new selectorsValidator_1.VisualSelectorValidator(), new selectorsValidator_1.VisualTypeSelectorValidator()]),\r\n\t\t    visualHeaderSelectorValidator: new anyOfValidator_1.AnyOfValidator([new selectorsValidator_1.VisualSelectorValidator(), new selectorsValidator_1.VisualTypeSelectorValidator()]),\r\n\t\t    visualHeaderSettingsValidator: new visualSettingsValidator_1.VisualHeaderSettingsValidator(),\r\n\t\t    visualHeaderValidator: new visualSettingsValidator_1.VisualHeaderValidator(),\r\n\t\t    visualHeadersValidator: new typeValidator_1.ArrayValidator([new visualSettingsValidator_1.VisualHeaderValidator()]),\r\n\t\t    visualLayoutValidator: new layoutValidator_1.VisualLayoutValidator(),\r\n\t\t    visualSelectorValidator: new selectorsValidator_1.VisualSelectorValidator(),\r\n\t\t    visualSettingsValidator: new visualSettingsValidator_1.VisualSettingsValidator(),\r\n\t\t    visualTypeSelectorValidator: new selectorsValidator_1.VisualTypeSelectorValidator(),\r\n\t\t};\r\n\t\n\t\n\t/***/ }),\n\t/* 2 */\n\t/***/ (function(module, exports) {\n\t\n\t\tvar __extends = (this && this.__extends) || (function () {\r\n\t\t    var extendStatics = Object.setPrototypeOf ||\r\n\t\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t\t    return function (d, b) {\r\n\t\t        extendStatics(d, b);\r\n\t\t        function __() { this.constructor = d; }\r\n\t\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t\t    };\r\n\t\t})();\r\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\tvar ObjectValidator = /** @class */ (function () {\r\n\t\t    function ObjectValidator() {\r\n\t\t    }\r\n\t\t    ObjectValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        if (typeof input !== \"object\" || Array.isArray(input)) {\r\n\t\t            return [{\r\n\t\t                    message: field !== undefined ? field + \" must be an object\" : \"input must be an object\",\r\n\t\t                    path: path,\r\n\t\t                    keyword: \"type\"\r\n\t\t                }];\r\n\t\t        }\r\n\t\t        return null;\r\n\t\t    };\r\n\t\t    return ObjectValidator;\r\n\t\t}());\r\n\t\texports.ObjectValidator = ObjectValidator;\r\n\t\tvar ArrayValidator = /** @class */ (function () {\r\n\t\t    function ArrayValidator(itemValidators) {\r\n\t\t        this.itemValidators = itemValidators;\r\n\t\t    }\r\n\t\t    ArrayValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        if (!(Array.isArray(input))) {\r\n\t\t            return [{\r\n\t\t                    message: field + \" property is invalid\",\r\n\t\t                    path: (path ? path + \".\" : \"\") + field,\r\n\t\t                    keyword: \"type\"\r\n\t\t                }];\r\n\t\t        }\r\n\t\t        for (var i = 0; i < input.length; i++) {\r\n\t\t            var fieldsPath = (path ? path + \".\" : \"\") + field + \".\" + i;\r\n\t\t            for (var _i = 0, _a = this.itemValidators; _i < _a.length; _i++) {\r\n\t\t                var validator = _a[_i];\r\n\t\t                var errors = validator.validate(input[i], fieldsPath, field);\r\n\t\t                if (errors) {\r\n\t\t                    return [{\r\n\t\t                            message: field + \" property is invalid\",\r\n\t\t                            path: (path ? path + \".\" : \"\") + field,\r\n\t\t                            keyword: \"type\"\r\n\t\t                        }];\r\n\t\t                }\r\n\t\t            }\r\n\t\t        }\r\n\t\t        return null;\r\n\t\t    };\r\n\t\t    return ArrayValidator;\r\n\t\t}());\r\n\t\texports.ArrayValidator = ArrayValidator;\r\n\t\tvar TypeValidator = /** @class */ (function () {\r\n\t\t    function TypeValidator(expectedType) {\r\n\t\t        this.expectedType = expectedType;\r\n\t\t    }\r\n\t\t    TypeValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        if (!(typeof input === this.expectedType)) {\r\n\t\t            return [{\r\n\t\t                    message: field + \" must be a \" + this.expectedType,\r\n\t\t                    path: (path ? path + \".\" : \"\") + field,\r\n\t\t                    keyword: \"type\"\r\n\t\t                }];\r\n\t\t        }\r\n\t\t        return null;\r\n\t\t    };\r\n\t\t    return TypeValidator;\r\n\t\t}());\r\n\t\texports.TypeValidator = TypeValidator;\r\n\t\tvar StringValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(StringValidator, _super);\r\n\t\t    function StringValidator() {\r\n\t\t        return _super.call(this, \"string\") || this;\r\n\t\t    }\r\n\t\t    return StringValidator;\r\n\t\t}(TypeValidator));\r\n\t\texports.StringValidator = StringValidator;\r\n\t\tvar BooleanValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(BooleanValidator, _super);\r\n\t\t    function BooleanValidator() {\r\n\t\t        return _super.call(this, \"boolean\") || this;\r\n\t\t    }\r\n\t\t    return BooleanValidator;\r\n\t\t}(TypeValidator));\r\n\t\texports.BooleanValidator = BooleanValidator;\r\n\t\tvar NumberValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(NumberValidator, _super);\r\n\t\t    function NumberValidator() {\r\n\t\t        return _super.call(this, \"number\") || this;\r\n\t\t    }\r\n\t\t    return NumberValidator;\r\n\t\t}(TypeValidator));\r\n\t\texports.NumberValidator = NumberValidator;\r\n\t\tvar ValueValidator = /** @class */ (function () {\r\n\t\t    function ValueValidator(possibleValues) {\r\n\t\t        this.possibleValues = possibleValues;\r\n\t\t    }\r\n\t\t    ValueValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        if (this.possibleValues.indexOf(input) < 0) {\r\n\t\t            return [{\r\n\t\t                    message: field + \" property is invalid\",\r\n\t\t                    path: (path ? path + \".\" : \"\") + field,\r\n\t\t                    keyword: \"invalid\"\r\n\t\t                }];\r\n\t\t        }\r\n\t\t        return null;\r\n\t\t    };\r\n\t\t    return ValueValidator;\r\n\t\t}());\r\n\t\texports.ValueValidator = ValueValidator;\r\n\t\tvar SchemaValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(SchemaValidator, _super);\r\n\t\t    function SchemaValidator(schemaValue) {\r\n\t\t        var _this = _super.call(this, [schemaValue]) || this;\r\n\t\t        _this.schemaValue = schemaValue;\r\n\t\t        return _this;\r\n\t\t    }\r\n\t\t    SchemaValidator.prototype.validate = function (input, path, field) {\r\n\t\t        return _super.prototype.validate.call(this, input, path, field);\r\n\t\t    };\r\n\t\t    return SchemaValidator;\r\n\t\t}(ValueValidator));\r\n\t\texports.SchemaValidator = SchemaValidator;\r\n\t\tvar EnumValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(EnumValidator, _super);\r\n\t\t    function EnumValidator(possibleValues) {\r\n\t\t        var _this = _super.call(this) || this;\r\n\t\t        _this.possibleValues = possibleValues;\r\n\t\t        return _this;\r\n\t\t    }\r\n\t\t    EnumValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var valueValidator = new ValueValidator(this.possibleValues);\r\n\t\t        return valueValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return EnumValidator;\r\n\t\t}(NumberValidator));\r\n\t\texports.EnumValidator = EnumValidator;\r\n\t\tvar StringArrayValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(StringArrayValidator, _super);\r\n\t\t    function StringArrayValidator() {\r\n\t\t        return _super.call(this, [new StringValidator()]) || this;\r\n\t\t    }\r\n\t\t    StringArrayValidator.prototype.validate = function (input, path, field) {\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return [{\r\n\t\t                    message: field + \" must be an array of strings\",\r\n\t\t                    path: (path ? path + \".\" : \"\") + field,\r\n\t\t                    keyword: \"type\"\r\n\t\t                }];\r\n\t\t        }\r\n\t\t        return null;\r\n\t\t    };\r\n\t\t    return StringArrayValidator;\r\n\t\t}(ArrayValidator));\r\n\t\texports.StringArrayValidator = StringArrayValidator;\r\n\t\tvar BooleanArrayValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(BooleanArrayValidator, _super);\r\n\t\t    function BooleanArrayValidator() {\r\n\t\t        return _super.call(this, [new BooleanValidator()]) || this;\r\n\t\t    }\r\n\t\t    BooleanArrayValidator.prototype.validate = function (input, path, field) {\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return [{\r\n\t\t                    message: field + \" must be an array of booleans\",\r\n\t\t                    path: (path ? path + \".\" : \"\") + field,\r\n\t\t                    keyword: \"type\"\r\n\t\t                }];\r\n\t\t        }\r\n\t\t        return null;\r\n\t\t    };\r\n\t\t    return BooleanArrayValidator;\r\n\t\t}(ArrayValidator));\r\n\t\texports.BooleanArrayValidator = BooleanArrayValidator;\r\n\t\tvar NumberArrayValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(NumberArrayValidator, _super);\r\n\t\t    function NumberArrayValidator() {\r\n\t\t        return _super.call(this, [new NumberValidator()]) || this;\r\n\t\t    }\r\n\t\t    NumberArrayValidator.prototype.validate = function (input, path, field) {\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return [{\r\n\t\t                    message: field + \" must be an array of numbers\",\r\n\t\t                    path: (path ? path + \".\" : \"\") + field,\r\n\t\t                    keyword: \"type\"\r\n\t\t                }];\r\n\t\t        }\r\n\t\t        return null;\r\n\t\t    };\r\n\t\t    return NumberArrayValidator;\r\n\t\t}(ArrayValidator));\r\n\t\texports.NumberArrayValidator = NumberArrayValidator;\r\n\t\n\t\n\t/***/ }),\n\t/* 3 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\tvar __extends = (this && this.__extends) || (function () {\r\n\t\t    var extendStatics = Object.setPrototypeOf ||\r\n\t\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t\t    return function (d, b) {\r\n\t\t        extendStatics(d, b);\r\n\t\t        function __() { this.constructor = d; }\r\n\t\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t\t    };\r\n\t\t})();\r\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\tvar validator_1 = __webpack_require__(1);\r\n\t\tvar multipleFieldsValidator_1 = __webpack_require__(4);\r\n\t\tvar typeValidator_1 = __webpack_require__(2);\r\n\t\tvar MenuExtensionValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(MenuExtensionValidator, _super);\r\n\t\t    function MenuExtensionValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    MenuExtensionValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"title\",\r\n\t\t                validators: [validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"icon\",\r\n\t\t                validators: [validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"menuLocation\",\r\n\t\t                validators: [validator_1.Validators.menuLocationValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return MenuExtensionValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.MenuExtensionValidator = MenuExtensionValidator;\r\n\t\tvar ExtensionPointsValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(ExtensionPointsValidator, _super);\r\n\t\t    function ExtensionPointsValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    ExtensionPointsValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"visualContextMenu\",\r\n\t\t                validators: [validator_1.Validators.menuExtensionValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"visualOptionsMenu\",\r\n\t\t                validators: [validator_1.Validators.menuExtensionValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return ExtensionPointsValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.ExtensionPointsValidator = ExtensionPointsValidator;\r\n\t\tvar ExtensionItemValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(ExtensionItemValidator, _super);\r\n\t\t    function ExtensionItemValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    ExtensionItemValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"name\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"extend\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.extensionPointsValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return ExtensionItemValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.ExtensionItemValidator = ExtensionItemValidator;\r\n\t\tvar CommandExtensionValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(CommandExtensionValidator, _super);\r\n\t\t    function CommandExtensionValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    CommandExtensionValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"title\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"icon\",\r\n\t\t                validators: [validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"selector\",\r\n\t\t                validators: [validator_1.Validators.commandExtensionSelectorValidator]\r\n\t\t            },\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return CommandExtensionValidator;\r\n\t\t}(ExtensionItemValidator));\r\n\t\texports.CommandExtensionValidator = CommandExtensionValidator;\r\n\t\tvar ExtensionValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(ExtensionValidator, _super);\r\n\t\t    function ExtensionValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    ExtensionValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"command\",\r\n\t\t                validators: [validator_1.Validators.commandExtensionValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return ExtensionValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.ExtensionValidator = ExtensionValidator;\r\n\t\n\t\n\t/***/ }),\n\t/* 4 */\n\t/***/ (function(module, exports) {\n\t\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\tvar MultipleFieldsValidator = /** @class */ (function () {\r\n\t\t    function MultipleFieldsValidator(fieldValidatorsPairs) {\r\n\t\t        this.fieldValidatorsPairs = fieldValidatorsPairs;\r\n\t\t    }\r\n\t\t    MultipleFieldsValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (!this.fieldValidatorsPairs) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var fieldsPath = path ? path + \".\" + field : field;\r\n\t\t        for (var _i = 0, _a = this.fieldValidatorsPairs; _i < _a.length; _i++) {\r\n\t\t            var fieldValidators = _a[_i];\r\n\t\t            for (var _b = 0, _c = fieldValidators.validators; _b < _c.length; _b++) {\r\n\t\t                var validator = _c[_b];\r\n\t\t                var errors = validator.validate(input[fieldValidators.field], fieldsPath, fieldValidators.field);\r\n\t\t                if (errors) {\r\n\t\t                    return errors;\r\n\t\t                }\r\n\t\t            }\r\n\t\t        }\r\n\t\t        return null;\r\n\t\t    };\r\n\t\t    return MultipleFieldsValidator;\r\n\t\t}());\r\n\t\texports.MultipleFieldsValidator = MultipleFieldsValidator;\r\n\t\n\t\n\t/***/ }),\n\t/* 5 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\tvar __extends = (this && this.__extends) || (function () {\r\n\t\t    var extendStatics = Object.setPrototypeOf ||\r\n\t\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t\t    return function (d, b) {\r\n\t\t        extendStatics(d, b);\r\n\t\t        function __() { this.constructor = d; }\r\n\t\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t\t    };\r\n\t\t})();\r\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\tvar validator_1 = __webpack_require__(1);\r\n\t\tvar multipleFieldsValidator_1 = __webpack_require__(4);\r\n\t\tvar typeValidator_1 = __webpack_require__(2);\r\n\t\tvar SettingsValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(SettingsValidator, _super);\r\n\t\t    function SettingsValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    SettingsValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"filterPaneEnabled\",\r\n\t\t                validators: [validator_1.Validators.booleanValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"navContentPaneEnabled\",\r\n\t\t                validators: [validator_1.Validators.booleanValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"bookmarksPaneEnabled\",\r\n\t\t                validators: [validator_1.Validators.booleanValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"useCustomSaveAsDialog\",\r\n\t\t                validators: [validator_1.Validators.booleanValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"extensions\",\r\n\t\t                validators: [validator_1.Validators.extensionArrayValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"layoutType\",\r\n\t\t                validators: [validator_1.Validators.layoutTypeValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"customLayout\",\r\n\t\t                validators: [validator_1.Validators.customLayoutValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"background\",\r\n\t\t                validators: [validator_1.Validators.backgroundValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"visualSettings\",\r\n\t\t                validators: [validator_1.Validators.visualSettingsValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"hideErrors\",\r\n\t\t                validators: [validator_1.Validators.booleanValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"commands\",\r\n\t\t                validators: [validator_1.Validators.commandsSettingsArrayValidator]\r\n\t\t            },\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return SettingsValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.SettingsValidator = SettingsValidator;\r\n\t\n\t\n\t/***/ }),\n\t/* 6 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\tvar __extends = (this && this.__extends) || (function () {\r\n\t\t    var extendStatics = Object.setPrototypeOf ||\r\n\t\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t\t    return function (d, b) {\r\n\t\t        extendStatics(d, b);\r\n\t\t        function __() { this.constructor = d; }\r\n\t\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t\t    };\r\n\t\t})();\r\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\tvar validator_1 = __webpack_require__(1);\r\n\t\tvar multipleFieldsValidator_1 = __webpack_require__(4);\r\n\t\tvar typeValidator_1 = __webpack_require__(2);\r\n\t\tvar PlayBookmarkRequestValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(PlayBookmarkRequestValidator, _super);\r\n\t\t    function PlayBookmarkRequestValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    PlayBookmarkRequestValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"playMode\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, new typeValidator_1.EnumValidator([0, 1])]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return PlayBookmarkRequestValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.PlayBookmarkRequestValidator = PlayBookmarkRequestValidator;\r\n\t\tvar AddBookmarkRequestValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(AddBookmarkRequestValidator, _super);\r\n\t\t    function AddBookmarkRequestValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    AddBookmarkRequestValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"state\",\r\n\t\t                validators: [validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"displayName\",\r\n\t\t                validators: [validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"apply\",\r\n\t\t                validators: [validator_1.Validators.booleanValidator]\r\n\t\t            },\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return AddBookmarkRequestValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.AddBookmarkRequestValidator = AddBookmarkRequestValidator;\r\n\t\tvar ApplyBookmarkByNameRequestValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(ApplyBookmarkByNameRequestValidator, _super);\r\n\t\t    function ApplyBookmarkByNameRequestValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    ApplyBookmarkByNameRequestValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"name\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return ApplyBookmarkByNameRequestValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.ApplyBookmarkByNameRequestValidator = ApplyBookmarkByNameRequestValidator;\r\n\t\tvar ApplyBookmarkStateRequestValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(ApplyBookmarkStateRequestValidator, _super);\r\n\t\t    function ApplyBookmarkStateRequestValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    ApplyBookmarkStateRequestValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"state\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return ApplyBookmarkStateRequestValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.ApplyBookmarkStateRequestValidator = ApplyBookmarkStateRequestValidator;\r\n\t\n\t\n\t/***/ }),\n\t/* 7 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\tvar __extends = (this && this.__extends) || (function () {\r\n\t\t    var extendStatics = Object.setPrototypeOf ||\r\n\t\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t\t    return function (d, b) {\r\n\t\t        extendStatics(d, b);\r\n\t\t        function __() { this.constructor = d; }\r\n\t\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t\t    };\r\n\t\t})();\r\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\tvar validator_1 = __webpack_require__(1);\r\n\t\tvar multipleFieldsValidator_1 = __webpack_require__(4);\r\n\t\tvar typeValidator_1 = __webpack_require__(2);\r\n\t\tvar FilterColumnTargetValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(FilterColumnTargetValidator, _super);\r\n\t\t    function FilterColumnTargetValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    FilterColumnTargetValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"table\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"column\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return FilterColumnTargetValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.FilterColumnTargetValidator = FilterColumnTargetValidator;\r\n\t\tvar FilterKeyColumnsTargetValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(FilterKeyColumnsTargetValidator, _super);\r\n\t\t    function FilterKeyColumnsTargetValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    FilterKeyColumnsTargetValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"keys\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringArrayValidator]\r\n\t\t            },\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return FilterKeyColumnsTargetValidator;\r\n\t\t}(FilterColumnTargetValidator));\r\n\t\texports.FilterKeyColumnsTargetValidator = FilterKeyColumnsTargetValidator;\r\n\t\tvar FilterHierarchyTargetValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(FilterHierarchyTargetValidator, _super);\r\n\t\t    function FilterHierarchyTargetValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    FilterHierarchyTargetValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"table\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"hierarchy\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"hierarchyLevel\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return FilterHierarchyTargetValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.FilterHierarchyTargetValidator = FilterHierarchyTargetValidator;\r\n\t\tvar FilterKeyHierarchyTargetValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(FilterKeyHierarchyTargetValidator, _super);\r\n\t\t    function FilterKeyHierarchyTargetValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    FilterKeyHierarchyTargetValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"keys\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringArrayValidator]\r\n\t\t            },\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return FilterKeyHierarchyTargetValidator;\r\n\t\t}(FilterHierarchyTargetValidator));\r\n\t\texports.FilterKeyHierarchyTargetValidator = FilterKeyHierarchyTargetValidator;\r\n\t\tvar FilterMeasureTargetValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(FilterMeasureTargetValidator, _super);\r\n\t\t    function FilterMeasureTargetValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    FilterMeasureTargetValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"table\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"measure\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return FilterMeasureTargetValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.FilterMeasureTargetValidator = FilterMeasureTargetValidator;\r\n\t\tvar BasicFilterValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(BasicFilterValidator, _super);\r\n\t\t    function BasicFilterValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    BasicFilterValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"target\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.filterTargetValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"operator\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"values\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.anyArrayValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"filterType\",\r\n\t\t                validators: [validator_1.Validators.basicFilterTypeValidator]\r\n\t\t            },\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return BasicFilterValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.BasicFilterValidator = BasicFilterValidator;\r\n\t\tvar AdvancedFilterValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(AdvancedFilterValidator, _super);\r\n\t\t    function AdvancedFilterValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    AdvancedFilterValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"target\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.filterTargetValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"logicalOperator\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"conditions\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.filterConditionsValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"filterType\",\r\n\t\t                validators: [validator_1.Validators.advancedFilterTypeValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return AdvancedFilterValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.AdvancedFilterValidator = AdvancedFilterValidator;\r\n\t\tvar RelativeDateFilterValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(RelativeDateFilterValidator, _super);\r\n\t\t    function RelativeDateFilterValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    RelativeDateFilterValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"target\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.filterTargetValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"operator\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.relativeDateFilterOperatorValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"timeUnitsCount\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.numberValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"timeUnitType\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.relativeDateFilterTimeUnitTypeValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"includeToday\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.booleanValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"filterType\",\r\n\t\t                validators: [validator_1.Validators.relativeDateFilterTypeValidator]\r\n\t\t            },\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return RelativeDateFilterValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.RelativeDateFilterValidator = RelativeDateFilterValidator;\r\n\t\tvar TopNFilterValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(TopNFilterValidator, _super);\r\n\t\t    function TopNFilterValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    TopNFilterValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"target\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.filterTargetValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"operator\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"itemCount\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.numberValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"filterType\",\r\n\t\t                validators: [validator_1.Validators.topNFilterTypeValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"orderBy\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.filterTargetValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return TopNFilterValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.TopNFilterValidator = TopNFilterValidator;\r\n\t\tvar NotSupportedFilterValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(NotSupportedFilterValidator, _super);\r\n\t\t    function NotSupportedFilterValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    NotSupportedFilterValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"target\",\r\n\t\t                validators: [validator_1.Validators.filterTargetValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"message\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"notSupportedTypeName\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"filterType\",\r\n\t\t                validators: [validator_1.Validators.notSupportedFilterTypeValidator]\r\n\t\t            },\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return NotSupportedFilterValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.NotSupportedFilterValidator = NotSupportedFilterValidator;\r\n\t\tvar IncludeExcludeFilterValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(IncludeExcludeFilterValidator, _super);\r\n\t\t    function IncludeExcludeFilterValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    IncludeExcludeFilterValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"target\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.filterTargetValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"isExclude\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.booleanValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"values\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.anyArrayValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"filterType\",\r\n\t\t                validators: [validator_1.Validators.includeExludeFilterTypeValidator]\r\n\t\t            },\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return IncludeExcludeFilterValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.IncludeExcludeFilterValidator = IncludeExcludeFilterValidator;\r\n\t\tvar FilterValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(FilterValidator, _super);\r\n\t\t    function FilterValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    FilterValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        return validator_1.Validators.anyFilterValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return FilterValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.FilterValidator = FilterValidator;\r\n\t\tvar ConditionItemValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(ConditionItemValidator, _super);\r\n\t\t    function ConditionItemValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    ConditionItemValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"value\",\r\n\t\t                validators: [validator_1.Validators.anyValueValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"operator\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return ConditionItemValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.ConditionItemValidator = ConditionItemValidator;\r\n\t\n\t\n\t/***/ }),\n\t/* 8 */\n\t/***/ (function(module, exports) {\n\t\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\tvar FieldRequiredValidator = /** @class */ (function () {\r\n\t\t    function FieldRequiredValidator() {\r\n\t\t    }\r\n\t\t    FieldRequiredValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return [{\r\n\t\t                    message: field + \" is required\",\r\n\t\t                    path: (path ? path + \".\" : \"\") + field,\r\n\t\t                    keyword: \"required\"\r\n\t\t                }];\r\n\t\t        }\r\n\t\t        return null;\r\n\t\t    };\r\n\t\t    return FieldRequiredValidator;\r\n\t\t}());\r\n\t\texports.FieldRequiredValidator = FieldRequiredValidator;\r\n\t\n\t\n\t/***/ }),\n\t/* 9 */\n\t/***/ (function(module, exports) {\n\t\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\tvar AnyOfValidator = /** @class */ (function () {\r\n\t\t    function AnyOfValidator(validators) {\r\n\t\t        this.validators = validators;\r\n\t\t    }\r\n\t\t    AnyOfValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var valid = false;\r\n\t\t        for (var _i = 0, _a = this.validators; _i < _a.length; _i++) {\r\n\t\t            var validator = _a[_i];\r\n\t\t            var errors = validator.validate(input, path, field);\r\n\t\t            if (!errors) {\r\n\t\t                valid = true;\r\n\t\t                break;\r\n\t\t            }\r\n\t\t        }\r\n\t\t        if (!valid) {\r\n\t\t            return [{\r\n\t\t                    message: field + \" property is invalid\",\r\n\t\t                    path: (path ? path + \".\" : \"\") + field,\r\n\t\t                    keyword: \"invalid\"\r\n\t\t                }];\r\n\t\t        }\r\n\t\t        return null;\r\n\t\t    };\r\n\t\t    return AnyOfValidator;\r\n\t\t}());\r\n\t\texports.AnyOfValidator = AnyOfValidator;\r\n\t\n\t\n\t/***/ }),\n\t/* 10 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\tvar __extends = (this && this.__extends) || (function () {\r\n\t\t    var extendStatics = Object.setPrototypeOf ||\r\n\t\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t\t    return function (d, b) {\r\n\t\t        extendStatics(d, b);\r\n\t\t        function __() { this.constructor = d; }\r\n\t\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t\t    };\r\n\t\t})();\r\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\tvar validator_1 = __webpack_require__(1);\r\n\t\tvar multipleFieldsValidator_1 = __webpack_require__(4);\r\n\t\tvar typeValidator_1 = __webpack_require__(2);\r\n\t\tvar ReportLoadValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(ReportLoadValidator, _super);\r\n\t\t    function ReportLoadValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    ReportLoadValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"accessToken\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"id\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"groupId\",\r\n\t\t                validators: [validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"settings\",\r\n\t\t                validators: [validator_1.Validators.settingsValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"pageName\",\r\n\t\t                validators: [validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"filters\",\r\n\t\t                validators: [validator_1.Validators.filtersArrayValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"permissions\",\r\n\t\t                validators: [validator_1.Validators.permissionsValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"viewMode\",\r\n\t\t                validators: [validator_1.Validators.viewModeValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"tokenType\",\r\n\t\t                validators: [validator_1.Validators.tokenTypeValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"bookmark\",\r\n\t\t                validators: [validator_1.Validators.applyBookmarkValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"theme\",\r\n\t\t                validators: [validator_1.Validators.customThemeValidator]\r\n\t\t            },\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return ReportLoadValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.ReportLoadValidator = ReportLoadValidator;\r\n\t\n\t\n\t/***/ }),\n\t/* 11 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\tvar __extends = (this && this.__extends) || (function () {\r\n\t\t    var extendStatics = Object.setPrototypeOf ||\r\n\t\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t\t    return function (d, b) {\r\n\t\t        extendStatics(d, b);\r\n\t\t        function __() { this.constructor = d; }\r\n\t\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t\t    };\r\n\t\t})();\r\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\tvar validator_1 = __webpack_require__(1);\r\n\t\tvar multipleFieldsValidator_1 = __webpack_require__(4);\r\n\t\tvar typeValidator_1 = __webpack_require__(2);\r\n\t\tvar ReportCreateValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(ReportCreateValidator, _super);\r\n\t\t    function ReportCreateValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    ReportCreateValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"accessToken\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"datasetId\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"groupId\",\r\n\t\t                validators: [validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"tokenType\",\r\n\t\t                validators: [validator_1.Validators.tokenTypeValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"theme\",\r\n\t\t                validators: [validator_1.Validators.customThemeValidator]\r\n\t\t            },\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return ReportCreateValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.ReportCreateValidator = ReportCreateValidator;\r\n\t\n\t\n\t/***/ }),\n\t/* 12 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\tvar __extends = (this && this.__extends) || (function () {\r\n\t\t    var extendStatics = Object.setPrototypeOf ||\r\n\t\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t\t    return function (d, b) {\r\n\t\t        extendStatics(d, b);\r\n\t\t        function __() { this.constructor = d; }\r\n\t\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t\t    };\r\n\t\t})();\r\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\tvar validator_1 = __webpack_require__(1);\r\n\t\tvar multipleFieldsValidator_1 = __webpack_require__(4);\r\n\t\tvar typeValidator_1 = __webpack_require__(2);\r\n\t\tvar DashboardLoadValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(DashboardLoadValidator, _super);\r\n\t\t    function DashboardLoadValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    DashboardLoadValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"accessToken\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"id\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"groupId\",\r\n\t\t                validators: [validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"pageView\",\r\n\t\t                validators: [validator_1.Validators.pageViewFieldValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"tokenType\",\r\n\t\t                validators: [validator_1.Validators.tokenTypeValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return DashboardLoadValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.DashboardLoadValidator = DashboardLoadValidator;\r\n\t\n\t\n\t/***/ }),\n\t/* 13 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\tvar __extends = (this && this.__extends) || (function () {\r\n\t\t    var extendStatics = Object.setPrototypeOf ||\r\n\t\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t\t    return function (d, b) {\r\n\t\t        extendStatics(d, b);\r\n\t\t        function __() { this.constructor = d; }\r\n\t\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t\t    };\r\n\t\t})();\r\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\tvar validator_1 = __webpack_require__(1);\r\n\t\tvar multipleFieldsValidator_1 = __webpack_require__(4);\r\n\t\tvar typeValidator_1 = __webpack_require__(2);\r\n\t\tvar TileLoadValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(TileLoadValidator, _super);\r\n\t\t    function TileLoadValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    TileLoadValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"accessToken\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"id\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"dashboardId\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"groupId\",\r\n\t\t                validators: [validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"pageView\",\r\n\t\t                validators: [validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"tokenType\",\r\n\t\t                validators: [validator_1.Validators.tokenTypeValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"width\",\r\n\t\t                validators: [validator_1.Validators.numberValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"height\",\r\n\t\t                validators: [validator_1.Validators.numberValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return TileLoadValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.TileLoadValidator = TileLoadValidator;\r\n\t\n\t\n\t/***/ }),\n\t/* 14 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\tvar __extends = (this && this.__extends) || (function () {\r\n\t\t    var extendStatics = Object.setPrototypeOf ||\r\n\t\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t\t    return function (d, b) {\r\n\t\t        extendStatics(d, b);\r\n\t\t        function __() { this.constructor = d; }\r\n\t\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t\t    };\r\n\t\t})();\r\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\tvar validator_1 = __webpack_require__(1);\r\n\t\tvar multipleFieldsValidator_1 = __webpack_require__(4);\r\n\t\tvar typeValidator_1 = __webpack_require__(2);\r\n\t\tvar PageSizeValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(PageSizeValidator, _super);\r\n\t\t    function PageSizeValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    PageSizeValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"type\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.pageSizeTypeValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return PageSizeValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.PageSizeValidator = PageSizeValidator;\r\n\t\tvar CustomPageSizeValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(CustomPageSizeValidator, _super);\r\n\t\t    function CustomPageSizeValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    CustomPageSizeValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"width\",\r\n\t\t                validators: [validator_1.Validators.numberValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"height\",\r\n\t\t                validators: [validator_1.Validators.numberValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return CustomPageSizeValidator;\r\n\t\t}(PageSizeValidator));\r\n\t\texports.CustomPageSizeValidator = CustomPageSizeValidator;\r\n\t\tvar PageValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(PageValidator, _super);\r\n\t\t    function PageValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    PageValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"name\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return PageValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.PageValidator = PageValidator;\r\n\t\tvar PageViewFieldValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(PageViewFieldValidator, _super);\r\n\t\t    function PageViewFieldValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    PageViewFieldValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var possibleValues = [\"actualSize\", \"fitToWidth\", \"oneColumn\"];\r\n\t\t        if (possibleValues.indexOf(input) < 0) {\r\n\t\t            return [{\r\n\t\t                    message: \"pageView must be a string with one of the following values: \\\"actualSize\\\", \\\"fitToWidth\\\", \\\"oneColumn\\\"\"\r\n\t\t                }];\r\n\t\t        }\r\n\t\t        return null;\r\n\t\t    };\r\n\t\t    return PageViewFieldValidator;\r\n\t\t}(typeValidator_1.StringValidator));\r\n\t\texports.PageViewFieldValidator = PageViewFieldValidator;\r\n\t\n\t\n\t/***/ }),\n\t/* 15 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\tvar __extends = (this && this.__extends) || (function () {\r\n\t\t    var extendStatics = Object.setPrototypeOf ||\r\n\t\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t\t    return function (d, b) {\r\n\t\t        extendStatics(d, b);\r\n\t\t        function __() { this.constructor = d; }\r\n\t\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t\t    };\r\n\t\t})();\r\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\tvar validator_1 = __webpack_require__(1);\r\n\t\tvar multipleFieldsValidator_1 = __webpack_require__(4);\r\n\t\tvar typeValidator_1 = __webpack_require__(2);\r\n\t\tvar LoadQnaValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(LoadQnaValidator, _super);\r\n\t\t    function LoadQnaValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    LoadQnaValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"accessToken\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"datasetIds\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringArrayValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"question\",\r\n\t\t                validators: [validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"viewMode\",\r\n\t\t                validators: [validator_1.Validators.viewModeValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"settings\",\r\n\t\t                validators: [validator_1.Validators.qnaSettingValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"tokenType\",\r\n\t\t                validators: [validator_1.Validators.tokenTypeValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"groupId\",\r\n\t\t                validators: [validator_1.Validators.stringValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return LoadQnaValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.LoadQnaValidator = LoadQnaValidator;\r\n\t\tvar QnaSettingsValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(QnaSettingsValidator, _super);\r\n\t\t    function QnaSettingsValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    QnaSettingsValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"filterPaneEnabled\",\r\n\t\t                validators: [validator_1.Validators.booleanValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"hideErrors\",\r\n\t\t                validators: [validator_1.Validators.booleanValidator]\r\n\t\t            },\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return QnaSettingsValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.QnaSettingsValidator = QnaSettingsValidator;\r\n\t\tvar QnaInterpretInputDataValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(QnaInterpretInputDataValidator, _super);\r\n\t\t    function QnaInterpretInputDataValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    QnaInterpretInputDataValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"datasetIds\",\r\n\t\t                validators: [validator_1.Validators.stringArrayValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"question\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            },\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return QnaInterpretInputDataValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.QnaInterpretInputDataValidator = QnaInterpretInputDataValidator;\r\n\t\n\t\n\t/***/ }),\n\t/* 16 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\tvar __extends = (this && this.__extends) || (function () {\r\n\t\t    var extendStatics = Object.setPrototypeOf ||\r\n\t\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t\t    return function (d, b) {\r\n\t\t        extendStatics(d, b);\r\n\t\t        function __() { this.constructor = d; }\r\n\t\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t\t    };\r\n\t\t})();\r\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\tvar validator_1 = __webpack_require__(1);\r\n\t\tvar multipleFieldsValidator_1 = __webpack_require__(4);\r\n\t\tvar typeValidator_1 = __webpack_require__(2);\r\n\t\tvar SaveAsParametersValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(SaveAsParametersValidator, _super);\r\n\t\t    function SaveAsParametersValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    SaveAsParametersValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"name\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return SaveAsParametersValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.SaveAsParametersValidator = SaveAsParametersValidator;\r\n\t\n\t\n\t/***/ }),\n\t/* 17 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\tvar __extends = (this && this.__extends) || (function () {\r\n\t\t    var extendStatics = Object.setPrototypeOf ||\r\n\t\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t\t    return function (d, b) {\r\n\t\t        extendStatics(d, b);\r\n\t\t        function __() { this.constructor = d; }\r\n\t\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t\t    };\r\n\t\t})();\r\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\tvar typeValidator_1 = __webpack_require__(2);\r\n\t\tvar MapValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(MapValidator, _super);\r\n\t\t    function MapValidator(keyValidators, valueValidators) {\r\n\t\t        var _this = _super.call(this) || this;\r\n\t\t        _this.keyValidators = keyValidators;\r\n\t\t        _this.valueValidators = valueValidators;\r\n\t\t        return _this;\r\n\t\t    }\r\n\t\t    MapValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        for (var key in input) {\r\n\t\t            if (input.hasOwnProperty(key)) {\r\n\t\t                var fieldsPath = (path ? path + \".\" : \"\") + field + \".\" + key;\r\n\t\t                for (var _i = 0, _a = this.keyValidators; _i < _a.length; _i++) {\r\n\t\t                    var keyValidator = _a[_i];\r\n\t\t                    errors = keyValidator.validate(key, fieldsPath, field);\r\n\t\t                    if (errors) {\r\n\t\t                        return errors;\r\n\t\t                    }\r\n\t\t                }\r\n\t\t                for (var _b = 0, _c = this.valueValidators; _b < _c.length; _b++) {\r\n\t\t                    var valueValidator = _c[_b];\r\n\t\t                    errors = valueValidator.validate(input[key], fieldsPath, field);\r\n\t\t                    if (errors) {\r\n\t\t                        return errors;\r\n\t\t                    }\r\n\t\t                }\r\n\t\t            }\r\n\t\t        }\r\n\t\t        return null;\r\n\t\t    };\r\n\t\t    return MapValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.MapValidator = MapValidator;\r\n\t\n\t\n\t/***/ }),\n\t/* 18 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\tvar __extends = (this && this.__extends) || (function () {\r\n\t\t    var extendStatics = Object.setPrototypeOf ||\r\n\t\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t\t    return function (d, b) {\r\n\t\t        extendStatics(d, b);\r\n\t\t        function __() { this.constructor = d; }\r\n\t\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t\t    };\r\n\t\t})();\r\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\tvar validator_1 = __webpack_require__(1);\r\n\t\tvar multipleFieldsValidator_1 = __webpack_require__(4);\r\n\t\tvar typeValidator_1 = __webpack_require__(2);\r\n\t\tvar CustomLayoutValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(CustomLayoutValidator, _super);\r\n\t\t    function CustomLayoutValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    CustomLayoutValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"pageSize\",\r\n\t\t                validators: [validator_1.Validators.pageSizeValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"displayOption\",\r\n\t\t                validators: [validator_1.Validators.customLayoutDisplayOptionValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"pagesLayout\",\r\n\t\t                validators: [validator_1.Validators.pagesLayoutValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return CustomLayoutValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.CustomLayoutValidator = CustomLayoutValidator;\r\n\t\tvar VisualLayoutValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(VisualLayoutValidator, _super);\r\n\t\t    function VisualLayoutValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    VisualLayoutValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"x\",\r\n\t\t                validators: [validator_1.Validators.numberValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"y\",\r\n\t\t                validators: [validator_1.Validators.numberValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"z\",\r\n\t\t                validators: [validator_1.Validators.numberValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"width\",\r\n\t\t                validators: [validator_1.Validators.numberValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"height\",\r\n\t\t                validators: [validator_1.Validators.numberValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"displayState\",\r\n\t\t                validators: [validator_1.Validators.displayStateValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return VisualLayoutValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.VisualLayoutValidator = VisualLayoutValidator;\r\n\t\tvar DisplayStateValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(DisplayStateValidator, _super);\r\n\t\t    function DisplayStateValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    DisplayStateValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"mode\",\r\n\t\t                validators: [validator_1.Validators.displayStateModeValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return DisplayStateValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.DisplayStateValidator = DisplayStateValidator;\r\n\t\tvar PageLayoutValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(PageLayoutValidator, _super);\r\n\t\t    function PageLayoutValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    PageLayoutValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"visualsLayout\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.pageLayoutValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"defaultLayout\",\r\n\t\t                validators: [validator_1.Validators.visualLayoutValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return PageLayoutValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.PageLayoutValidator = PageLayoutValidator;\r\n\t\n\t\n\t/***/ }),\n\t/* 19 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\tvar __extends = (this && this.__extends) || (function () {\r\n\t\t    var extendStatics = Object.setPrototypeOf ||\r\n\t\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t\t    return function (d, b) {\r\n\t\t        extendStatics(d, b);\r\n\t\t        function __() { this.constructor = d; }\r\n\t\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t\t    };\r\n\t\t})();\r\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\tvar multipleFieldsValidator_1 = __webpack_require__(4);\r\n\t\tvar typeValidator_1 = __webpack_require__(2);\r\n\t\tvar ExportDataRequestValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(ExportDataRequestValidator, _super);\r\n\t\t    function ExportDataRequestValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    ExportDataRequestValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"rows\",\r\n\t\t                validators: [new typeValidator_1.NumberValidator()]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"exportDataType\",\r\n\t\t                validators: [new typeValidator_1.EnumValidator([0, 1])]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return ExportDataRequestValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.ExportDataRequestValidator = ExportDataRequestValidator;\r\n\t\n\t\n\t/***/ }),\n\t/* 20 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\tvar __extends = (this && this.__extends) || (function () {\r\n\t\t    var extendStatics = Object.setPrototypeOf ||\r\n\t\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t\t    return function (d, b) {\r\n\t\t        extendStatics(d, b);\r\n\t\t        function __() { this.constructor = d; }\r\n\t\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t\t    };\r\n\t\t})();\r\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\tvar validator_1 = __webpack_require__(1);\r\n\t\tvar multipleFieldsValidator_1 = __webpack_require__(4);\r\n\t\tvar typeValidator_1 = __webpack_require__(2);\r\n\t\tvar typeValidator_2 = __webpack_require__(2);\r\n\t\tvar VisualSelectorValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(VisualSelectorValidator, _super);\r\n\t\t    function VisualSelectorValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    VisualSelectorValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                // Not required for this selector only - Backward compatibility \r\n\t\t                field: \"$schema\",\r\n\t\t                validators: [validator_1.Validators.stringValidator, new typeValidator_2.SchemaValidator(\"http://powerbi.com/product/schema#visualSelector\")]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"visualName\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return VisualSelectorValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.VisualSelectorValidator = VisualSelectorValidator;\r\n\t\tvar VisualTypeSelectorValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(VisualTypeSelectorValidator, _super);\r\n\t\t    function VisualTypeSelectorValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    VisualTypeSelectorValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"$schema\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator, new typeValidator_2.SchemaValidator(\"http://powerbi.com/product/schema#visualTypeSelector\")]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"visualType\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return VisualTypeSelectorValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.VisualTypeSelectorValidator = VisualTypeSelectorValidator;\r\n\t\tvar SlicerTargetSelectorValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(SlicerTargetSelectorValidator, _super);\r\n\t\t    function SlicerTargetSelectorValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    SlicerTargetSelectorValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"$schema\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator, new typeValidator_2.SchemaValidator(\"http://powerbi.com/product/schema#slicerTargetSelector\")]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"target\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.slicerTargetValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return SlicerTargetSelectorValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.SlicerTargetSelectorValidator = SlicerTargetSelectorValidator;\r\n\t\n\t\n\t/***/ }),\n\t/* 21 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\tvar __extends = (this && this.__extends) || (function () {\r\n\t\t    var extendStatics = Object.setPrototypeOf ||\r\n\t\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t\t    return function (d, b) {\r\n\t\t        extendStatics(d, b);\r\n\t\t        function __() { this.constructor = d; }\r\n\t\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t\t    };\r\n\t\t})();\r\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\tvar validator_1 = __webpack_require__(1);\r\n\t\tvar multipleFieldsValidator_1 = __webpack_require__(4);\r\n\t\tvar typeValidator_1 = __webpack_require__(2);\r\n\t\tvar SlicerValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(SlicerValidator, _super);\r\n\t\t    function SlicerValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    SlicerValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"selector\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.slicerSelectorValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"state\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.slicerStateValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return SlicerValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.SlicerValidator = SlicerValidator;\r\n\t\tvar SlicerStateValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(SlicerStateValidator, _super);\r\n\t\t    function SlicerStateValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    SlicerStateValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"filters\",\r\n\t\t                validators: [validator_1.Validators.filtersArrayValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return SlicerStateValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.SlicerStateValidator = SlicerStateValidator;\r\n\t\n\t\n\t/***/ }),\n\t/* 22 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\tvar __extends = (this && this.__extends) || (function () {\r\n\t\t    var extendStatics = Object.setPrototypeOf ||\r\n\t\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t\t    return function (d, b) {\r\n\t\t        extendStatics(d, b);\r\n\t\t        function __() { this.constructor = d; }\r\n\t\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t\t    };\r\n\t\t})();\r\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\tvar validator_1 = __webpack_require__(1);\r\n\t\tvar multipleFieldsValidator_1 = __webpack_require__(4);\r\n\t\tvar typeValidator_1 = __webpack_require__(2);\r\n\t\tvar VisualSettingsValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(VisualSettingsValidator, _super);\r\n\t\t    function VisualSettingsValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    VisualSettingsValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"visualHeaders\",\r\n\t\t                validators: [validator_1.Validators.visualHeadersValidator]\r\n\t\t            },\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return VisualSettingsValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.VisualSettingsValidator = VisualSettingsValidator;\r\n\t\tvar VisualHeaderSettingsValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(VisualHeaderSettingsValidator, _super);\r\n\t\t    function VisualHeaderSettingsValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    VisualHeaderSettingsValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"visible\",\r\n\t\t                validators: [validator_1.Validators.booleanValidator]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return VisualHeaderSettingsValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.VisualHeaderSettingsValidator = VisualHeaderSettingsValidator;\r\n\t\tvar VisualHeaderValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(VisualHeaderValidator, _super);\r\n\t\t    function VisualHeaderValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    VisualHeaderValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"settings\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.visualHeaderSettingsValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"selector\",\r\n\t\t                validators: [validator_1.Validators.visualHeaderSelectorValidator]\r\n\t\t            },\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return VisualHeaderValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.VisualHeaderValidator = VisualHeaderValidator;\r\n\t\n\t\n\t/***/ }),\n\t/* 23 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\tvar __extends = (this && this.__extends) || (function () {\r\n\t\t    var extendStatics = Object.setPrototypeOf ||\r\n\t\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t\t    return function (d, b) {\r\n\t\t        extendStatics(d, b);\r\n\t\t        function __() { this.constructor = d; }\r\n\t\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t\t    };\r\n\t\t})();\r\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\tvar validator_1 = __webpack_require__(1);\r\n\t\tvar multipleFieldsValidator_1 = __webpack_require__(4);\r\n\t\tvar typeValidator_1 = __webpack_require__(2);\r\n\t\tvar CommandsSettingsValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(CommandsSettingsValidator, _super);\r\n\t\t    function CommandsSettingsValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    CommandsSettingsValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"copy\",\r\n\t\t                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"drill\",\r\n\t\t                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"drillthrough\",\r\n\t\t                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"expandCollapse\",\r\n\t\t                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"exportData\",\r\n\t\t                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"includeExclude\",\r\n\t\t                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"removeVisual\",\r\n\t\t                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"search\",\r\n\t\t                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"seeData\",\r\n\t\t                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"sort\",\r\n\t\t                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"spotlight\",\r\n\t\t                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n\t\t            },\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return CommandsSettingsValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.CommandsSettingsValidator = CommandsSettingsValidator;\r\n\t\tvar SingleCommandSettingsValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(SingleCommandSettingsValidator, _super);\r\n\t\t    function SingleCommandSettingsValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    SingleCommandSettingsValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"displayOption\",\r\n\t\t                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.commandDisplayOptionValidator]\r\n\t\t            },\r\n\t\t            {\r\n\t\t                field: \"selector\",\r\n\t\t                validators: [validator_1.Validators.visualCommandSelectorValidator]\r\n\t\t            },\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return SingleCommandSettingsValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.SingleCommandSettingsValidator = SingleCommandSettingsValidator;\r\n\t\n\t\n\t/***/ }),\n\t/* 24 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\tvar __extends = (this && this.__extends) || (function () {\r\n\t\t    var extendStatics = Object.setPrototypeOf ||\r\n\t\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t\t    return function (d, b) {\r\n\t\t        extendStatics(d, b);\r\n\t\t        function __() { this.constructor = d; }\r\n\t\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t\t    };\r\n\t\t})();\r\n\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t\tvar multipleFieldsValidator_1 = __webpack_require__(4);\r\n\t\tvar typeValidator_1 = __webpack_require__(2);\r\n\t\tvar CustomThemeValidator = /** @class */ (function (_super) {\r\n\t\t    __extends(CustomThemeValidator, _super);\r\n\t\t    function CustomThemeValidator() {\r\n\t\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t\t    }\r\n\t\t    CustomThemeValidator.prototype.validate = function (input, path, field) {\r\n\t\t        if (input == null) {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t        var errors = _super.prototype.validate.call(this, input, path, field);\r\n\t\t        if (errors) {\r\n\t\t            return errors;\r\n\t\t        }\r\n\t\t        var fields = [\r\n\t\t            {\r\n\t\t                field: \"themeJson\",\r\n\t\t                validators: [new typeValidator_1.ObjectValidator()]\r\n\t\t            }\r\n\t\t        ];\r\n\t\t        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n\t\t        return multipleFieldsValidator.validate(input, path, field);\r\n\t\t    };\r\n\t\t    return CustomThemeValidator;\r\n\t\t}(typeValidator_1.ObjectValidator));\r\n\t\texports.CustomThemeValidator = CustomThemeValidator;\r\n\t\n\t\n\t/***/ })\n\t/******/ ])\n\t});\n\t;\n\t//# sourceMappingURL=models.js.map\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar embed = __webpack_require__(2);\r\n\tvar models = __webpack_require__(4);\r\n\tvar utils = __webpack_require__(3);\r\n\tvar errors = __webpack_require__(6);\r\n\tvar page_1 = __webpack_require__(7);\r\n\tvar defaults_1 = __webpack_require__(9);\r\n\tvar bookmarksManager_1 = __webpack_require__(10);\r\n\t/**\r\n\t * The Power BI Report embed component\r\n\t *\r\n\t * @export\r\n\t * @class Report\r\n\t * @extends {embed.Embed}\r\n\t * @implements {IReportNode}\r\n\t * @implements {IFilterable}\r\n\t */\r\n\tvar Report = (function (_super) {\r\n\t    __extends(Report, _super);\r\n\t    /**\r\n\t     * Creates an instance of a Power BI Report.\r\n\t     *\r\n\t     * @param {service.Service} service\r\n\t     * @param {HTMLElement} element\r\n\t     * @param {embed.IEmbedConfiguration} config\r\n\t     */\r\n\t    function Report(service, element, baseConfig, phasedRender, iframe) {\r\n\t        var config = baseConfig;\r\n\t        var filterPaneEnabled = (config.settings && config.settings.filterPaneEnabled) || !(element.getAttribute(Report.filterPaneEnabledAttribute) === \"false\");\r\n\t        var navContentPaneEnabled = (config.settings && config.settings.navContentPaneEnabled) || !(element.getAttribute(Report.navContentPaneEnabledAttribute) === \"false\");\r\n\t        var settings = utils.assign({\r\n\t            filterPaneEnabled: filterPaneEnabled,\r\n\t            navContentPaneEnabled: navContentPaneEnabled\r\n\t        }, config.settings);\r\n\t        var configCopy = utils.assign({ settings: settings }, config);\r\n\t        _super.call(this, service, element, configCopy, iframe, phasedRender);\r\n\t        this.loadPath = \"/report/load\";\r\n\t        this.phasedLoadPath = \"/report/prepare\";\r\n\t        Array.prototype.push.apply(this.allowedEvents, Report.allowedEvents);\r\n\t        this.bookmarksManager = new bookmarksManager_1.BookmarksManager(service, config, this.iframe);\r\n\t    }\r\n\t    /**\r\n\t     * Adds backwards compatibility for the previous load configuration, which used the reportId query parameter to specify the report ID\r\n\t     * (e.g. http://embedded.powerbi.com/appTokenReportEmbed?reportId=854846ed-2106-4dc2-bc58-eb77533bf2f1).\r\n\t     *\r\n\t     * By extracting the ID we can ensure that the ID is always explicitly provided as part of the load configuration.\r\n\t     *\r\n\t     * @static\r\n\t     * @param {string} url\r\n\t     * @returns {string}\r\n\t     */\r\n\t    Report.findIdFromEmbedUrl = function (url) {\r\n\t        var reportIdRegEx = /reportId=\"?([^&]+)\"?/;\r\n\t        var reportIdMatch = url.match(reportIdRegEx);\r\n\t        var reportId;\r\n\t        if (reportIdMatch) {\r\n\t            reportId = reportIdMatch[1];\r\n\t        }\r\n\t        return reportId;\r\n\t    };\r\n\t    /**\r\n\t     * Render a preloaded report, using phased embedding API\r\n\t     *\r\n\t     * ```javascript\r\n\t     * // Load report\r\n\t     * var report = powerbi.load(element, config);\r\n\t     *\r\n\t     * ...\r\n\t     *\r\n\t     * // Render report\r\n\t     * report.render()\r\n\t     * ```\r\n\t     *\r\n\t     * @returns {Promise<void>}\r\n\t     */\r\n\t    Report.prototype.render = function (config) {\r\n\t        return this.service.hpm.post(\"/report/render\", config, { uid: this.config.uniqueId }, this.iframe.contentWindow)\r\n\t            .then(function (response) {\r\n\t            return response.body;\r\n\t        })\r\n\t            .catch(function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Gets filters that are applied at the report level.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * // Get filters applied at report level\r\n\t     * report.getFilters()\r\n\t     *   .then(filters => {\r\n\t     *     ...\r\n\t     *   });\r\n\t     * ```\r\n\t     *\r\n\t     * @returns {Promise<models.IFilter[]>}\r\n\t     */\r\n\t    Report.prototype.getFilters = function () {\r\n\t        if (utils.isRDLEmbed(this.config.embedUrl)) {\r\n\t            return Promise.reject(errors.APINotSupportedForRDLError);\r\n\t        }\r\n\t        return this.service.hpm.get(\"/report/filters\", { uid: this.config.uniqueId }, this.iframe.contentWindow)\r\n\t            .then(function (response) { return response.body; }, function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Gets the report ID from the first available location: options, attribute, embed url.\r\n\t     *\r\n\t     * @returns {string}\r\n\t     */\r\n\t    Report.prototype.getId = function () {\r\n\t        var config = this.config;\r\n\t        var reportId = config.id || this.element.getAttribute(Report.reportIdAttribute) || Report.findIdFromEmbedUrl(config.embedUrl);\r\n\t        if (typeof reportId !== 'string' || reportId.length === 0) {\r\n\t            throw new Error(\"Report id is required, but it was not found. You must provide an id either as part of embed configuration or as attribute '\" + Report.reportIdAttribute + \"'.\");\r\n\t        }\r\n\t        return reportId;\r\n\t    };\r\n\t    /**\r\n\t     * Gets the list of pages within the report.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * report.getPages()\r\n\t     *  .then(pages => {\r\n\t     *      ...\r\n\t     *  });\r\n\t     * ```\r\n\t     *\r\n\t     * @returns {Promise<Page[]>}\r\n\t     */\r\n\t    Report.prototype.getPages = function () {\r\n\t        var _this = this;\r\n\t        if (utils.isRDLEmbed(this.config.embedUrl)) {\r\n\t            return Promise.reject(errors.APINotSupportedForRDLError);\r\n\t        }\r\n\t        return this.service.hpm.get('/report/pages', { uid: this.config.uniqueId }, this.iframe.contentWindow)\r\n\t            .then(function (response) {\r\n\t            return response.body\r\n\t                .map(function (page) {\r\n\t                return new page_1.Page(_this, page.name, page.displayName, page.isActive, page.visibility, page.defaultSize, page.defaultDisplayOption);\r\n\t            });\r\n\t        }, function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Creates an instance of a Page.\r\n\t     *\r\n\t     * Normally you would get Page objects by calling `report.getPages()`, but in the case\r\n\t     * that the page name is known and you want to perform an action on a page without having to retrieve it\r\n\t     * you can create it directly.\r\n\t     *\r\n\t     * Note: Because you are creating the page manually there is no guarantee that the page actually exists in the report, and subsequent requests could fail.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * const page = report.page('ReportSection1');\r\n\t     * page.setActive();\r\n\t     * ```\r\n\t     *\r\n\t     * @param {string} name\r\n\t     * @param {string} [displayName]\r\n\t     * @param {boolean} [isActive]\r\n\t     * @returns {Page}\r\n\t     */\r\n\t    Report.prototype.page = function (name, displayName, isActive, visibility) {\r\n\t        return new page_1.Page(this, name, displayName, isActive, visibility);\r\n\t    };\r\n\t    /**\r\n\t     * Prints the active page of the report by invoking `window.print()` on the embed iframe component.\r\n\t     */\r\n\t    Report.prototype.print = function () {\r\n\t        if (utils.isRDLEmbed(this.config.embedUrl)) {\r\n\t            return Promise.reject(errors.APINotSupportedForRDLError);\r\n\t        }\r\n\t        return this.service.hpm.post('/report/print', null, { uid: this.config.uniqueId }, this.iframe.contentWindow)\r\n\t            .then(function (response) {\r\n\t            return response.body;\r\n\t        })\r\n\t            .catch(function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Removes all filters at the report level.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * report.removeFilters();\r\n\t     * ```\r\n\t     *\r\n\t     * @returns {Promise<void>}\r\n\t     */\r\n\t    Report.prototype.removeFilters = function () {\r\n\t        if (utils.isRDLEmbed(this.config.embedUrl)) {\r\n\t            return Promise.reject(errors.APINotSupportedForRDLError);\r\n\t        }\r\n\t        return this.setFilters([]);\r\n\t    };\r\n\t    /**\r\n\t     * Sets the active page of the report.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * report.setPage(\"page2\")\r\n\t     *  .catch(error => { ... });\r\n\t     * ```\r\n\t     *\r\n\t     * @param {string} pageName\r\n\t     * @returns {Promise<void>}\r\n\t     */\r\n\t    Report.prototype.setPage = function (pageName) {\r\n\t        if (utils.isRDLEmbed(this.config.embedUrl)) {\r\n\t            return Promise.reject(errors.APINotSupportedForRDLError);\r\n\t        }\r\n\t        var page = {\r\n\t            name: pageName,\r\n\t            displayName: null,\r\n\t            isActive: true\r\n\t        };\r\n\t        return this.service.hpm.put('/report/pages/active', page, { uid: this.config.uniqueId }, this.iframe.contentWindow)\r\n\t            .catch(function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Sets filters at the report level.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * const filters: [\r\n\t     *    ...\r\n\t     * ];\r\n\t     *\r\n\t     * report.setFilters(filters)\r\n\t     *  .catch(errors => {\r\n\t     *    ...\r\n\t     *  });\r\n\t     * ```\r\n\t     *\r\n\t     * @param {(models.IFilter[])} filters\r\n\t     * @returns {Promise<void>}\r\n\t     */\r\n\t    Report.prototype.setFilters = function (filters) {\r\n\t        if (utils.isRDLEmbed(this.config.embedUrl)) {\r\n\t            return Promise.reject(errors.APINotSupportedForRDLError);\r\n\t        }\r\n\t        return this.service.hpm.put(\"/report/filters\", filters, { uid: this.config.uniqueId }, this.iframe.contentWindow)\r\n\t            .catch(function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Updates visibility settings for the filter pane and the page navigation pane.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * const newSettings = {\r\n\t     *   navContentPaneEnabled: true,\r\n\t     *   filterPaneEnabled: false\r\n\t     * };\r\n\t     *\r\n\t     * report.updateSettings(newSettings)\r\n\t     *   .catch(error => { ... });\r\n\t     * ```\r\n\t     *\r\n\t     * @param {models.ISettings} settings\r\n\t     * @returns {Promise<void>}\r\n\t     */\r\n\t    Report.prototype.updateSettings = function (settings) {\r\n\t        if (utils.isRDLEmbed(this.config.embedUrl) && settings.customLayout != null) {\r\n\t            return Promise.reject(errors.APINotSupportedForRDLError);\r\n\t        }\r\n\t        return this.service.hpm.patch('/report/settings', settings, { uid: this.config.uniqueId }, this.iframe.contentWindow)\r\n\t            .catch(function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Validate load configuration.\r\n\t     */\r\n\t    Report.prototype.validate = function (config) {\r\n\t        return models.validateReportLoad(config);\r\n\t    };\r\n\t    /**\r\n\t     * Populate config for load config\r\n\t     *\r\n\t     * @param {IEmbedConfigurationBase}\r\n\t     * @returns {void}\r\n\t     */\r\n\t    Report.prototype.populateConfig = function (baseConfig) {\r\n\t        var config = baseConfig;\r\n\t        if (config.settings && (config.settings.layoutType === models.LayoutType.MobileLandscape || config.settings.layoutType === models.LayoutType.MobilePortrait))\r\n\t            config.embedUrl = utils.addParamToUrl(config.embedUrl, \"isMobile\", \"true\");\r\n\t        _super.prototype.populateConfig.call(this, config);\r\n\t        // TODO: Change when Object.assign is available.\r\n\t        var settings = utils.assign({}, defaults_1.Defaults.defaultSettings, config.settings);\r\n\t        config = utils.assign({ settings: settings }, config);\r\n\t        config.id = this.getId();\r\n\t        this.config = config;\r\n\t    };\r\n\t    /**\r\n\t     * Switch Report view mode.\r\n\t     *\r\n\t     * @returns {Promise<void>}\r\n\t     */\r\n\t    Report.prototype.switchMode = function (viewMode) {\r\n\t        var newMode;\r\n\t        if (typeof viewMode === \"string\") {\r\n\t            newMode = viewMode;\r\n\t        }\r\n\t        else {\r\n\t            newMode = this.viewModeToString(viewMode);\r\n\t        }\r\n\t        var url = '/report/switchMode/' + newMode;\r\n\t        return this.service.hpm.post(url, null, { uid: this.config.uniqueId }, this.iframe.contentWindow)\r\n\t            .then(function (response) {\r\n\t            return response.body;\r\n\t        })\r\n\t            .catch(function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t    * Refreshes data sources for the report.\r\n\t    *\r\n\t    * ```javascript\r\n\t    * report.refresh();\r\n\t    * ```\r\n\t    */\r\n\t    Report.prototype.refresh = function () {\r\n\t        return this.service.hpm.post('/report/refresh', null, { uid: this.config.uniqueId }, this.iframe.contentWindow)\r\n\t            .then(function (response) {\r\n\t            return response.body;\r\n\t        })\r\n\t            .catch(function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * checks if the report is saved.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * report.isSaved()\r\n\t     * ```\r\n\t     *\r\n\t     * @returns {Promise<boolean>}\r\n\t     */\r\n\t    Report.prototype.isSaved = function () {\r\n\t        if (utils.isRDLEmbed(this.config.embedUrl)) {\r\n\t            return Promise.reject(errors.APINotSupportedForRDLError);\r\n\t        }\r\n\t        return utils.isSavedInternal(this.service.hpm, this.config.uniqueId, this.iframe.contentWindow);\r\n\t    };\r\n\t    /**\r\n\t     * Apply a theme to the report\r\n\t     *\r\n\t     * ```javascript\r\n\t     * report.applyTheme(theme);\r\n\t     * ```\r\n\t     */\r\n\t    Report.prototype.applyTheme = function (theme) {\r\n\t        if (utils.isRDLEmbed(this.config.embedUrl)) {\r\n\t            return Promise.reject(errors.APINotSupportedForRDLError);\r\n\t        }\r\n\t        return this.applyThemeInternal(theme);\r\n\t    };\r\n\t    /**\r\n\t    * Reset and apply the default theme of the report\r\n\t    *\r\n\t    * ```javascript\r\n\t    * report.resetTheme();\r\n\t    * ```\r\n\t    */\r\n\t    Report.prototype.resetTheme = function () {\r\n\t        if (utils.isRDLEmbed(this.config.embedUrl)) {\r\n\t            return Promise.reject(errors.APINotSupportedForRDLError);\r\n\t        }\r\n\t        return this.applyThemeInternal({});\r\n\t    };\r\n\t    Report.prototype.applyThemeInternal = function (theme) {\r\n\t        return this.service.hpm.put('/report/theme', theme, { uid: this.config.uniqueId }, this.iframe.contentWindow)\r\n\t            .then(function (response) {\r\n\t            return response.body;\r\n\t        })\r\n\t            .catch(function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    Report.prototype.viewModeToString = function (viewMode) {\r\n\t        var mode;\r\n\t        switch (viewMode) {\r\n\t            case models.ViewMode.Edit:\r\n\t                mode = \"edit\";\r\n\t                break;\r\n\t            case models.ViewMode.View:\r\n\t                mode = \"view\";\r\n\t                break;\r\n\t        }\r\n\t        return mode;\r\n\t    };\r\n\t    Report.allowedEvents = [\"filtersApplied\", \"pageChanged\", \"commandTriggered\", \"swipeStart\", \"swipeEnd\", \"bookmarkApplied\"];\r\n\t    Report.reportIdAttribute = 'powerbi-report-id';\r\n\t    Report.filterPaneEnabledAttribute = 'powerbi-settings-filter-pane-enabled';\r\n\t    Report.navContentPaneEnabledAttribute = 'powerbi-settings-nav-content-pane-enabled';\r\n\t    Report.typeAttribute = 'powerbi-type';\r\n\t    Report.type = \"Report\";\r\n\t    return Report;\r\n\t}(embed.Embed));\r\n\texports.Report = Report;\r\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\n\texports.APINotSupportedForRDLError = \"This API is currently not supported for RDL reports\";\r\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar visualDescriptor_1 = __webpack_require__(8);\r\n\tvar models = __webpack_require__(4);\r\n\tvar utils = __webpack_require__(3);\r\n\tvar errors = __webpack_require__(6);\r\n\t/**\r\n\t * A Power BI report page\r\n\t *\r\n\t * @export\r\n\t * @class Page\r\n\t * @implements {IPageNode}\r\n\t * @implements {IFilterable}\r\n\t */\r\n\tvar Page = (function () {\r\n\t    /**\r\n\t     * Creates an instance of a Power BI report page.\r\n\t     *\r\n\t     * @param {IReportNode} report\r\n\t     * @param {string} name\r\n\t     * @param {string} [displayName]\r\n\t     * @param {boolean} [isActivePage]\r\n\t     * @param {models.SectionVisibility} [visibility]\r\n\t     */\r\n\t    function Page(report, name, displayName, isActivePage, visibility, defaultSize, defaultDisplayOption) {\r\n\t        this.report = report;\r\n\t        this.name = name;\r\n\t        this.displayName = displayName;\r\n\t        this.isActive = isActivePage;\r\n\t        this.visibility = visibility;\r\n\t        this.defaultSize = defaultSize;\r\n\t        this.defaultDisplayOption = defaultDisplayOption;\r\n\t    }\r\n\t    /**\r\n\t     * Gets all page level filters within the report.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * page.getFilters()\r\n\t     *  .then(filters => { ... });\r\n\t     * ```\r\n\t     *\r\n\t     * @returns {(Promise<models.IFilter[]>)}\r\n\t     */\r\n\t    Page.prototype.getFilters = function () {\r\n\t        return this.report.service.hpm.get(\"/report/pages/\" + this.name + \"/filters\", { uid: this.report.config.uniqueId }, this.report.iframe.contentWindow)\r\n\t            .then(function (response) { return response.body; }, function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Removes all filters from this page of the report.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * page.removeFilters();\r\n\t     * ```\r\n\t     *\r\n\t     * @returns {Promise<void>}\r\n\t     */\r\n\t    Page.prototype.removeFilters = function () {\r\n\t        return this.setFilters([]);\r\n\t    };\r\n\t    /**\r\n\t     * Makes the current page the active page of the report.\r\n\t     *\r\n\t     * ```javascripot\r\n\t     * page.setActive();\r\n\t     * ```\r\n\t     *\r\n\t     * @returns {Promise<void>}\r\n\t     */\r\n\t    Page.prototype.setActive = function () {\r\n\t        var page = {\r\n\t            name: this.name,\r\n\t            displayName: null,\r\n\t            isActive: true\r\n\t        };\r\n\t        return this.report.service.hpm.put('/report/pages/active', page, { uid: this.report.config.uniqueId }, this.report.iframe.contentWindow)\r\n\t            .catch(function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Sets all filters on the current page.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * page.setFilters(filters);\r\n\t     *   .catch(errors => { ... });\r\n\t     * ```\r\n\t     *\r\n\t     * @param {(models.IFilter[])} filters\r\n\t     * @returns {Promise<void>}\r\n\t     */\r\n\t    Page.prototype.setFilters = function (filters) {\r\n\t        return this.report.service.hpm.put(\"/report/pages/\" + this.name + \"/filters\", filters, { uid: this.report.config.uniqueId }, this.report.iframe.contentWindow)\r\n\t            .catch(function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Gets all the visuals on the page.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * page.getVisuals()\r\n\t     *   .then(visuals => { ... });\r\n\t     * ```\r\n\t     *\r\n\t     * @returns {Promise<VisualDescriptor[]>}\r\n\t     */\r\n\t    Page.prototype.getVisuals = function () {\r\n\t        var _this = this;\r\n\t        if (utils.isRDLEmbed(this.report.config.embedUrl)) {\r\n\t            return Promise.reject(errors.APINotSupportedForRDLError);\r\n\t        }\r\n\t        return this.report.service.hpm.get(\"/report/pages/\" + this.name + \"/visuals\", { uid: this.report.config.uniqueId }, this.report.iframe.contentWindow)\r\n\t            .then(function (response) {\r\n\t            return response.body\r\n\t                .map(function (visual) {\r\n\t                return new visualDescriptor_1.VisualDescriptor(_this, visual.name, visual.title, visual.type, visual.layout);\r\n\t            });\r\n\t        }, function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Checks if page has layout.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * page.hasLayout(layoutType)\r\n\t     *  .then(hasLayout: boolean => { ... });\r\n\t     * ```\r\n\t     *\r\n\t     * @returns {(Promise<boolean>)}\r\n\t     */\r\n\t    Page.prototype.hasLayout = function (layoutType) {\r\n\t        if (utils.isRDLEmbed(this.report.config.embedUrl)) {\r\n\t            return Promise.reject(errors.APINotSupportedForRDLError);\r\n\t        }\r\n\t        var layoutTypeEnum = models.LayoutType[layoutType];\r\n\t        return this.report.service.hpm.get(\"/report/pages/\" + this.name + \"/layoutTypes/\" + layoutTypeEnum, { uid: this.report.config.uniqueId }, this.report.iframe.contentWindow)\r\n\t            .then(function (response) { return response.body; }, function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    return Page;\r\n\t}());\r\n\texports.Page = Page;\r\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\n\t/**\r\n\t * A Power BI visual within a page\r\n\t *\r\n\t * @export\r\n\t * @class VisualDescriptor\r\n\t * @implements {IVisualNode}\r\n\t */\r\n\tvar VisualDescriptor = (function () {\r\n\t    function VisualDescriptor(page, name, title, type, layout) {\r\n\t        this.name = name;\r\n\t        this.title = title;\r\n\t        this.type = type;\r\n\t        this.layout = layout;\r\n\t        this.page = page;\r\n\t    }\r\n\t    /**\r\n\t     * Gets all visual level filters of the current visual.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * visual.getFilters()\r\n\t     *  .then(filters => { ... });\r\n\t     * ```\r\n\t     *\r\n\t     * @returns {(Promise<models.IFilter[]>)}\r\n\t     */\r\n\t    VisualDescriptor.prototype.getFilters = function () {\r\n\t        return this.page.report.service.hpm.get(\"/report/pages/\" + this.page.name + \"/visuals/\" + this.name + \"/filters\", { uid: this.page.report.config.uniqueId }, this.page.report.iframe.contentWindow)\r\n\t            .then(function (response) { return response.body; }, function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Removes all filters from the current visual.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * visual.removeFilters();\r\n\t     * ```\r\n\t     *\r\n\t     * @returns {Promise<void>}\r\n\t     */\r\n\t    VisualDescriptor.prototype.removeFilters = function () {\r\n\t        return this.setFilters([]);\r\n\t    };\r\n\t    /**\r\n\t     * Sets the filters on the current visual to 'filters'.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * visual.setFilters(filters);\r\n\t     *   .catch(errors => { ... });\r\n\t     * ```\r\n\t     *\r\n\t     * @param {(models.IFilter[])} filters\r\n\t     * @returns {Promise<void>}\r\n\t     */\r\n\t    VisualDescriptor.prototype.setFilters = function (filters) {\r\n\t        return this.page.report.service.hpm.put(\"/report/pages/\" + this.page.name + \"/visuals/\" + this.name + \"/filters\", filters, { uid: this.page.report.config.uniqueId }, this.page.report.iframe.contentWindow)\r\n\t            .catch(function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Exports Visual data.\r\n\t     * Can export up to 30K rows.\r\n\t     * @param rows: Optional. Default value is 30K, maximum value is 30K as well.\r\n\t     * @param exportDataType: Optional. Default is models.ExportDataType.Summarized.\r\n\t     * ```javascript\r\n\t     * visual.exportData()\r\n\t     *  .then(data => { ... });\r\n\t     * ```\r\n\t     *\r\n\t     * @returns {(Promise<models.ExportDataType>)}\r\n\t     */\r\n\t    VisualDescriptor.prototype.exportData = function (exportDataType, rows) {\r\n\t        var exportDataRequestBody = {\r\n\t            rows: rows,\r\n\t            exportDataType: exportDataType\r\n\t        };\r\n\t        return this.page.report.service.hpm.post(\"/report/pages/\" + this.page.name + \"/visuals/\" + this.name + \"/exportData\", exportDataRequestBody, { uid: this.page.report.config.uniqueId }, this.page.report.iframe.contentWindow)\r\n\t            .then(function (response) { return response.body; }, function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Set slicer state.\r\n\t     * Works only for visuals of type slicer.\r\n\t     * @param state: A new state which contains the slicer filters.\r\n\t     * ```javascript\r\n\t     * visual.setSlicerState()\r\n\t     *  .then(() => { ... });\r\n\t     * ```\r\n\t     */\r\n\t    VisualDescriptor.prototype.setSlicerState = function (state) {\r\n\t        return this.page.report.service.hpm.put(\"/report/pages/\" + this.page.name + \"/visuals/\" + this.name + \"/slicer\", state, { uid: this.page.report.config.uniqueId }, this.page.report.iframe.contentWindow)\r\n\t            .catch(function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Get slicer state.\r\n\t     * Works only for visuals of type slicer.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * visual.getSlicerState()\r\n\t     *  .then(state => { ... });\r\n\t     * ```\r\n\t     *\r\n\t     * @returns {(Promise<models.ISlicerState>)}\r\n\t     */\r\n\t    VisualDescriptor.prototype.getSlicerState = function () {\r\n\t        return this.page.report.service.hpm.get(\"/report/pages/\" + this.page.name + \"/visuals/\" + this.name + \"/slicer\", { uid: this.page.report.config.uniqueId }, this.page.report.iframe.contentWindow)\r\n\t            .then(function (response) { return response.body; }, function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Clone existing visual to a new instance.\r\n\t     *\r\n\t     * @returns {(Promise<models.ICloneVisualResponse>)}\r\n\t     */\r\n\t    VisualDescriptor.prototype.clone = function (request) {\r\n\t        if (request === void 0) { request = {}; }\r\n\t        return this.page.report.service.hpm.post(\"/report/pages/\" + this.page.name + \"/visuals/\" + this.name + \"/clone\", request, { uid: this.page.report.config.uniqueId }, this.page.report.iframe.contentWindow)\r\n\t            .then(function (response) { return response.body; }, function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Sort a visual by dataField and direction.\r\n\t     *\r\n\t     * @param request: Sort by visual request.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * visual.sortBy(request)\r\n\t     *  .then(() => { ... });\r\n\t     * ```\r\n\t     */\r\n\t    VisualDescriptor.prototype.sortBy = function (request) {\r\n\t        return this.page.report.service.hpm.put(\"/report/pages/\" + this.page.name + \"/visuals/\" + this.name + \"/sortBy\", request, { uid: this.page.report.config.uniqueId }, this.page.report.iframe.contentWindow)\r\n\t            .catch(function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    return VisualDescriptor;\r\n\t}());\r\n\texports.VisualDescriptor = VisualDescriptor;\r\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports) {\n\n\tvar Defaults = (function () {\r\n\t    function Defaults() {\r\n\t    }\r\n\t    Defaults.defaultSettings = {\r\n\t        filterPaneEnabled: true\r\n\t    };\r\n\t    Defaults.defaultQnaSettings = {\r\n\t        filterPaneEnabled: false\r\n\t    };\r\n\t    return Defaults;\r\n\t}());\r\n\texports.Defaults = Defaults;\r\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar utils = __webpack_require__(3);\r\n\tvar errors = __webpack_require__(6);\r\n\t/**\r\n\t * Manages report bookmarks.\r\n\t *\r\n\t * @export\r\n\t * @class BookmarksManager\r\n\t * @implements {IBookmarksManager}\r\n\t */\r\n\tvar BookmarksManager = (function () {\r\n\t    function BookmarksManager(service, config, iframe) {\r\n\t        this.service = service;\r\n\t        this.config = config;\r\n\t        this.iframe = iframe;\r\n\t    }\r\n\t    /**\r\n\t     * Gets bookmarks that are defined in the report.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * // Gets bookmarks that are defined in the report\r\n\t     * bookmarksManager.getBookmarks()\r\n\t     *   .then(bookmarks => {\r\n\t     *     ...\r\n\t     *   });\r\n\t     * ```\r\n\t     *\r\n\t     * @returns {Promise<models.IReportBookmark[]>}\r\n\t     */\r\n\t    BookmarksManager.prototype.getBookmarks = function () {\r\n\t        if (utils.isRDLEmbed(this.config.embedUrl)) {\r\n\t            return Promise.reject(errors.APINotSupportedForRDLError);\r\n\t        }\r\n\t        return this.service.hpm.get(\"/report/bookmarks\", { uid: this.config.uniqueId }, this.iframe.contentWindow)\r\n\t            .then(function (response) { return response.body; }, function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Apply bookmark By name.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * bookmarksManager.apply(bookmarkName)\r\n\t     * ```\r\n\t     *\r\n\t     * @returns {Promise<void>}\r\n\t     */\r\n\t    BookmarksManager.prototype.apply = function (bookmarkName) {\r\n\t        if (utils.isRDLEmbed(this.config.embedUrl)) {\r\n\t            return Promise.reject(errors.APINotSupportedForRDLError);\r\n\t        }\r\n\t        var request = {\r\n\t            name: bookmarkName\r\n\t        };\r\n\t        return this.service.hpm.post(\"/report/bookmarks/applyByName\", request, { uid: this.config.uniqueId }, this.iframe.contentWindow)\r\n\t            .catch(function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Play bookmarks: Enter or Exit bookmarks presentation mode.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * // Enter presentation mode.\r\n\t     * bookmarksManager.play(true)\r\n\t     * ```\r\n\t     *\r\n\t     * @returns {Promise<void>}\r\n\t     */\r\n\t    BookmarksManager.prototype.play = function (playMode) {\r\n\t        if (utils.isRDLEmbed(this.config.embedUrl)) {\r\n\t            return Promise.reject(errors.APINotSupportedForRDLError);\r\n\t        }\r\n\t        var playBookmarkRequest = {\r\n\t            playMode: playMode\r\n\t        };\r\n\t        return this.service.hpm.post(\"/report/bookmarks/play\", playBookmarkRequest, { uid: this.config.uniqueId }, this.iframe.contentWindow)\r\n\t            .catch(function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Capture bookmark from current state.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * bookmarksManager.capture()\r\n\t     * ```\r\n\t     *\r\n\t     * @returns {Promise<models.IReportBookmark>}\r\n\t     */\r\n\t    BookmarksManager.prototype.capture = function () {\r\n\t        if (utils.isRDLEmbed(this.config.embedUrl)) {\r\n\t            return Promise.reject(errors.APINotSupportedForRDLError);\r\n\t        }\r\n\t        return this.service.hpm.post(\"/report/bookmarks/capture\", null, { uid: this.config.uniqueId }, this.iframe.contentWindow)\r\n\t            .then(function (response) { return response.body; }, function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Apply bookmark state.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * bookmarksManager.applyState(bookmarkName)\r\n\t     * ```\r\n\t     *\r\n\t     * @returns {Promise<void>}\r\n\t     */\r\n\t    BookmarksManager.prototype.applyState = function (state) {\r\n\t        if (utils.isRDLEmbed(this.config.embedUrl)) {\r\n\t            return Promise.reject(errors.APINotSupportedForRDLError);\r\n\t        }\r\n\t        var request = {\r\n\t            state: state\r\n\t        };\r\n\t        return this.service.hpm.post(\"/report/bookmarks/applyState\", request, { uid: this.config.uniqueId }, this.iframe.contentWindow)\r\n\t            .catch(function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    return BookmarksManager;\r\n\t}());\r\n\texports.BookmarksManager = BookmarksManager;\r\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar models = __webpack_require__(4);\r\n\tvar embed = __webpack_require__(2);\r\n\tvar utils = __webpack_require__(3);\r\n\tvar defaults_1 = __webpack_require__(9);\r\n\tvar Create = (function (_super) {\r\n\t    __extends(Create, _super);\r\n\t    function Create(service, element, config, phasedRender) {\r\n\t        _super.call(this, service, element, config, /* iframe */ undefined, phasedRender);\r\n\t    }\r\n\t    /**\r\n\t     * Gets the dataset ID from the first available location: createConfig or embed url.\r\n\t     *\r\n\t     * @returns {string}\r\n\t     */\r\n\t    Create.prototype.getId = function () {\r\n\t        var datasetId = (this.createConfig && this.createConfig.datasetId) ? this.createConfig.datasetId : Create.findIdFromEmbedUrl(this.config.embedUrl);\r\n\t        if (typeof datasetId !== 'string' || datasetId.length === 0) {\r\n\t            throw new Error('Dataset id is required, but it was not found. You must provide an id either as part of embed configuration.');\r\n\t        }\r\n\t        return datasetId;\r\n\t    };\r\n\t    /**\r\n\t     * Validate create report configuration.\r\n\t     */\r\n\t    Create.prototype.validate = function (config) {\r\n\t        return models.validateCreateReport(config);\r\n\t    };\r\n\t    /**\r\n\t     * Populate config for create\r\n\t     *\r\n\t     * @param {IEmbedConfigurationBase}\r\n\t     * @returns {void}\r\n\t     */\r\n\t    Create.prototype.populateConfig = function (baseConfig) {\r\n\t        _super.prototype.populateConfig.call(this, baseConfig);\r\n\t        // TODO: Change when Object.assign is available.\r\n\t        var settings = utils.assign({}, defaults_1.Defaults.defaultSettings, baseConfig.settings);\r\n\t        this.config = utils.assign({ settings: settings }, baseConfig);\r\n\t        var config = this.config;\r\n\t        this.createConfig = {\r\n\t            accessToken: config.accessToken,\r\n\t            datasetId: config.datasetId || this.getId(),\r\n\t            groupId: config.groupId,\r\n\t            settings: settings,\r\n\t            tokenType: config.tokenType,\r\n\t            theme: config.theme\r\n\t        };\r\n\t    };\r\n\t    /**\r\n\t     * checks if the report is saved.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * report.isSaved()\r\n\t     * ```\r\n\t     *\r\n\t     * @returns {Promise<boolean>}\r\n\t     */\r\n\t    Create.prototype.isSaved = function () {\r\n\t        return utils.isSavedInternal(this.service.hpm, this.config.uniqueId, this.iframe.contentWindow);\r\n\t    };\r\n\t    /**\r\n\t     * Adds the ability to get datasetId from url.\r\n\t     * (e.g. http://embedded.powerbi.com/appTokenReportEmbed?datasetId=854846ed-2106-4dc2-bc58-eb77533bf2f1).\r\n\t     *\r\n\t     * By extracting the ID we can ensure that the ID is always explicitly provided as part of the create configuration.\r\n\t     *\r\n\t     * @static\r\n\t     * @param {string} url\r\n\t     * @returns {string}\r\n\t     */\r\n\t    Create.findIdFromEmbedUrl = function (url) {\r\n\t        var datasetIdRegEx = /datasetId=\"?([^&]+)\"?/;\r\n\t        var datasetIdMatch = url.match(datasetIdRegEx);\r\n\t        var datasetId;\r\n\t        if (datasetIdMatch) {\r\n\t            datasetId = datasetIdMatch[1];\r\n\t        }\r\n\t        return datasetId;\r\n\t    };\r\n\t    return Create;\r\n\t}(embed.Embed));\r\n\texports.Create = Create;\r\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar embed = __webpack_require__(2);\r\n\tvar models = __webpack_require__(4);\r\n\tvar utils = __webpack_require__(3);\r\n\tvar defaults_1 = __webpack_require__(9);\r\n\t/**\r\n\t * A Power BI Dashboard embed component\r\n\t *\r\n\t * @export\r\n\t * @class Dashboard\r\n\t * @extends {embed.Embed}\r\n\t * @implements {IDashboardNode}\r\n\t * @implements {IFilterable}\r\n\t */\r\n\tvar Dashboard = (function (_super) {\r\n\t    __extends(Dashboard, _super);\r\n\t    /**\r\n\t     * Creates an instance of a Power BI Dashboard.\r\n\t     *\r\n\t     * @param {service.Service} service\r\n\t     * @param {HTMLElement} element\r\n\t     */\r\n\t    function Dashboard(service, element, config, phasedRender) {\r\n\t        _super.call(this, service, element, config, /* iframe */ undefined, phasedRender);\r\n\t        this.loadPath = \"/dashboard/load\";\r\n\t        this.phasedLoadPath = \"/dashboard/prepare\";\r\n\t        Array.prototype.push.apply(this.allowedEvents, Dashboard.allowedEvents);\r\n\t    }\r\n\t    /**\r\n\t     * This adds backwards compatibility for older config which used the dashboardId query param to specify dashboard id.\r\n\t     * E.g. https://powerbi-df.analysis-df.windows.net/dashboardEmbedHost?dashboardId=e9363c62-edb6-4eac-92d3-2199c5ca2a9e\r\n\t     *\r\n\t     * By extracting the id we can ensure id is always explicitly provided as part of the load configuration.\r\n\t     *\r\n\t     * @static\r\n\t     * @param {string} url\r\n\t     * @returns {string}\r\n\t     */\r\n\t    Dashboard.findIdFromEmbedUrl = function (url) {\r\n\t        var dashboardIdRegEx = /dashboardId=\"?([^&]+)\"?/;\r\n\t        var dashboardIdMatch = url.match(dashboardIdRegEx);\r\n\t        var dashboardId;\r\n\t        if (dashboardIdMatch) {\r\n\t            dashboardId = dashboardIdMatch[1];\r\n\t        }\r\n\t        return dashboardId;\r\n\t    };\r\n\t    /**\r\n\t     * Get dashboard id from first available location: options, attribute, embed url.\r\n\t     *\r\n\t     * @returns {string}\r\n\t     */\r\n\t    Dashboard.prototype.getId = function () {\r\n\t        var config = this.config;\r\n\t        var dashboardId = config.id || this.element.getAttribute(Dashboard.dashboardIdAttribute) || Dashboard.findIdFromEmbedUrl(config.embedUrl);\r\n\t        if (typeof dashboardId !== 'string' || dashboardId.length === 0) {\r\n\t            throw new Error(\"Dashboard id is required, but it was not found. You must provide an id either as part of embed configuration or as attribute '\" + Dashboard.dashboardIdAttribute + \"'.\");\r\n\t        }\r\n\t        return dashboardId;\r\n\t    };\r\n\t    /**\r\n\t     * Validate load configuration.\r\n\t     */\r\n\t    Dashboard.prototype.validate = function (baseConfig) {\r\n\t        var config = baseConfig;\r\n\t        var error = models.validateDashboardLoad(config);\r\n\t        return error ? error : this.ValidatePageView(config.pageView);\r\n\t    };\r\n\t    /**\r\n\t     * Populate config for load config\r\n\t     *\r\n\t     * @param {IEmbedConfigurationBase}\r\n\t     * @returns {void}\r\n\t     */\r\n\t    Dashboard.prototype.populateConfig = function (baseConfig) {\r\n\t        var config = baseConfig;\r\n\t        _super.prototype.populateConfig.call(this, config);\r\n\t        // TODO: Change when Object.assign is available.\r\n\t        var settings = utils.assign({}, defaults_1.Defaults.defaultSettings, config.settings);\r\n\t        config = utils.assign({ settings: settings }, config);\r\n\t        config.id = this.getId();\r\n\t        this.config = config;\r\n\t    };\r\n\t    /**\r\n\t     * Validate that pageView has a legal value: if page view is defined it must have one of the values defined in models.PageView\r\n\t     */\r\n\t    Dashboard.prototype.ValidatePageView = function (pageView) {\r\n\t        if (pageView && pageView !== \"fitToWidth\" && pageView !== \"oneColumn\" && pageView !== \"actualSize\") {\r\n\t            return [{ message: \"pageView must be one of the followings: fitToWidth, oneColumn, actualSize\" }];\r\n\t        }\r\n\t    };\r\n\t    Dashboard.allowedEvents = [\"tileClicked\", \"error\"];\r\n\t    Dashboard.dashboardIdAttribute = 'powerbi-dashboard-id';\r\n\t    Dashboard.typeAttribute = 'powerbi-type';\r\n\t    Dashboard.type = \"Dashboard\";\r\n\t    return Dashboard;\r\n\t}(embed.Embed));\r\n\texports.Dashboard = Dashboard;\r\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar models = __webpack_require__(4);\r\n\tvar embed = __webpack_require__(2);\r\n\tvar utils = __webpack_require__(3);\r\n\tvar defaults_1 = __webpack_require__(9);\r\n\t/**\r\n\t * The Power BI tile embed component\r\n\t *\r\n\t * @export\r\n\t * @class Tile\r\n\t * @extends {Embed}\r\n\t */\r\n\tvar Tile = (function (_super) {\r\n\t    __extends(Tile, _super);\r\n\t    function Tile(service, element, baseConfig, phasedRender) {\r\n\t        var config = baseConfig;\r\n\t        _super.call(this, service, element, config, /* iframe */ undefined, phasedRender);\r\n\t        this.loadPath = \"/tile/load\";\r\n\t        Array.prototype.push.apply(this.allowedEvents, Tile.allowedEvents);\r\n\t    }\r\n\t    /**\r\n\t     * The ID of the tile\r\n\t     *\r\n\t     * @returns {string}\r\n\t     */\r\n\t    Tile.prototype.getId = function () {\r\n\t        var config = this.config;\r\n\t        var tileId = config.id || Tile.findIdFromEmbedUrl(this.config.embedUrl);\r\n\t        if (typeof tileId !== 'string' || tileId.length === 0) {\r\n\t            throw new Error(\"Tile id is required, but it was not found. You must provide an id either as part of embed configuration.\");\r\n\t        }\r\n\t        return tileId;\r\n\t    };\r\n\t    /**\r\n\t     * Validate load configuration.\r\n\t     */\r\n\t    Tile.prototype.validate = function (config) {\r\n\t        var embedConfig = config;\r\n\t        return models.validateTileLoad(embedConfig);\r\n\t    };\r\n\t    /**\r\n\t     * Populate config for load config\r\n\t     *\r\n\t     * @param {IEmbedConfigurationBase}\r\n\t     * @returns {void}\r\n\t     */\r\n\t    Tile.prototype.populateConfig = function (baseConfig) {\r\n\t        var config = baseConfig;\r\n\t        _super.prototype.populateConfig.call(this, config);\r\n\t        // TODO: Change when Object.assign is available.\r\n\t        var settings = utils.assign({}, defaults_1.Defaults.defaultSettings, config.settings);\r\n\t        config = utils.assign({ settings: settings }, config);\r\n\t        config.id = this.getId();\r\n\t        this.config = config;\r\n\t    };\r\n\t    /**\r\n\t     * Adds the ability to get tileId from url.\r\n\t     * By extracting the ID we can ensure that the ID is always explicitly provided as part of the load configuration.\r\n\t     *\r\n\t     * @static\r\n\t     * @param {string} url\r\n\t     * @returns {string}\r\n\t     */\r\n\t    Tile.findIdFromEmbedUrl = function (url) {\r\n\t        var tileIdRegEx = /tileId=\"?([^&]+)\"?/;\r\n\t        var tileIdMatch = url.match(tileIdRegEx);\r\n\t        var tileId;\r\n\t        if (tileIdMatch) {\r\n\t            tileId = tileIdMatch[1];\r\n\t        }\r\n\t        return tileId;\r\n\t    };\r\n\t    Tile.type = \"Tile\";\r\n\t    Tile.allowedEvents = [\"tileClicked\", \"tileLoaded\"];\r\n\t    return Tile;\r\n\t}(embed.Embed));\r\n\texports.Tile = Tile;\r\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar models = __webpack_require__(4);\r\n\tvar embed = __webpack_require__(2);\r\n\t/**\r\n\t * The Power BI Qna embed component\r\n\t *\r\n\t * @export\r\n\t * @class Qna\r\n\t * @extends {Embed}\r\n\t */\r\n\tvar Qna = (function (_super) {\r\n\t    __extends(Qna, _super);\r\n\t    function Qna(service, element, config, phasedRender) {\r\n\t        _super.call(this, service, element, config, /* iframe */ undefined, phasedRender);\r\n\t        this.loadPath = \"/qna/load\";\r\n\t        this.phasedLoadPath = \"/qna/prepare\";\r\n\t        Array.prototype.push.apply(this.allowedEvents, Qna.allowedEvents);\r\n\t    }\r\n\t    /**\r\n\t     * The ID of the Qna embed component\r\n\t     *\r\n\t     * @returns {string}\r\n\t     */\r\n\t    Qna.prototype.getId = function () {\r\n\t        return null;\r\n\t    };\r\n\t    /**\r\n\t     * Change the question of the Q&A embed component\r\n\t     *\r\n\t     * @param question - question which will render Q&A data\r\n\t     * @returns {string}\r\n\t     */\r\n\t    Qna.prototype.setQuestion = function (question) {\r\n\t        var qnaData = {\r\n\t            question: question\r\n\t        };\r\n\t        return this.service.hpm.post('/qna/interpret', qnaData, { uid: this.config.uniqueId }, this.iframe.contentWindow)\r\n\t            .catch(function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Validate load configuration.\r\n\t     */\r\n\t    Qna.prototype.validate = function (config) {\r\n\t        return models.validateLoadQnaConfiguration(config);\r\n\t    };\r\n\t    Qna.type = \"Qna\";\r\n\t    Qna.allowedEvents = [\"loaded\", \"visualRendered\"];\r\n\t    return Qna;\r\n\t}(embed.Embed));\r\n\texports.Qna = Qna;\r\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar models = __webpack_require__(4);\r\n\tvar report_1 = __webpack_require__(5);\r\n\t/**\r\n\t * The Power BI Visual embed component\r\n\t *\r\n\t * @export\r\n\t * @class Visual\r\n\t */\r\n\tvar Visual = (function (_super) {\r\n\t    __extends(Visual, _super);\r\n\t    /**\r\n\t     * Creates an instance of a Power BI Single Visual.\r\n\t     *\r\n\t     * @param {service.Service} service\r\n\t     * @param {HTMLElement} element\r\n\t     * @param {embed.IEmbedConfiguration} config\r\n\t     */\r\n\t    function Visual(service, element, baseConfig, phasedRender, iframe) {\r\n\t        _super.call(this, service, element, baseConfig, phasedRender, iframe);\r\n\t    }\r\n\t    Visual.prototype.load = function (baseConfig, phasedRender) {\r\n\t        var config = baseConfig;\r\n\t        if (typeof config.pageName !== 'string' || config.pageName.length === 0) {\r\n\t            throw new Error(\"Page name is required when embedding a visual.\");\r\n\t        }\r\n\t        if (typeof config.visualName !== 'string' || config.visualName.length === 0) {\r\n\t            throw new Error(\"Visual name is required, but it was not found. You must provide a visual name as part of embed configuration.\");\r\n\t        }\r\n\t        // calculate custom layout settings and override config.\r\n\t        var width = config.width ? config.width : this.iframe.offsetWidth;\r\n\t        var height = config.height ? config.height : this.iframe.offsetHeight;\r\n\t        var pageSize = {\r\n\t            type: models.PageSizeType.Custom,\r\n\t            width: width,\r\n\t            height: height,\r\n\t        };\r\n\t        var pagesLayout = {};\r\n\t        pagesLayout[config.pageName] = {\r\n\t            defaultLayout: {\r\n\t                displayState: {\r\n\t                    mode: models.VisualContainerDisplayMode.Hidden\r\n\t                }\r\n\t            },\r\n\t            visualsLayout: {}\r\n\t        };\r\n\t        pagesLayout[config.pageName].visualsLayout[config.visualName] = {\r\n\t            displayState: {\r\n\t                mode: models.VisualContainerDisplayMode.Visible\r\n\t            },\r\n\t            x: 1,\r\n\t            y: 1,\r\n\t            z: 1,\r\n\t            width: pageSize.width,\r\n\t            height: pageSize.height\r\n\t        };\r\n\t        config.settings = config.settings || {};\r\n\t        config.settings.filterPaneEnabled = false;\r\n\t        config.settings.navContentPaneEnabled = false;\r\n\t        config.settings.layoutType = models.LayoutType.Custom;\r\n\t        config.settings.customLayout = {\r\n\t            displayOption: models.DisplayOption.FitToPage,\r\n\t            pageSize: pageSize,\r\n\t            pagesLayout: pagesLayout\r\n\t        };\r\n\t        return _super.prototype.load.call(this, config, phasedRender);\r\n\t    };\r\n\t    /**\r\n\t     * Gets the list of pages within the report - not supported in visual embed.\r\n\t     *\r\n\t     * @returns {Promise<Page[]>}\r\n\t     */\r\n\t    Visual.prototype.getPages = function () {\r\n\t        throw Visual.GetPagesNotSupportedError;\r\n\t    };\r\n\t    /**\r\n\t     * Sets the active page of the report - not supported in visual embed.\r\n\t     *\r\n\t     * @param {string} pageName\r\n\t     * @returns {Promise<void>}\r\n\t     */\r\n\t    Visual.prototype.setPage = function (pageName) {\r\n\t        throw Visual.SetPageNotSupportedError;\r\n\t    };\r\n\t    /**\r\n\t     * Gets filters that are applied to the filter level.\r\n\t     * Default filter level is visual level.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * visual.getFilters(filtersLevel)\r\n\t     *   .then(filters => {\r\n\t     *     ...\r\n\t     *   });\r\n\t     * ```\r\n\t     *\r\n\t     * @returns {Promise<models.IFilter[]>}\r\n\t     */\r\n\t    Visual.prototype.getFilters = function (filtersLevel) {\r\n\t        var url = this.getFiltersLevelUrl(filtersLevel);\r\n\t        return this.service.hpm.get(url, { uid: this.config.uniqueId }, this.iframe.contentWindow)\r\n\t            .then(function (response) { return response.body; }, function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Sets filters at the filter level.\r\n\t     * Default filter level is visual level.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * const filters: [\r\n\t     *    ...\r\n\t     * ];\r\n\t     *\r\n\t     * visual.setFilters(filters, filtersLevel)\r\n\t     *  .catch(errors => {\r\n\t     *    ...\r\n\t     *  });\r\n\t     * ```\r\n\t     *\r\n\t     * @param {(models.IFilter[])} filters\r\n\t     * @returns {Promise<void>}\r\n\t     */\r\n\t    Visual.prototype.setFilters = function (filters, filtersLevel) {\r\n\t        var url = this.getFiltersLevelUrl(filtersLevel);\r\n\t        return this.service.hpm.put(url, filters, { uid: this.config.uniqueId }, this.iframe.contentWindow)\r\n\t            .catch(function (response) {\r\n\t            throw response.body;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Removes all filters from the current filter level.\r\n\t     * Default filter level is visual level.\r\n\t     *\r\n\t     * ```javascript\r\n\t     * visual.removeFilters(filtersLevel);\r\n\t     * ```\r\n\t     *\r\n\t     * @returns {Promise<void>}\r\n\t     */\r\n\t    Visual.prototype.removeFilters = function (filtersLevel) {\r\n\t        return this.setFilters([], filtersLevel);\r\n\t    };\r\n\t    Visual.prototype.getFiltersLevelUrl = function (filtersLevel) {\r\n\t        var config = this.config;\r\n\t        switch (filtersLevel) {\r\n\t            case models.FiltersLevel.Report:\r\n\t                return \"/report/filters\";\r\n\t            case models.FiltersLevel.Page:\r\n\t                return \"/report/pages/\" + config.pageName + \"/filters\";\r\n\t            default:\r\n\t                return \"/report/pages/\" + config.pageName + \"/visuals/\" + config.visualName + \"/filters\";\r\n\t        }\r\n\t    };\r\n\t    Visual.type = \"visual\";\r\n\t    Visual.GetPagesNotSupportedError = \"Get pages is not supported while embedding a visual.\";\r\n\t    Visual.SetPageNotSupportedError = \"Set page is not supported while embedding a visual.\";\r\n\t    return Visual;\r\n\t}(report_1.Report));\r\n\texports.Visual = Visual;\r\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar config_1 = __webpack_require__(17);\r\n\tvar wpmp = __webpack_require__(18);\r\n\tvar hpm = __webpack_require__(19);\r\n\tvar router = __webpack_require__(20);\r\n\texports.hpmFactory = function (wpmp, defaultTargetWindow, sdkVersion, sdkType) {\r\n\t    if (sdkVersion === void 0) { sdkVersion = config_1.default.version; }\r\n\t    if (sdkType === void 0) { sdkType = config_1.default.type; }\r\n\t    return new hpm.HttpPostMessage(wpmp, {\r\n\t        'x-sdk-type': sdkType,\r\n\t        'x-sdk-version': sdkVersion\r\n\t    }, defaultTargetWindow);\r\n\t};\r\n\texports.wpmpFactory = function (name, logMessages, eventSourceOverrideWindow) {\r\n\t    return new wpmp.WindowPostMessageProxy({\r\n\t        processTrackingProperties: {\r\n\t            addTrackingProperties: hpm.HttpPostMessage.addTrackingProperties,\r\n\t            getTrackingProperties: hpm.HttpPostMessage.getTrackingProperties,\r\n\t        },\r\n\t        isErrorMessage: hpm.HttpPostMessage.isErrorMessage,\r\n\t        suppressWarnings: true,\r\n\t        name: name,\r\n\t        logMessages: logMessages,\r\n\t        eventSourceOverrideWindow: eventSourceOverrideWindow\r\n\t    });\r\n\t};\r\n\texports.routerFactory = function (wpmp) {\r\n\t    return new router.Router(wpmp);\r\n\t};\r\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports) {\n\n\tvar config = {\r\n\t    version: '2.8.0',\r\n\t    type: 'js'\r\n\t};\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\texports.default = config;\r\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*! window-post-message-proxy v0.2.5 | (c) 2016 Microsoft Corporation MIT */\n\t(function webpackUniversalModuleDefinition(root, factory) {\n\t\tif(true)\n\t\t\tmodule.exports = factory();\n\t\telse {}\n\t})(this, function() {\n\treturn /******/ (function(modules) { // webpackBootstrap\n\t/******/ \t// The module cache\n\t/******/ \tvar installedModules = {};\n\t/******/\n\t/******/ \t// The require function\n\t/******/ \tfunction __webpack_require__(moduleId) {\n\t/******/\n\t/******/ \t\t// Check if module is in cache\n\t/******/ \t\tif(installedModules[moduleId])\n\t/******/ \t\t\treturn installedModules[moduleId].exports;\n\t/******/\n\t/******/ \t\t// Create a new module (and put it into the cache)\n\t/******/ \t\tvar module = installedModules[moduleId] = {\n\t/******/ \t\t\texports: {},\n\t/******/ \t\t\tid: moduleId,\n\t/******/ \t\t\tloaded: false\n\t/******/ \t\t};\n\t/******/\n\t/******/ \t\t// Execute the module function\n\t/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t/******/\n\t/******/ \t\t// Flag the module as loaded\n\t/******/ \t\tmodule.loaded = true;\n\t/******/\n\t/******/ \t\t// Return the exports of the module\n\t/******/ \t\treturn module.exports;\n\t/******/ \t}\n\t/******/\n\t/******/\n\t/******/ \t// expose the modules object (__webpack_modules__)\n\t/******/ \t__webpack_require__.m = modules;\n\t/******/\n\t/******/ \t// expose the module cache\n\t/******/ \t__webpack_require__.c = installedModules;\n\t/******/\n\t/******/ \t// __webpack_public_path__\n\t/******/ \t__webpack_require__.p = \"\";\n\t/******/\n\t/******/ \t// Load entry module and return exports\n\t/******/ \treturn __webpack_require__(0);\n\t/******/ })\n\t/************************************************************************/\n\t/******/ ([\n\t/* 0 */\n\t/***/ (function(module, exports) {\n\t\n\t\t\"use strict\";\r\n\t\tvar WindowPostMessageProxy = (function () {\r\n\t\t    function WindowPostMessageProxy(options) {\r\n\t\t        var _this = this;\r\n\t\t        if (options === void 0) { options = {\r\n\t\t            processTrackingProperties: {\r\n\t\t                addTrackingProperties: WindowPostMessageProxy.defaultAddTrackingProperties,\r\n\t\t                getTrackingProperties: WindowPostMessageProxy.defaultGetTrackingProperties\r\n\t\t            },\r\n\t\t            isErrorMessage: WindowPostMessageProxy.defaultIsErrorMessage,\r\n\t\t            receiveWindow: window,\r\n\t\t            name: WindowPostMessageProxy.createRandomString()\r\n\t\t        }; }\r\n\t\t        this.pendingRequestPromises = {};\r\n\t\t        // save options with defaults\r\n\t\t        this.addTrackingProperties = (options.processTrackingProperties && options.processTrackingProperties.addTrackingProperties) || WindowPostMessageProxy.defaultAddTrackingProperties;\r\n\t\t        this.getTrackingProperties = (options.processTrackingProperties && options.processTrackingProperties.getTrackingProperties) || WindowPostMessageProxy.defaultGetTrackingProperties;\r\n\t\t        this.isErrorMessage = options.isErrorMessage || WindowPostMessageProxy.defaultIsErrorMessage;\r\n\t\t        this.receiveWindow = options.receiveWindow || window;\r\n\t\t        this.name = options.name || WindowPostMessageProxy.createRandomString();\r\n\t\t        this.logMessages = options.logMessages || false;\r\n\t\t        this.eventSourceOverrideWindow = options.eventSourceOverrideWindow;\r\n\t\t        this.suppressWarnings = options.suppressWarnings || false;\r\n\t\t        if (this.logMessages) {\r\n\t\t            console.log(\"new WindowPostMessageProxy created with name: \" + this.name + \" receiving on window: \" + this.receiveWindow.document.title);\r\n\t\t        }\r\n\t\t        // Initialize\r\n\t\t        this.handlers = [];\r\n\t\t        this.windowMessageHandler = function (event) { return _this.onMessageReceived(event); };\r\n\t\t        this.start();\r\n\t\t    }\r\n\t\t    // Static\r\n\t\t    WindowPostMessageProxy.defaultAddTrackingProperties = function (message, trackingProperties) {\r\n\t\t        message[WindowPostMessageProxy.messagePropertyName] = trackingProperties;\r\n\t\t        return message;\r\n\t\t    };\r\n\t\t    WindowPostMessageProxy.defaultGetTrackingProperties = function (message) {\r\n\t\t        return message[WindowPostMessageProxy.messagePropertyName];\r\n\t\t    };\r\n\t\t    WindowPostMessageProxy.defaultIsErrorMessage = function (message) {\r\n\t\t        return !!message.error;\r\n\t\t    };\r\n\t\t    /**\r\n\t\t     * Utility to create a deferred object.\r\n\t\t     */\r\n\t\t    // TODO: Look to use RSVP library instead of doing this manually.\r\n\t\t    // From what I searched RSVP would work better because it has .finally and .deferred; however, it doesn't have Typings information. \r\n\t\t    WindowPostMessageProxy.createDeferred = function () {\r\n\t\t        var deferred = {\r\n\t\t            resolve: null,\r\n\t\t            reject: null,\r\n\t\t            promise: null\r\n\t\t        };\r\n\t\t        var promise = new Promise(function (resolve, reject) {\r\n\t\t            deferred.resolve = resolve;\r\n\t\t            deferred.reject = reject;\r\n\t\t        });\r\n\t\t        deferred.promise = promise;\r\n\t\t        return deferred;\r\n\t\t    };\r\n\t\t    /**\r\n\t\t     * Utility to generate random sequence of characters used as tracking id for promises.\r\n\t\t     */\r\n\t\t    WindowPostMessageProxy.createRandomString = function () {\r\n\t\t        return (Math.random() + 1).toString(36).substring(7);\r\n\t\t    };\r\n\t\t    /**\r\n\t\t     * Adds handler.\r\n\t\t     * If the first handler whose test method returns true will handle the message and provide a response.\r\n\t\t     */\r\n\t\t    WindowPostMessageProxy.prototype.addHandler = function (handler) {\r\n\t\t        this.handlers.push(handler);\r\n\t\t    };\r\n\t\t    /**\r\n\t\t     * Removes handler.\r\n\t\t     * The reference must match the original object that was provided when adding the handler.\r\n\t\t     */\r\n\t\t    WindowPostMessageProxy.prototype.removeHandler = function (handler) {\r\n\t\t        var handlerIndex = this.handlers.indexOf(handler);\r\n\t\t        if (handlerIndex === -1) {\r\n\t\t            throw new Error(\"You attempted to remove a handler but no matching handler was found.\");\r\n\t\t        }\r\n\t\t        this.handlers.splice(handlerIndex, 1);\r\n\t\t    };\r\n\t\t    /**\r\n\t\t     * Start listening to message events.\r\n\t\t     */\r\n\t\t    WindowPostMessageProxy.prototype.start = function () {\r\n\t\t        this.receiveWindow.addEventListener('message', this.windowMessageHandler);\r\n\t\t    };\r\n\t\t    /**\r\n\t\t     * Stops listening to message events.\r\n\t\t     */\r\n\t\t    WindowPostMessageProxy.prototype.stop = function () {\r\n\t\t        this.receiveWindow.removeEventListener('message', this.windowMessageHandler);\r\n\t\t    };\r\n\t\t    /**\r\n\t\t     * Post message to target window with tracking properties added and save deferred object referenced by tracking id.\r\n\t\t     */\r\n\t\t    WindowPostMessageProxy.prototype.postMessage = function (targetWindow, message) {\r\n\t\t        // Add tracking properties to indicate message came from this proxy\r\n\t\t        var trackingProperties = { id: WindowPostMessageProxy.createRandomString() };\r\n\t\t        this.addTrackingProperties(message, trackingProperties);\r\n\t\t        if (this.logMessages) {\r\n\t\t            console.log(this.name + \" Posting message:\");\r\n\t\t            console.log(JSON.stringify(message, null, '  '));\r\n\t\t        }\r\n\t\t        targetWindow.postMessage(message, \"*\");\r\n\t\t        var deferred = WindowPostMessageProxy.createDeferred();\r\n\t\t        this.pendingRequestPromises[trackingProperties.id] = deferred;\r\n\t\t        return deferred.promise;\r\n\t\t    };\r\n\t\t    /**\r\n\t\t     * Send response message to target window.\r\n\t\t     * Response messages re-use tracking properties from a previous request message.\r\n\t\t     */\r\n\t\t    WindowPostMessageProxy.prototype.sendResponse = function (targetWindow, message, trackingProperties) {\r\n\t\t        this.addTrackingProperties(message, trackingProperties);\r\n\t\t        if (this.logMessages) {\r\n\t\t            console.log(this.name + \" Sending response:\");\r\n\t\t            console.log(JSON.stringify(message, null, '  '));\r\n\t\t        }\r\n\t\t        targetWindow.postMessage(message, \"*\");\r\n\t\t    };\r\n\t\t    /**\r\n\t\t     * Message handler.\r\n\t\t     */\r\n\t\t    WindowPostMessageProxy.prototype.onMessageReceived = function (event) {\r\n\t\t        var _this = this;\r\n\t\t        if (this.logMessages) {\r\n\t\t            console.log(this.name + \" Received message:\");\r\n\t\t            console.log(\"type: \" + event.type);\r\n\t\t            console.log(JSON.stringify(event.data, null, '  '));\r\n\t\t        }\r\n\t\t        var sendingWindow = this.eventSourceOverrideWindow || event.source;\r\n\t\t        var message = event.data;\r\n\t\t        if (typeof message !== \"object\") {\r\n\t\t            if (!this.suppressWarnings) {\r\n\t\t                console.warn(\"Proxy(\" + this.name + \"): Received message that was not an object. Discarding message\");\r\n\t\t            }\r\n\t\t            return;\r\n\t\t        }\r\n\t\t        var trackingProperties;\r\n\t\t        try {\r\n\t\t            trackingProperties = this.getTrackingProperties(message);\r\n\t\t        }\r\n\t\t        catch (e) {\r\n\t\t            if (!this.suppressWarnings) {\r\n\t\t                console.warn(\"Proxy(\" + this.name + \"): Error occurred when attempting to get tracking properties from incoming message:\", JSON.stringify(message, null, '  '), \"Error: \", e);\r\n\t\t            }\r\n\t\t        }\r\n\t\t        var deferred;\r\n\t\t        if (trackingProperties) {\r\n\t\t            deferred = this.pendingRequestPromises[trackingProperties.id];\r\n\t\t        }\r\n\t\t        // If message does not have a known ID, treat it as a request\r\n\t\t        // Otherwise, treat message as response\r\n\t\t        if (!deferred) {\r\n\t\t            var handled = this.handlers.some(function (handler) {\r\n\t\t                var canMessageBeHandled = false;\r\n\t\t                try {\r\n\t\t                    canMessageBeHandled = handler.test(message);\r\n\t\t                }\r\n\t\t                catch (e) {\r\n\t\t                    if (!_this.suppressWarnings) {\r\n\t\t                        console.warn(\"Proxy(\" + _this.name + \"): Error occurred when handler was testing incoming message:\", JSON.stringify(message, null, '  '), \"Error: \", e);\r\n\t\t                    }\r\n\t\t                }\r\n\t\t                if (canMessageBeHandled) {\r\n\t\t                    var responseMessagePromise = void 0;\r\n\t\t                    try {\r\n\t\t                        responseMessagePromise = Promise.resolve(handler.handle(message));\r\n\t\t                    }\r\n\t\t                    catch (e) {\r\n\t\t                        if (!_this.suppressWarnings) {\r\n\t\t                            console.warn(\"Proxy(\" + _this.name + \"): Error occurred when handler was processing incoming message:\", JSON.stringify(message, null, '  '), \"Error: \", e);\r\n\t\t                        }\r\n\t\t                        responseMessagePromise = Promise.resolve();\r\n\t\t                    }\r\n\t\t                    responseMessagePromise\r\n\t\t                        .then(function (responseMessage) {\r\n\t\t                        if (!responseMessage) {\r\n\t\t                            var warningMessage = \"Handler for message: \" + JSON.stringify(message, null, '  ') + \" did not return a response message. The default response message will be returned instead.\";\r\n\t\t                            if (!_this.suppressWarnings) {\r\n\t\t                                console.warn(\"Proxy(\" + _this.name + \"): \" + warningMessage);\r\n\t\t                            }\r\n\t\t                            responseMessage = {\r\n\t\t                                warning: warningMessage\r\n\t\t                            };\r\n\t\t                        }\r\n\t\t                        _this.sendResponse(sendingWindow, responseMessage, trackingProperties);\r\n\t\t                    });\r\n\t\t                    return true;\r\n\t\t                }\r\n\t\t            });\r\n\t\t            /**\r\n\t\t             * TODO: Consider returning an error message if nothing handled the message.\r\n\t\t             * In the case of the Report receiving messages all of them should be handled,\r\n\t\t             * however, in the case of the SDK receiving messages it's likely it won't register handlers\r\n\t\t             * for all events. Perhaps make this an option at construction time.\r\n\t\t             */\r\n\t\t            if (!handled && !this.suppressWarnings) {\r\n\t\t                console.warn(\"Proxy(\" + this.name + \") did not handle message. Handlers: \" + this.handlers.length + \"  Message: \" + JSON.stringify(message, null, '') + \".\");\r\n\t\t            }\r\n\t\t        }\r\n\t\t        else {\r\n\t\t            /**\r\n\t\t             * If error message reject promise,\r\n\t\t             * Otherwise, resolve promise\r\n\t\t             */\r\n\t\t            var isErrorMessage = true;\r\n\t\t            try {\r\n\t\t                isErrorMessage = this.isErrorMessage(message);\r\n\t\t            }\r\n\t\t            catch (e) {\r\n\t\t                console.warn(\"Proxy(\" + this.name + \") Error occurred when trying to determine if message is consider an error response. Message: \", JSON.stringify(message, null, ''), 'Error: ', e);\r\n\t\t            }\r\n\t\t            if (isErrorMessage) {\r\n\t\t                deferred.reject(message);\r\n\t\t            }\r\n\t\t            else {\r\n\t\t                deferred.resolve(message);\r\n\t\t            }\r\n\t\t            // TODO: Move to .finally clause up where promise is created for better maitenance like original proxy code.\r\n\t\t            delete this.pendingRequestPromises[trackingProperties.id];\r\n\t\t        }\r\n\t\t    };\r\n\t\t    WindowPostMessageProxy.messagePropertyName = \"windowPostMessageProxy\";\r\n\t\t    return WindowPostMessageProxy;\r\n\t\t}());\r\n\t\texports.WindowPostMessageProxy = WindowPostMessageProxy;\r\n\t\n\t\n\t/***/ })\n\t/******/ ])\n\t});\n\t;\n\t//# sourceMappingURL=windowPostMessageProxy.js.map\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*! http-post-message v0.2.3 | (c) 2016 Microsoft Corporation MIT */\n\t(function webpackUniversalModuleDefinition(root, factory) {\n\t\tif(true)\n\t\t\tmodule.exports = factory();\n\t\telse {}\n\t})(this, function() {\n\treturn /******/ (function(modules) { // webpackBootstrap\n\t/******/ \t// The module cache\n\t/******/ \tvar installedModules = {};\n\t/******/\n\t/******/ \t// The require function\n\t/******/ \tfunction __webpack_require__(moduleId) {\n\t/******/\n\t/******/ \t\t// Check if module is in cache\n\t/******/ \t\tif(installedModules[moduleId])\n\t/******/ \t\t\treturn installedModules[moduleId].exports;\n\t/******/\n\t/******/ \t\t// Create a new module (and put it into the cache)\n\t/******/ \t\tvar module = installedModules[moduleId] = {\n\t/******/ \t\t\texports: {},\n\t/******/ \t\t\tid: moduleId,\n\t/******/ \t\t\tloaded: false\n\t/******/ \t\t};\n\t/******/\n\t/******/ \t\t// Execute the module function\n\t/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t/******/\n\t/******/ \t\t// Flag the module as loaded\n\t/******/ \t\tmodule.loaded = true;\n\t/******/\n\t/******/ \t\t// Return the exports of the module\n\t/******/ \t\treturn module.exports;\n\t/******/ \t}\n\t/******/\n\t/******/\n\t/******/ \t// expose the modules object (__webpack_modules__)\n\t/******/ \t__webpack_require__.m = modules;\n\t/******/\n\t/******/ \t// expose the module cache\n\t/******/ \t__webpack_require__.c = installedModules;\n\t/******/\n\t/******/ \t// __webpack_public_path__\n\t/******/ \t__webpack_require__.p = \"\";\n\t/******/\n\t/******/ \t// Load entry module and return exports\n\t/******/ \treturn __webpack_require__(0);\n\t/******/ })\n\t/************************************************************************/\n\t/******/ ([\n\t/* 0 */\n\t/***/ function(module, exports) {\n\t\n\t\t\"use strict\";\n\t\tvar HttpPostMessage = (function () {\n\t\t    function HttpPostMessage(windowPostMessageProxy, defaultHeaders, defaultTargetWindow) {\n\t\t        if (defaultHeaders === void 0) { defaultHeaders = {}; }\n\t\t        this.defaultHeaders = defaultHeaders;\n\t\t        this.defaultTargetWindow = defaultTargetWindow;\n\t\t        this.windowPostMessageProxy = windowPostMessageProxy;\n\t\t    }\n\t\t    // TODO: See if it's possible to share tracking properties interface?\n\t\t    // The responsibility of knowing how to configure windowPostMessageProxy for http should\n\t\t    // live in this http class, but the configuration would need ITrackingProperties\n\t\t    // interface which lives in WindowPostMessageProxy. Use <any> type as workaround\n\t\t    HttpPostMessage.addTrackingProperties = function (message, trackingProperties) {\n\t\t        message.headers = message.headers || {};\n\t\t        if (trackingProperties && trackingProperties.id) {\n\t\t            message.headers.id = trackingProperties.id;\n\t\t        }\n\t\t        return message;\n\t\t    };\n\t\t    HttpPostMessage.getTrackingProperties = function (message) {\n\t\t        return {\n\t\t            id: message.headers && message.headers.id\n\t\t        };\n\t\t    };\n\t\t    HttpPostMessage.isErrorMessage = function (message) {\n\t\t        if (typeof (message && message.statusCode) !== 'number') {\n\t\t            return false;\n\t\t        }\n\t\t        return !(200 <= message.statusCode && message.statusCode < 300);\n\t\t    };\n\t\t    HttpPostMessage.prototype.get = function (url, headers, targetWindow) {\n\t\t        if (headers === void 0) { headers = {}; }\n\t\t        if (targetWindow === void 0) { targetWindow = this.defaultTargetWindow; }\n\t\t        return this.send({\n\t\t            method: \"GET\",\n\t\t            url: url,\n\t\t            headers: headers\n\t\t        }, targetWindow);\n\t\t    };\n\t\t    HttpPostMessage.prototype.post = function (url, body, headers, targetWindow) {\n\t\t        if (headers === void 0) { headers = {}; }\n\t\t        if (targetWindow === void 0) { targetWindow = this.defaultTargetWindow; }\n\t\t        return this.send({\n\t\t            method: \"POST\",\n\t\t            url: url,\n\t\t            headers: headers,\n\t\t            body: body\n\t\t        }, targetWindow);\n\t\t    };\n\t\t    HttpPostMessage.prototype.put = function (url, body, headers, targetWindow) {\n\t\t        if (headers === void 0) { headers = {}; }\n\t\t        if (targetWindow === void 0) { targetWindow = this.defaultTargetWindow; }\n\t\t        return this.send({\n\t\t            method: \"PUT\",\n\t\t            url: url,\n\t\t            headers: headers,\n\t\t            body: body\n\t\t        }, targetWindow);\n\t\t    };\n\t\t    HttpPostMessage.prototype.patch = function (url, body, headers, targetWindow) {\n\t\t        if (headers === void 0) { headers = {}; }\n\t\t        if (targetWindow === void 0) { targetWindow = this.defaultTargetWindow; }\n\t\t        return this.send({\n\t\t            method: \"PATCH\",\n\t\t            url: url,\n\t\t            headers: headers,\n\t\t            body: body\n\t\t        }, targetWindow);\n\t\t    };\n\t\t    HttpPostMessage.prototype.delete = function (url, body, headers, targetWindow) {\n\t\t        if (body === void 0) { body = null; }\n\t\t        if (headers === void 0) { headers = {}; }\n\t\t        if (targetWindow === void 0) { targetWindow = this.defaultTargetWindow; }\n\t\t        return this.send({\n\t\t            method: \"DELETE\",\n\t\t            url: url,\n\t\t            headers: headers,\n\t\t            body: body\n\t\t        }, targetWindow);\n\t\t    };\n\t\t    HttpPostMessage.prototype.send = function (request, targetWindow) {\n\t\t        if (targetWindow === void 0) { targetWindow = this.defaultTargetWindow; }\n\t\t        request.headers = this.assign({}, this.defaultHeaders, request.headers);\n\t\t        if (!targetWindow) {\n\t\t            throw new Error(\"target window is not provided.  You must either provide the target window explicitly as argument to request, or specify default target window when constructing instance of this class.\");\n\t\t        }\n\t\t        return this.windowPostMessageProxy.postMessage(targetWindow, request);\n\t\t    };\n\t\t    /**\n\t\t     * Object.assign() polyfill\n\t\t     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\t\t     */\n\t\t    HttpPostMessage.prototype.assign = function (target) {\n\t\t        var sources = [];\n\t\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t\t            sources[_i - 1] = arguments[_i];\n\t\t        }\n\t\t        if (target === undefined || target === null) {\n\t\t            throw new TypeError('Cannot convert undefined or null to object');\n\t\t        }\n\t\t        var output = Object(target);\n\t\t        sources.forEach(function (source) {\n\t\t            if (source !== undefined && source !== null) {\n\t\t                for (var nextKey in source) {\n\t\t                    if (Object.prototype.hasOwnProperty.call(source, nextKey)) {\n\t\t                        output[nextKey] = source[nextKey];\n\t\t                    }\n\t\t                }\n\t\t            }\n\t\t        });\n\t\t        return output;\n\t\t    };\n\t\t    return HttpPostMessage;\n\t\t}());\n\t\texports.HttpPostMessage = HttpPostMessage;\n\t\n\t\n\t/***/ }\n\t/******/ ])\n\t});\n\t;\n\t//# sourceMappingURL=httpPostMessage.js.map\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*! powerbi-router v0.1.5 | (c) 2016 Microsoft Corporation MIT */\n\t(function webpackUniversalModuleDefinition(root, factory) {\n\t\tif(true)\n\t\t\tmodule.exports = factory();\n\t\telse {}\n\t})(this, function() {\n\treturn /******/ (function(modules) { // webpackBootstrap\n\t/******/ \t// The module cache\n\t/******/ \tvar installedModules = {};\n\t/******/\n\t/******/ \t// The require function\n\t/******/ \tfunction __webpack_require__(moduleId) {\n\t/******/\n\t/******/ \t\t// Check if module is in cache\n\t/******/ \t\tif(installedModules[moduleId])\n\t/******/ \t\t\treturn installedModules[moduleId].exports;\n\t/******/\n\t/******/ \t\t// Create a new module (and put it into the cache)\n\t/******/ \t\tvar module = installedModules[moduleId] = {\n\t/******/ \t\t\texports: {},\n\t/******/ \t\t\tid: moduleId,\n\t/******/ \t\t\tloaded: false\n\t/******/ \t\t};\n\t/******/\n\t/******/ \t\t// Execute the module function\n\t/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t/******/\n\t/******/ \t\t// Flag the module as loaded\n\t/******/ \t\tmodule.loaded = true;\n\t/******/\n\t/******/ \t\t// Return the exports of the module\n\t/******/ \t\treturn module.exports;\n\t/******/ \t}\n\t/******/\n\t/******/\n\t/******/ \t// expose the modules object (__webpack_modules__)\n\t/******/ \t__webpack_require__.m = modules;\n\t/******/\n\t/******/ \t// expose the module cache\n\t/******/ \t__webpack_require__.c = installedModules;\n\t/******/\n\t/******/ \t// __webpack_public_path__\n\t/******/ \t__webpack_require__.p = \"\";\n\t/******/\n\t/******/ \t// Load entry module and return exports\n\t/******/ \treturn __webpack_require__(0);\n\t/******/ })\n\t/************************************************************************/\n\t/******/ ([\n\t/* 0 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\t\"use strict\";\n\t\tvar RouteRecognizer = __webpack_require__(1);\n\t\tvar Router = (function () {\n\t\t    function Router(handlers) {\n\t\t        this.handlers = handlers;\n\t\t        /**\n\t\t         * TODO: look at generating the router dynamically based on list of supported http methods\n\t\t         * instead of hardcoding the creation of these and the methods.\n\t\t         */\n\t\t        this.getRouteRecognizer = new RouteRecognizer();\n\t\t        this.patchRouteRecognizer = new RouteRecognizer();\n\t\t        this.postRouteRecognizer = new RouteRecognizer();\n\t\t        this.putRouteRecognizer = new RouteRecognizer();\n\t\t        this.deleteRouteRecognizer = new RouteRecognizer();\n\t\t    }\n\t\t    Router.prototype.get = function (url, handler) {\n\t\t        this.registerHandler(this.getRouteRecognizer, \"GET\", url, handler);\n\t\t        return this;\n\t\t    };\n\t\t    Router.prototype.patch = function (url, handler) {\n\t\t        this.registerHandler(this.patchRouteRecognizer, \"PATCH\", url, handler);\n\t\t        return this;\n\t\t    };\n\t\t    Router.prototype.post = function (url, handler) {\n\t\t        this.registerHandler(this.postRouteRecognizer, \"POST\", url, handler);\n\t\t        return this;\n\t\t    };\n\t\t    Router.prototype.put = function (url, handler) {\n\t\t        this.registerHandler(this.putRouteRecognizer, \"PUT\", url, handler);\n\t\t        return this;\n\t\t    };\n\t\t    Router.prototype.delete = function (url, handler) {\n\t\t        this.registerHandler(this.deleteRouteRecognizer, \"DELETE\", url, handler);\n\t\t        return this;\n\t\t    };\n\t\t    /**\n\t\t     * TODO: This method could use some refactoring.  There is conflict of interest between keeping clean separation of test and handle method\n\t\t     * Test method only returns boolean indicating if request can be handled, and handle method has opportunity to modify response and return promise of it.\n\t\t     * In the case of the router with route-recognizer where handlers are associated with routes, this already guarantees that only one handler is selected and makes the test method feel complicated\n\t\t     * Will leave as is an investigate cleaner ways at later time.\n\t\t     */\n\t\t    Router.prototype.registerHandler = function (routeRecognizer, method, url, handler) {\n\t\t        var routeRecognizerHandler = function (request) {\n\t\t            var response = new Response();\n\t\t            return Promise.resolve(handler(request, response))\n\t\t                .then(function (x) { return response; });\n\t\t        };\n\t\t        routeRecognizer.add([\n\t\t            { path: url, handler: routeRecognizerHandler }\n\t\t        ]);\n\t\t        var internalHandler = {\n\t\t            test: function (request) {\n\t\t                if (request.method !== method) {\n\t\t                    return false;\n\t\t                }\n\t\t                var matchingRoutes = routeRecognizer.recognize(request.url);\n\t\t                if (matchingRoutes === undefined) {\n\t\t                    return false;\n\t\t                }\n\t\t                /**\n\t\t                 * Copy parameters from recognized route to the request so they can be used within the handler function\n\t\t                 * This isn't ideal because it is side affect which modifies the request instead of strictly testing for true or false\n\t\t                 * but I don't see a better place to put this.  If we move it between the call to test and the handle it becomes part of the window post message proxy\n\t\t                 * even though it's responsibility is related to routing.\n\t\t                 */\n\t\t                var route = matchingRoutes[0];\n\t\t                request.params = route.params;\n\t\t                request.queryParams = matchingRoutes.queryParams;\n\t\t                request.handler = route.handler;\n\t\t                return true;\n\t\t            },\n\t\t            handle: function (request) {\n\t\t                return request.handler(request);\n\t\t            }\n\t\t        };\n\t\t        this.handlers.addHandler(internalHandler);\n\t\t    };\n\t\t    return Router;\n\t\t}());\n\t\texports.Router = Router;\n\t\tvar Response = (function () {\n\t\t    function Response() {\n\t\t        this.statusCode = 200;\n\t\t        this.headers = {};\n\t\t        this.body = null;\n\t\t    }\n\t\t    Response.prototype.send = function (statusCode, body) {\n\t\t        this.statusCode = statusCode;\n\t\t        this.body = body;\n\t\t    };\n\t\t    return Response;\n\t\t}());\n\t\texports.Response = Response;\n\t\n\t\n\t/***/ },\n\t/* 1 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {(function() {\n\t\t    \"use strict\";\n\t\t    function $$route$recognizer$dsl$$Target(path, matcher, delegate) {\n\t\t      this.path = path;\n\t\t      this.matcher = matcher;\n\t\t      this.delegate = delegate;\n\t\t    }\n\t\t\n\t\t    $$route$recognizer$dsl$$Target.prototype = {\n\t\t      to: function(target, callback) {\n\t\t        var delegate = this.delegate;\n\t\t\n\t\t        if (delegate && delegate.willAddRoute) {\n\t\t          target = delegate.willAddRoute(this.matcher.target, target);\n\t\t        }\n\t\t\n\t\t        this.matcher.add(this.path, target);\n\t\t\n\t\t        if (callback) {\n\t\t          if (callback.length === 0) { throw new Error(\"You must have an argument in the function passed to `to`\"); }\n\t\t          this.matcher.addChild(this.path, target, callback, this.delegate);\n\t\t        }\n\t\t        return this;\n\t\t      }\n\t\t    };\n\t\t\n\t\t    function $$route$recognizer$dsl$$Matcher(target) {\n\t\t      this.routes = {};\n\t\t      this.children = {};\n\t\t      this.target = target;\n\t\t    }\n\t\t\n\t\t    $$route$recognizer$dsl$$Matcher.prototype = {\n\t\t      add: function(path, handler) {\n\t\t        this.routes[path] = handler;\n\t\t      },\n\t\t\n\t\t      addChild: function(path, target, callback, delegate) {\n\t\t        var matcher = new $$route$recognizer$dsl$$Matcher(target);\n\t\t        this.children[path] = matcher;\n\t\t\n\t\t        var match = $$route$recognizer$dsl$$generateMatch(path, matcher, delegate);\n\t\t\n\t\t        if (delegate && delegate.contextEntered) {\n\t\t          delegate.contextEntered(target, match);\n\t\t        }\n\t\t\n\t\t        callback(match);\n\t\t      }\n\t\t    };\n\t\t\n\t\t    function $$route$recognizer$dsl$$generateMatch(startingPath, matcher, delegate) {\n\t\t      return function(path, nestedCallback) {\n\t\t        var fullPath = startingPath + path;\n\t\t\n\t\t        if (nestedCallback) {\n\t\t          nestedCallback($$route$recognizer$dsl$$generateMatch(fullPath, matcher, delegate));\n\t\t        } else {\n\t\t          return new $$route$recognizer$dsl$$Target(startingPath + path, matcher, delegate);\n\t\t        }\n\t\t      };\n\t\t    }\n\t\t\n\t\t    function $$route$recognizer$dsl$$addRoute(routeArray, path, handler) {\n\t\t      var len = 0;\n\t\t      for (var i=0; i<routeArray.length; i++) {\n\t\t        len += routeArray[i].path.length;\n\t\t      }\n\t\t\n\t\t      path = path.substr(len);\n\t\t      var route = { path: path, handler: handler };\n\t\t      routeArray.push(route);\n\t\t    }\n\t\t\n\t\t    function $$route$recognizer$dsl$$eachRoute(baseRoute, matcher, callback, binding) {\n\t\t      var routes = matcher.routes;\n\t\t\n\t\t      for (var path in routes) {\n\t\t        if (routes.hasOwnProperty(path)) {\n\t\t          var routeArray = baseRoute.slice();\n\t\t          $$route$recognizer$dsl$$addRoute(routeArray, path, routes[path]);\n\t\t\n\t\t          if (matcher.children[path]) {\n\t\t            $$route$recognizer$dsl$$eachRoute(routeArray, matcher.children[path], callback, binding);\n\t\t          } else {\n\t\t            callback.call(binding, routeArray);\n\t\t          }\n\t\t        }\n\t\t      }\n\t\t    }\n\t\t\n\t\t    var $$route$recognizer$dsl$$default = function(callback, addRouteCallback) {\n\t\t      var matcher = new $$route$recognizer$dsl$$Matcher();\n\t\t\n\t\t      callback($$route$recognizer$dsl$$generateMatch(\"\", matcher, this.delegate));\n\t\t\n\t\t      $$route$recognizer$dsl$$eachRoute([], matcher, function(route) {\n\t\t        if (addRouteCallback) { addRouteCallback(this, route); }\n\t\t        else { this.add(route); }\n\t\t      }, this);\n\t\t    };\n\t\t\n\t\t    var $$route$recognizer$$specials = [\n\t\t      '/', '.', '*', '+', '?', '|',\n\t\t      '(', ')', '[', ']', '{', '}', '\\\\'\n\t\t    ];\n\t\t\n\t\t    var $$route$recognizer$$escapeRegex = new RegExp('(\\\\' + $$route$recognizer$$specials.join('|\\\\') + ')', 'g');\n\t\t\n\t\t    function $$route$recognizer$$isArray(test) {\n\t\t      return Object.prototype.toString.call(test) === \"[object Array]\";\n\t\t    }\n\t\t\n\t\t    // A Segment represents a segment in the original route description.\n\t\t    // Each Segment type provides an `eachChar` and `regex` method.\n\t\t    //\n\t\t    // The `eachChar` method invokes the callback with one or more character\n\t\t    // specifications. A character specification consumes one or more input\n\t\t    // characters.\n\t\t    //\n\t\t    // The `regex` method returns a regex fragment for the segment. If the\n\t\t    // segment is a dynamic of star segment, the regex fragment also includes\n\t\t    // a capture.\n\t\t    //\n\t\t    // A character specification contains:\n\t\t    //\n\t\t    // * `validChars`: a String with a list of all valid characters, or\n\t\t    // * `invalidChars`: a String with a list of all invalid characters\n\t\t    // * `repeat`: true if the character specification can repeat\n\t\t\n\t\t    function $$route$recognizer$$StaticSegment(string) { this.string = string; }\n\t\t    $$route$recognizer$$StaticSegment.prototype = {\n\t\t      eachChar: function(currentState) {\n\t\t        var string = this.string, ch;\n\t\t\n\t\t        for (var i=0; i<string.length; i++) {\n\t\t          ch = string.charAt(i);\n\t\t          currentState = currentState.put({ invalidChars: undefined, repeat: false, validChars: ch });\n\t\t        }\n\t\t\n\t\t        return currentState;\n\t\t      },\n\t\t\n\t\t      regex: function() {\n\t\t        return this.string.replace($$route$recognizer$$escapeRegex, '\\\\$1');\n\t\t      },\n\t\t\n\t\t      generate: function() {\n\t\t        return this.string;\n\t\t      }\n\t\t    };\n\t\t\n\t\t    function $$route$recognizer$$DynamicSegment(name) { this.name = name; }\n\t\t    $$route$recognizer$$DynamicSegment.prototype = {\n\t\t      eachChar: function(currentState) {\n\t\t        return currentState.put({ invalidChars: \"/\", repeat: true, validChars: undefined });\n\t\t      },\n\t\t\n\t\t      regex: function() {\n\t\t        return \"([^/]+)\";\n\t\t      },\n\t\t\n\t\t      generate: function(params) {\n\t\t        return params[this.name];\n\t\t      }\n\t\t    };\n\t\t\n\t\t    function $$route$recognizer$$StarSegment(name) { this.name = name; }\n\t\t    $$route$recognizer$$StarSegment.prototype = {\n\t\t      eachChar: function(currentState) {\n\t\t        return currentState.put({ invalidChars: \"\", repeat: true, validChars: undefined });\n\t\t      },\n\t\t\n\t\t      regex: function() {\n\t\t        return \"(.+)\";\n\t\t      },\n\t\t\n\t\t      generate: function(params) {\n\t\t        return params[this.name];\n\t\t      }\n\t\t    };\n\t\t\n\t\t    function $$route$recognizer$$EpsilonSegment() {}\n\t\t    $$route$recognizer$$EpsilonSegment.prototype = {\n\t\t      eachChar: function(currentState) {\n\t\t        return currentState;\n\t\t      },\n\t\t      regex: function() { return \"\"; },\n\t\t      generate: function() { return \"\"; }\n\t\t    };\n\t\t\n\t\t    function $$route$recognizer$$parse(route, names, specificity) {\n\t\t      // normalize route as not starting with a \"/\". Recognition will\n\t\t      // also normalize.\n\t\t      if (route.charAt(0) === \"/\") { route = route.substr(1); }\n\t\t\n\t\t      var segments = route.split(\"/\");\n\t\t      var results = new Array(segments.length);\n\t\t\n\t\t      // A routes has specificity determined by the order that its different segments\n\t\t      // appear in. This system mirrors how the magnitude of numbers written as strings\n\t\t      // works.\n\t\t      // Consider a number written as: \"abc\". An example would be \"200\". Any other number written\n\t\t      // \"xyz\" will be smaller than \"abc\" so long as `a > z`. For instance, \"199\" is smaller\n\t\t      // then \"200\", even though \"y\" and \"z\" (which are both 9) are larger than \"0\" (the value\n\t\t      // of (`b` and `c`). This is because the leading symbol, \"2\", is larger than the other\n\t\t      // leading symbol, \"1\".\n\t\t      // The rule is that symbols to the left carry more weight than symbols to the right\n\t\t      // when a number is written out as a string. In the above strings, the leading digit\n\t\t      // represents how many 100's are in the number, and it carries more weight than the middle\n\t\t      // number which represents how many 10's are in the number.\n\t\t      // This system of number magnitude works well for route specificity, too. A route written as\n\t\t      // `a/b/c` will be more specific than `x/y/z` as long as `a` is more specific than\n\t\t      // `x`, irrespective of the other parts.\n\t\t      // Because of this similarity, we assign each type of segment a number value written as a\n\t\t      // string. We can find the specificity of compound routes by concatenating these strings\n\t\t      // together, from left to right. After we have looped through all of the segments,\n\t\t      // we convert the string to a number.\n\t\t      specificity.val = '';\n\t\t\n\t\t      for (var i=0; i<segments.length; i++) {\n\t\t        var segment = segments[i], match;\n\t\t\n\t\t        if (match = segment.match(/^:([^\\/]+)$/)) {\n\t\t          results[i] = new $$route$recognizer$$DynamicSegment(match[1]);\n\t\t          names.push(match[1]);\n\t\t          specificity.val += '3';\n\t\t        } else if (match = segment.match(/^\\*([^\\/]+)$/)) {\n\t\t          results[i] = new $$route$recognizer$$StarSegment(match[1]);\n\t\t          specificity.val += '1';\n\t\t          names.push(match[1]);\n\t\t        } else if(segment === \"\") {\n\t\t          results[i] = new $$route$recognizer$$EpsilonSegment();\n\t\t          specificity.val += '2';\n\t\t        } else {\n\t\t          results[i] = new $$route$recognizer$$StaticSegment(segment);\n\t\t          specificity.val += '4';\n\t\t        }\n\t\t      }\n\t\t\n\t\t      specificity.val = +specificity.val;\n\t\t\n\t\t      return results;\n\t\t    }\n\t\t\n\t\t    // A State has a character specification and (`charSpec`) and a list of possible\n\t\t    // subsequent states (`nextStates`).\n\t\t    //\n\t\t    // If a State is an accepting state, it will also have several additional\n\t\t    // properties:\n\t\t    //\n\t\t    // * `regex`: A regular expression that is used to extract parameters from paths\n\t\t    //   that reached this accepting state.\n\t\t    // * `handlers`: Information on how to convert the list of captures into calls\n\t\t    //   to registered handlers with the specified parameters\n\t\t    // * `types`: How many static, dynamic or star segments in this route. Used to\n\t\t    //   decide which route to use if multiple registered routes match a path.\n\t\t    //\n\t\t    // Currently, State is implemented naively by looping over `nextStates` and\n\t\t    // comparing a character specification against a character. A more efficient\n\t\t    // implementation would use a hash of keys pointing at one or more next states.\n\t\t\n\t\t    function $$route$recognizer$$State(charSpec) {\n\t\t      this.charSpec = charSpec;\n\t\t      this.nextStates = [];\n\t\t      this.charSpecs = {};\n\t\t      this.regex = undefined;\n\t\t      this.handlers = undefined;\n\t\t      this.specificity = undefined;\n\t\t    }\n\t\t\n\t\t    $$route$recognizer$$State.prototype = {\n\t\t      get: function(charSpec) {\n\t\t        if (this.charSpecs[charSpec.validChars]) {\n\t\t          return this.charSpecs[charSpec.validChars];\n\t\t        }\n\t\t\n\t\t        var nextStates = this.nextStates;\n\t\t\n\t\t        for (var i=0; i<nextStates.length; i++) {\n\t\t          var child = nextStates[i];\n\t\t\n\t\t          var isEqual = child.charSpec.validChars === charSpec.validChars;\n\t\t          isEqual = isEqual && child.charSpec.invalidChars === charSpec.invalidChars;\n\t\t\n\t\t          if (isEqual) {\n\t\t            this.charSpecs[charSpec.validChars] = child;\n\t\t            return child;\n\t\t          }\n\t\t        }\n\t\t      },\n\t\t\n\t\t      put: function(charSpec) {\n\t\t        var state;\n\t\t\n\t\t        // If the character specification already exists in a child of the current\n\t\t        // state, just return that state.\n\t\t        if (state = this.get(charSpec)) { return state; }\n\t\t\n\t\t        // Make a new state for the character spec\n\t\t        state = new $$route$recognizer$$State(charSpec);\n\t\t\n\t\t        // Insert the new state as a child of the current state\n\t\t        this.nextStates.push(state);\n\t\t\n\t\t        // If this character specification repeats, insert the new state as a child\n\t\t        // of itself. Note that this will not trigger an infinite loop because each\n\t\t        // transition during recognition consumes a character.\n\t\t        if (charSpec.repeat) {\n\t\t          state.nextStates.push(state);\n\t\t        }\n\t\t\n\t\t        // Return the new state\n\t\t        return state;\n\t\t      },\n\t\t\n\t\t      // Find a list of child states matching the next character\n\t\t      match: function(ch) {\n\t\t        var nextStates = this.nextStates,\n\t\t            child, charSpec, chars;\n\t\t\n\t\t        var returned = [];\n\t\t\n\t\t        for (var i=0; i<nextStates.length; i++) {\n\t\t          child = nextStates[i];\n\t\t\n\t\t          charSpec = child.charSpec;\n\t\t\n\t\t          if (typeof (chars = charSpec.validChars) !== 'undefined') {\n\t\t            if (chars.indexOf(ch) !== -1) { returned.push(child); }\n\t\t          } else if (typeof (chars = charSpec.invalidChars) !== 'undefined') {\n\t\t            if (chars.indexOf(ch) === -1) { returned.push(child); }\n\t\t          }\n\t\t        }\n\t\t\n\t\t        return returned;\n\t\t      }\n\t\t    };\n\t\t\n\t\t    // Sort the routes by specificity\n\t\t    function $$route$recognizer$$sortSolutions(states) {\n\t\t      return states.sort(function(a, b) {\n\t\t        return b.specificity.val - a.specificity.val;\n\t\t      });\n\t\t    }\n\t\t\n\t\t    function $$route$recognizer$$recognizeChar(states, ch) {\n\t\t      var nextStates = [];\n\t\t\n\t\t      for (var i=0, l=states.length; i<l; i++) {\n\t\t        var state = states[i];\n\t\t\n\t\t        nextStates = nextStates.concat(state.match(ch));\n\t\t      }\n\t\t\n\t\t      return nextStates;\n\t\t    }\n\t\t\n\t\t    var $$route$recognizer$$oCreate = Object.create || function(proto) {\n\t\t      function F() {}\n\t\t      F.prototype = proto;\n\t\t      return new F();\n\t\t    };\n\t\t\n\t\t    function $$route$recognizer$$RecognizeResults(queryParams) {\n\t\t      this.queryParams = queryParams || {};\n\t\t    }\n\t\t    $$route$recognizer$$RecognizeResults.prototype = $$route$recognizer$$oCreate({\n\t\t      splice: Array.prototype.splice,\n\t\t      slice:  Array.prototype.slice,\n\t\t      push:   Array.prototype.push,\n\t\t      length: 0,\n\t\t      queryParams: null\n\t\t    });\n\t\t\n\t\t    function $$route$recognizer$$findHandler(state, path, queryParams) {\n\t\t      var handlers = state.handlers, regex = state.regex;\n\t\t      var captures = path.match(regex), currentCapture = 1;\n\t\t      var result = new $$route$recognizer$$RecognizeResults(queryParams);\n\t\t\n\t\t      result.length = handlers.length;\n\t\t\n\t\t      for (var i=0; i<handlers.length; i++) {\n\t\t        var handler = handlers[i], names = handler.names, params = {};\n\t\t\n\t\t        for (var j=0; j<names.length; j++) {\n\t\t          params[names[j]] = captures[currentCapture++];\n\t\t        }\n\t\t\n\t\t        result[i] = { handler: handler.handler, params: params, isDynamic: !!names.length };\n\t\t      }\n\t\t\n\t\t      return result;\n\t\t    }\n\t\t\n\t\t    function $$route$recognizer$$decodeQueryParamPart(part) {\n\t\t      // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1\n\t\t      part = part.replace(/\\+/gm, '%20');\n\t\t      var result;\n\t\t      try {\n\t\t        result = decodeURIComponent(part);\n\t\t      } catch(error) {result = '';}\n\t\t      return result;\n\t\t    }\n\t\t\n\t\t    // The main interface\n\t\t\n\t\t    var $$route$recognizer$$RouteRecognizer = function() {\n\t\t      this.rootState = new $$route$recognizer$$State();\n\t\t      this.names = {};\n\t\t    };\n\t\t\n\t\t\n\t\t    $$route$recognizer$$RouteRecognizer.prototype = {\n\t\t      add: function(routes, options) {\n\t\t        var currentState = this.rootState, regex = \"^\",\n\t\t            specificity = {},\n\t\t            handlers = new Array(routes.length), allSegments = [], name;\n\t\t\n\t\t        var isEmpty = true;\n\t\t\n\t\t        for (var i=0; i<routes.length; i++) {\n\t\t          var route = routes[i], names = [];\n\t\t\n\t\t          var segments = $$route$recognizer$$parse(route.path, names, specificity);\n\t\t\n\t\t          allSegments = allSegments.concat(segments);\n\t\t\n\t\t          for (var j=0; j<segments.length; j++) {\n\t\t            var segment = segments[j];\n\t\t\n\t\t            if (segment instanceof $$route$recognizer$$EpsilonSegment) { continue; }\n\t\t\n\t\t            isEmpty = false;\n\t\t\n\t\t            // Add a \"/\" for the new segment\n\t\t            currentState = currentState.put({ invalidChars: undefined, repeat: false, validChars: \"/\" });\n\t\t            regex += \"/\";\n\t\t\n\t\t            // Add a representation of the segment to the NFA and regex\n\t\t            currentState = segment.eachChar(currentState);\n\t\t            regex += segment.regex();\n\t\t          }\n\t\t          var handler = { handler: route.handler, names: names };\n\t\t          handlers[i] = handler;\n\t\t        }\n\t\t\n\t\t        if (isEmpty) {\n\t\t          currentState = currentState.put({ invalidChars: undefined, repeat: false, validChars: \"/\" });\n\t\t          regex += \"/\";\n\t\t        }\n\t\t\n\t\t        currentState.handlers = handlers;\n\t\t        currentState.regex = new RegExp(regex + \"$\");\n\t\t        currentState.specificity = specificity;\n\t\t\n\t\t        if (name = options && options.as) {\n\t\t          this.names[name] = {\n\t\t            segments: allSegments,\n\t\t            handlers: handlers\n\t\t          };\n\t\t        }\n\t\t      },\n\t\t\n\t\t      handlersFor: function(name) {\n\t\t        var route = this.names[name];\n\t\t\n\t\t        if (!route) { throw new Error(\"There is no route named \" + name); }\n\t\t\n\t\t        var result = new Array(route.handlers.length);\n\t\t\n\t\t        for (var i=0; i<route.handlers.length; i++) {\n\t\t          result[i] = route.handlers[i];\n\t\t        }\n\t\t\n\t\t        return result;\n\t\t      },\n\t\t\n\t\t      hasRoute: function(name) {\n\t\t        return !!this.names[name];\n\t\t      },\n\t\t\n\t\t      generate: function(name, params) {\n\t\t        var route = this.names[name], output = \"\";\n\t\t        if (!route) { throw new Error(\"There is no route named \" + name); }\n\t\t\n\t\t        var segments = route.segments;\n\t\t\n\t\t        for (var i=0; i<segments.length; i++) {\n\t\t          var segment = segments[i];\n\t\t\n\t\t          if (segment instanceof $$route$recognizer$$EpsilonSegment) { continue; }\n\t\t\n\t\t          output += \"/\";\n\t\t          output += segment.generate(params);\n\t\t        }\n\t\t\n\t\t        if (output.charAt(0) !== '/') { output = '/' + output; }\n\t\t\n\t\t        if (params && params.queryParams) {\n\t\t          output += this.generateQueryString(params.queryParams, route.handlers);\n\t\t        }\n\t\t\n\t\t        return output;\n\t\t      },\n\t\t\n\t\t      generateQueryString: function(params, handlers) {\n\t\t        var pairs = [];\n\t\t        var keys = [];\n\t\t        for(var key in params) {\n\t\t          if (params.hasOwnProperty(key)) {\n\t\t            keys.push(key);\n\t\t          }\n\t\t        }\n\t\t        keys.sort();\n\t\t        for (var i = 0; i < keys.length; i++) {\n\t\t          key = keys[i];\n\t\t          var value = params[key];\n\t\t          if (value == null) {\n\t\t            continue;\n\t\t          }\n\t\t          var pair = encodeURIComponent(key);\n\t\t          if ($$route$recognizer$$isArray(value)) {\n\t\t            for (var j = 0; j < value.length; j++) {\n\t\t              var arrayPair = key + '[]' + '=' + encodeURIComponent(value[j]);\n\t\t              pairs.push(arrayPair);\n\t\t            }\n\t\t          } else {\n\t\t            pair += \"=\" + encodeURIComponent(value);\n\t\t            pairs.push(pair);\n\t\t          }\n\t\t        }\n\t\t\n\t\t        if (pairs.length === 0) { return ''; }\n\t\t\n\t\t        return \"?\" + pairs.join(\"&\");\n\t\t      },\n\t\t\n\t\t      parseQueryString: function(queryString) {\n\t\t        var pairs = queryString.split(\"&\"), queryParams = {};\n\t\t        for(var i=0; i < pairs.length; i++) {\n\t\t          var pair      = pairs[i].split('='),\n\t\t              key       = $$route$recognizer$$decodeQueryParamPart(pair[0]),\n\t\t              keyLength = key.length,\n\t\t              isArray = false,\n\t\t              value;\n\t\t          if (pair.length === 1) {\n\t\t            value = 'true';\n\t\t          } else {\n\t\t            //Handle arrays\n\t\t            if (keyLength > 2 && key.slice(keyLength -2) === '[]') {\n\t\t              isArray = true;\n\t\t              key = key.slice(0, keyLength - 2);\n\t\t              if(!queryParams[key]) {\n\t\t                queryParams[key] = [];\n\t\t              }\n\t\t            }\n\t\t            value = pair[1] ? $$route$recognizer$$decodeQueryParamPart(pair[1]) : '';\n\t\t          }\n\t\t          if (isArray) {\n\t\t            queryParams[key].push(value);\n\t\t          } else {\n\t\t            queryParams[key] = value;\n\t\t          }\n\t\t        }\n\t\t        return queryParams;\n\t\t      },\n\t\t\n\t\t      recognize: function(path) {\n\t\t        var states = [ this.rootState ],\n\t\t            pathLen, i, l, queryStart, queryParams = {},\n\t\t            isSlashDropped = false;\n\t\t\n\t\t        queryStart = path.indexOf('?');\n\t\t        if (queryStart !== -1) {\n\t\t          var queryString = path.substr(queryStart + 1, path.length);\n\t\t          path = path.substr(0, queryStart);\n\t\t          queryParams = this.parseQueryString(queryString);\n\t\t        }\n\t\t\n\t\t        path = decodeURI(path);\n\t\t\n\t\t        if (path.charAt(0) !== \"/\") { path = \"/\" + path; }\n\t\t\n\t\t        pathLen = path.length;\n\t\t        if (pathLen > 1 && path.charAt(pathLen - 1) === \"/\") {\n\t\t          path = path.substr(0, pathLen - 1);\n\t\t          isSlashDropped = true;\n\t\t        }\n\t\t\n\t\t        for (i=0; i<path.length; i++) {\n\t\t          states = $$route$recognizer$$recognizeChar(states, path.charAt(i));\n\t\t          if (!states.length) { break; }\n\t\t        }\n\t\t\n\t\t        var solutions = [];\n\t\t        for (i=0; i<states.length; i++) {\n\t\t          if (states[i].handlers) { solutions.push(states[i]); }\n\t\t        }\n\t\t\n\t\t        states = $$route$recognizer$$sortSolutions(solutions);\n\t\t\n\t\t        var state = solutions[0];\n\t\t\n\t\t        if (state && state.handlers) {\n\t\t          // if a trailing slash was dropped and a star segment is the last segment\n\t\t          // specified, put the trailing slash back\n\t\t          if (isSlashDropped && state.regex.source.slice(-5) === \"(.+)$\") {\n\t\t            path = path + \"/\";\n\t\t          }\n\t\t          return $$route$recognizer$$findHandler(state, path, queryParams);\n\t\t        }\n\t\t      }\n\t\t    };\n\t\t\n\t\t    $$route$recognizer$$RouteRecognizer.prototype.map = $$route$recognizer$dsl$$default;\n\t\t\n\t\t    $$route$recognizer$$RouteRecognizer.VERSION = '0.1.11';\n\t\t\n\t\t    var $$route$recognizer$$default = $$route$recognizer$$RouteRecognizer;\n\t\t\n\t\t    /* global define:true module:true window: true */\n\t\t    if ( true && __webpack_require__(3)['amd']) {\n\t\t      !(__WEBPACK_AMD_DEFINE_RESULT__ = function() { return $$route$recognizer$$default; }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\t    } else if (typeof module !== 'undefined' && module['exports']) {\n\t\t      module['exports'] = $$route$recognizer$$default;\n\t\t    } else if (typeof this !== 'undefined') {\n\t\t      this['RouteRecognizer'] = $$route$recognizer$$default;\n\t\t    }\n\t\t}).call(this);\n\t\t\n\t\t//# sourceMappingURL=route-recognizer.js.map\n\t\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)(module)))\n\t\n\t/***/ },\n\t/* 2 */\n\t/***/ function(module, exports) {\n\t\n\t\tmodule.exports = function(module) {\r\n\t\t\tif(!module.webpackPolyfill) {\r\n\t\t\t\tmodule.deprecate = function() {};\r\n\t\t\t\tmodule.paths = [];\r\n\t\t\t\t// module.parent = undefined by default\r\n\t\t\t\tmodule.children = [];\r\n\t\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t\t}\r\n\t\t\treturn module;\r\n\t\t}\r\n\t\n\t\n\t/***/ },\n\t/* 3 */\n\t/***/ function(module, exports) {\n\t\n\t\tmodule.exports = function() { throw new Error(\"define cannot be used indirect\"); };\r\n\t\n\t\n\t/***/ }\n\t/******/ ])\n\t});\n\t;\n\t//# sourceMappingURL=router.js.map\n\n/***/ })\n/******/ ])\n});\n;\n//# sourceMappingURL=powerbi.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/powerbi-client/dist/powerbi.js\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./src/secure_embed.js":
/*!*****************************!*\
  !*** ./src/secure_embed.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var powerbi_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-client */ \"./node_modules/powerbi-client/dist/powerbi.js\");\n/* harmony import */ var powerbi_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(powerbi_client__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_1__);\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar $ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n\n\n\nvar App =\n/*#__PURE__*/\nfunction () {\n  function App() {\n    var _this = this;\n\n    _classCallCheck(this, App);\n\n    this.embedCSS();\n    this.powerbi = new powerbi_client__WEBPACK_IMPORTED_MODULE_0__[\"service\"].Service(powerbi_client__WEBPACK_IMPORTED_MODULE_0__[\"factories\"].hpmFactory, powerbi_client__WEBPACK_IMPORTED_MODULE_0__[\"factories\"].wpmpFactory, powerbi_client__WEBPACK_IMPORTED_MODULE_0__[\"factories\"].routerFactory);\n    axios__WEBPACK_IMPORTED_MODULE_1___default.a.get('/auth_proxy_routes/embed_data').then(function (response) {\n      _this.data = response.data;\n\n      _this.data.reports.forEach(function (report, i) {\n        Object.defineProperty(_this.data.reports, report.id, {\n          get: function get() {\n            return report;\n          }\n        });\n      });\n\n      _this.data.selected_reports = _this.data.selected_reports.map(function (v) {\n        var found = _this.data.reports[v.id];\n        found.slug = found.id.replace(/-/g, '');\n        found.handle = v.name.toLowerCase().replace(/ /g, '-');\n        return _objectSpread({}, found, {}, v);\n      });\n      console.log(_this.data.selected_reports);\n\n      _this.render();\n\n      _this.attachHandlers();\n    });\n  }\n\n  _createClass(App, [{\n    key: \"embedCSS\",\n    value: function embedCSS() {\n      var l = document.createElement('link');\n      l.href = '/auth_proxy_routes/asset/secure_embed.css';\n      l.rel = 'stylesheet';\n      document.head.appendChild(l);\n    }\n  }, {\n    key: \"loadReport\",\n    value: function loadReport(link) {\n      var _this2 = this;\n\n      var reports = this.data.reports;\n      var reportData = reports[$(link).data('report')];\n      var $reportContainer = $(link.hash);\n      if ($reportContainer.find('iframe').length) return;\n      $reportContainer.html('<span class=\"loading-indicator\">loading...</span>');\n\n      if ($(link).data('esrireport')) {\n        return this.loadEsriReport(link, $reportContainer);\n      }\n\n      axios__WEBPACK_IMPORTED_MODULE_1___default.a.get('/auth_proxy_routes/report_embed/' + reportData.id).then(function (response) {\n        var embedConfiguration = {\n          type: 'report',\n          id: reportData.id,\n          groupId: _this2.data.group_id,\n          embedUrl: 'https://app.powerbi.com/reportEmbed',\n          tokenType: powerbi_client__WEBPACK_IMPORTED_MODULE_0__[\"models\"].TokenType.Embed,\n          accessToken: response.data.embed_token\n        };\n\n        var report = _this2.powerbi.embed($reportContainer.get(0), embedConfiguration);\n      });\n    }\n  }, {\n    key: \"loadEsriReport\",\n    value: function loadEsriReport(link, $reportContainer) {\n      var reportId = $(link).data('esrireport');\n      axios__WEBPACK_IMPORTED_MODULE_1___default.a.get(\"/auth_proxy_routes/esri_embed/\".concat(reportId)).then(function (response) {\n        console.log(response);\n        $reportContainer.html(\"<iframe frameborder=\\\"0\\\" src=\\\"https://arcgis.com/apps/View/index.html?appid=\".concat(reportId, \"&token=\").concat(response.access_token, \"\\\"></iframe>\"));\n      }); // <iframe frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\" src=\"https://arcgis.com/apps/View/index.html?appid=6b6a075eca8d4899958fb273710a6806\"></iframe>\n    }\n  }, {\n    key: \"attachHandlers\",\n    value: function attachHandlers() {\n      var _this3 = this;\n\n      $(document).on('click', '[data-toggle=\"tab\"]', function (event) {\n        _this3.loadReport(event.target);\n      }); // load first tab\n\n      var $active = $('[data-toggle=\"tab\"]').filter(function () {\n        return $(this).parents('li.active').length;\n      });\n      this.loadReport($active[0]);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var links = this.data.selected_reports.map(function (v, i) {\n        return \"<li class=\\\"\".concat(i === 0 ? 'active' : '', \"\\\"><a data-XXtoggle=\\\"tab\\\" href=\\\"#\").concat(v.slug, \"\\\" data-report=\\\"\").concat(v.id, \"\\\">\").concat(v.name, \"</a></li>\");\n      });\n      var tabs = \"\\n\\t\\t\\t<ul class=\\\"nav nav-tabs\\\" id=\\\"secure_embed_tabs\\\">\\n\\t\\t\\t\\t\".concat(links.join(''), \"\\n\\t            <li>\\n\\t\\t\\t\\t\\t<a data-toggle=\\\"tab\\\" data-esrireport=\\\"be8cf70442fc4ff491247d47708302df\\\" href=\\\"#cluster_detection\\\">\\n\\t\\t\\t\\t\\t\\tCluster Detection & Response (Maps)\\n\\t\\t\\t\\t\\t</a>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t</ul>\\n\\t\\t\");\n      var tab_panel_items = this.data.selected_reports.map(function (v, i) {\n        return \"<div id=\\\"\".concat(v.slug, \"\\\" class=\\\"tab-pane fade \").concat(i === 0 ? 'in active' : '', \"\\\"></div>\");\n      });\n      var tab_panels = \"\\n\\t\\t\\t<div class=\\\"tab-content\\\">\\n\\t\\t\\t\".concat(tab_panel_items.join(''), \"\\n\\t\\t\\t<div id=\\\"cluster_detection\\\" class=\\\"tab-pane fade\\\">\\n\\n\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t\"); // \t\t\t\t<iframe src=\"https://icap.maps.arcgis.com/apps/opsdashboard/index.html#/be8cf70442fc4ff491247d47708302df\" frameborder=\"0\" allowFullScreen=\"true\"></iframe>\n\n      var page = \"<div id=\\\"secure_embed_root\\\">\\n\\t\\t\\t<div class=\\\"main-container\\\" id=\\\"main-container\\\">\\n\\t\\t\\t\\t<div class=\\\"page-header\\\">\\n\\t\\t\\t\\t\\t<h1>\\n\\t\\t\\t\\t\\t\\tEHRIS Dashboards\\n\\t\\t\\t\\t\\t</h1>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div class=\\\"tabbable\\\">\\n\\t\\t\\t\\t\\t\".concat(tabs, \" \").concat(tab_panels, \"\\n\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\");\n      $('script[src=\"/auth_proxy_routes/asset/secure_embed.js\"]').before(page);\n    }\n  }]);\n\n  return App;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (new App());//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/secure_embed.js\n");

/***/ }),

/***/ "./src/secure_embed.scss":
/*!*******************************!*\
  !*** ./src/secure_embed.scss ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2VjdXJlX2VtYmVkLnNjc3M/MjU5MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3NyYy9zZWN1cmVfZW1iZWQuc2Nzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/secure_embed.scss\n");

/***/ }),

/***/ 0:
/*!***********************************************************!*\
  !*** multi ./src/secure_embed.js ./src/secure_embed.scss ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! /home/dev/domains/pbi-auth.dev.also-too.com/auth_proxy/src/assets/src/secure_embed.js */"./src/secure_embed.js");
module.exports = __webpack_require__(/*! /home/dev/domains/pbi-auth.dev.also-too.com/auth_proxy/src/assets/src/secure_embed.scss */"./src/secure_embed.scss");


/***/ })

/******/ });